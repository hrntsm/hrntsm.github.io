{"version":3,"sources":["webpack:///./src/templates/article-tags.js","webpack:///./src/components/seo.js"],"names":["Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","title","map","node","path","frontmatter","key","to","SEO","description","lang","meta","keywords","image","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"4FAAA,qEAgEeA,UAxDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKK,MAAOL,IACZ,uBACE,sBAAKI,GACL,sBACGF,EAAMI,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACAH,EAAUE,EAAKE,YAAfJ,MACR,OACE,kBAAIK,IAAKF,GACP,YAAC,OAAD,CAAMG,GAAIH,GAAOH,QASzB,YAAC,OAAD,CAAMM,GAAG,iBAAT,gB,kCCnCR,kDAYA,SAASC,EAAT,GAAmE,IAApDC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUX,EAAgB,EAAhBA,MAAOY,EAAS,EAATA,MAC/CC,EAASC,yBAAe,YAAxBD,KAeFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEzD,OACE,YAAC,SAAD,CACES,eAAgB,CACdR,QAEFT,MAAOA,EACPkB,cAAa,QAAUL,EAAKG,aAAahB,MACzCU,KAAM,CACJ,CACES,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASpB,GAEX,CACEqB,SAAS,WACTD,QAASR,GAASC,EAAKG,aAAaJ,OAEtC,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASpB,GAEX,CACEmB,KAAK,sBACLC,QAASL,IAGVQ,OACCZ,EAASa,OAAS,EACd,CACEL,KAAK,WACLC,QAAST,EAASc,KAAT,OAEX,IAELF,OAAOb,KAKhBH,EAAImB,aAAe,CACjBjB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGJ","file":"component---src-templates-article-tags-js-c30d344be7e7732420a5.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport SEO from \"../components/seo\"\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <SEO title={tag} />\n      <div>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const { path } = node.frontmatter\n            const { title } = node.frontmatter\n            return (\n              <li key={path}>\n                <Link to={path}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        {/*\n                This links to a page that does not yet exist.\n                You'll come back to it!\n              */}\n        <Link to=\"/article-tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { article_tags: { in: [$tag] } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        title\n                        path\n                    }\n                }\n            }\n        }\n    }\n`","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            image\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: image || site.siteMetadata.image, \n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}