{"version":3,"sources":["webpack:///./src/components/seoNoindex.js","webpack:///./src/templates/diary-tags.js"],"names":["SEONOINDEX","lang","meta","keywords","title","image","htmlAttributes","name","content","property","concat","length","join","defaultProps","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","path","frontmatter","key","to"],"mappings":"8FAAA,sCAWA,SAASA,EAAT,GAA6D,IAAvCC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,MACjD,OACE,YAAC,SAAD,CACEC,eAAgB,CACdL,QAEFG,MAAOA,EACPF,KAAM,CACJ,CACEK,KAAK,SACLC,QAAQ,WAEV,CACEC,SAAS,WACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACEC,SAAS,WACTD,QAASH,GAEX,CACEE,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,gBACLC,QAASJ,IAGVM,OACCP,EAASQ,OAAS,EACd,CACEJ,KAAK,WACLC,QAASL,EAASS,KAAT,OAEX,IAELF,OAAOR,KAKhBF,EAAWa,aAAe,CACxBZ,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGH,O,oCCvEf,qEAgEec,UAxDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IACR,EAA8BD,EAAKE,kBAA3BC,EAAR,EAAQA,MAAOC,EAAf,EAAeA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,YAAC,IAAD,KACE,0BAAYb,MAAOa,IACnB,uBACE,sBAAKI,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACApB,EAAUmB,EAAKE,YAAfrB,MACR,OACE,kBAAIsB,IAAKF,GACP,YAAC,OAAD,CAAMG,GAAIH,GAAOpB,QASzB,YAAC,OAAD,CAAMuB,GAAG,eAAT","file":"component---src-templates-diary-tags-js-674e22f33184b9a447c4.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\n\nfunction SEONOINDEX({ lang, meta, keywords, title, image }) {\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      meta={[\n        {\n          name: `robots`,\n          content: `noindex`,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          property: `og:image`,\n          content: image,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEONOINDEX.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEONOINDEX.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEONOINDEX\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport seoNoindex from \"../components/seoNoindex\"\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <seoNoindex title={tag} />\n      <div>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const { path } = node.frontmatter\n            const { title } = node.frontmatter\n            return (\n              <li key={path}>\n                <Link to={path}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        {/*\n                This links to a page that does not yet exist.\n                You'll come back to it!\n              */}\n        <Link to=\"/diary-tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            path\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}