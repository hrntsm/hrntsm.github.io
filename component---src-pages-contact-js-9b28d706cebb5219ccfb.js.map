{"version":3,"sources":["webpack:///./src/pages/contact.js","webpack:///./src/components/seo.js"],"names":["Content","IndexPage","data","title","href","SEO","description","lang","meta","keywords","image","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"8KAQMA,EAAO,2HAMI,+FAKC,gOAWD,+FA4BFC,UAvBG,SAAC,GAAa,EAAXC,KACnB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKC,MAAM,YACX,YAACH,EAAD,KACE,iCACA,uCAAkB,uBAAlB,0CACA,8BACA,iBAAGI,KAAO,uGAAV,cAGA,sBACA,gCACA,iEACA,iCACA,iBAAGA,KAAM,kCAAT,mB,kCClDR,kDAYA,SAASC,EAAT,GAAmE,IAApDC,EAAmD,EAAnDA,YAAaC,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUN,EAAgB,EAAhBA,MAAOO,EAAS,EAATA,MAC/CC,EAASC,yBAAe,YAAxBD,KAeFE,EAAkBP,GAAeK,EAAKG,aAAaR,YAEzD,OACE,YAAC,SAAD,CACES,eAAgB,CACdR,QAEFJ,MAAOA,EACPa,cAAa,QAAUL,EAAKG,aAAaX,MACzCK,KAAM,CACJ,CACES,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASf,GAEX,CACEgB,SAAS,WACTD,QAASR,GAASC,EAAKG,aAAaJ,OAEtC,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAASf,GAEX,CACEc,KAAK,sBACLC,QAASL,IAGVQ,OACCZ,EAASa,OAAS,EACd,CACEL,KAAK,WACLC,QAAST,EAASc,KAAT,OAEX,IAELF,OAAOb,KAKhBH,EAAImB,aAAe,CACjBjB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGJ","file":"component---src-pages-contact-js-9b28d706cebb5219ccfb.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport styled from \"@emotion/styled\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 1.45rem 1.0875rem;\n`\n\nconst ArticleDate = styled.h5`\n  display: inline;\n  color: #606060;\n`\n\nconst MarkerHeader = styled.h3`\n  display: inline;\n  border-radius: 1em 0 1em 0;\n  background-image: linear-gradient(\n    -100deg,\n    rgba(255, 250, 150, 0.15),\n    rgba(255, 250, 150, 0.8) 100%,\n    rgba(255, 250, 150, 0.25)\n  );\n`\n\nconst ReadingTime = styled.h5`\n  display: inline;\n  color: #606060;\n`\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <SEO title=\"Contact\" />\n      <Content>\n        <h1>Contact</h1>\n        <p>お気軽にお問い合わせください。<br />お仕事も募集しておりますので、もしご一緒にお仕事できたらとてもうれしいです。</p>\n        <h3>Form</h3>\n        <a href= {\"https://docs.google.com/forms/d/e/1FAIpQLSc-tO01F1Pf0LX9rhbzVvHQjcGBduUACzyeTS2uQehNq8JoBQ/viewform\"}>\n          お問い合わせフォーム\n        </a>\n        <p/>\n        <h3>E-mail</h3>\n        <p>contact(a)hrntsm.com   (a) を @ に変換してください</p>\n        <h3>Twitter</h3>\n        <a href={\"https://twitter.com/hiron_rgkr\"}>\n            @hiron_rgkr\n        </a>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            rawDate: date\n            path\n          }\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            image\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: image || site.siteMetadata.image, \n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}