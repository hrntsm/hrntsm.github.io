{"version":3,"sources":["webpack:///./src/pages/articles.js","webpack:///./src/components/seo.js"],"names":["Content","ArticleDate","TagsHeader","MarkerHeader","ReadingTime","ogpurl","IndexPage","data","title","description","to","css","url","size","round","via","allMarkdownRemark","edges","filter","rawDate","node","frontmatter","Date","map","key","id","path","date","fields","readingTime","text","article_tags","excerpt","query","SEO","lang","meta","keywords","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","image","author","concat","length","join","defaultProps"],"mappings":"4RAgBMA,EAAO,0HAMPC,EAAW,8FAKXC,EAAU,8FAKVC,EAAY,+NAWZC,EAAW,8FAIXC,EAAS,8B,8HA2EAC,UAxEG,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACnB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACCC,MAAM,SACNC,YAAY,qEAEb,YAACT,EAAD,KACE,4CACA,uBACA,+BACS,uBADT,8DAE6D,uBAF7D,sDAKA,uBACA,YAACE,EAAD,KACE,YAAC,OAAD,CACEQ,GAAI,gBACJC,IAAG,GAFL,0BASW,uBAAK,uBAClB,uBACA,uBACE,YAAC,IAAD,CAAqBC,IAAKP,GACxB,YAAC,IAAD,CAAcQ,KAAM,GAAIC,OAAK,KAG/B,YAAC,IAAD,CAAmBN,MAnCZ,SAmC6BI,IAAKP,GACvC,YAAC,IAAD,CAAYQ,KAAM,GAAIC,OAAK,KAG7B,YAAC,IAAD,CAAoBN,MAvCb,SAuC8BO,IAAI,aAAaH,IAAKP,GACzD,YAAC,IAAD,CAAaQ,KAAM,GAAIC,OAAK,MAGhC,uBACCP,EAAKS,kBAAkBC,MACrBC,QAAO,YAAe,IACfC,EADc,EAAXC,KACYC,YAAYF,QAEjC,OADa,IAAIG,KAAKH,GACR,IAAIG,QAEnBC,KAAI,gBAAGH,EAAH,EAAGA,KAAH,OACH,mBAAKI,IAAKJ,EAAKK,IACb,YAAC,OAAD,CACEf,GAAIU,EAAKC,YAAYK,KACrBf,IAAG,GAKH,YAACR,EAAD,KAAeiB,EAAKC,YAAYb,MAAhC,KACA,uBACE,YAACP,EAAD,KAAcmB,EAAKC,YAAYM,MAC/B,YAACvB,EAAD,WAAiBgB,EAAKQ,OAAOC,YAAYC,MACzC,YAAC7B,EAAD,iBAAuBmB,EAAKC,YAAYU,aAAe,KAEzD,qBAAIX,EAAKY,iBAWlB,IAAMC,EAAK,c,kCC5HlB,kDAYA,SAASC,EAAT,GAA4D,IAA7CzB,EAA4C,EAA5CA,YAAa0B,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAU7B,EAAS,EAATA,MACxC8B,EAASC,yBAAe,YAAxBD,KAeFE,EAAkB/B,GAAe6B,EAAKG,aAAahC,YAEzD,OACE,YAAC,SAAD,CACEiC,eAAgB,CACdP,QAEF3B,MAAOA,EACPmC,cAAa,QAAUL,EAAKG,aAAajC,MACzC4B,KAAM,CACJ,CACEQ,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAASrC,GAEX,CACEsC,SAAS,WACTD,QAASP,EAAKG,aAAaM,OAE7B,CACED,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaO,QAE7B,CACEJ,KAAK,gBACLC,QAASrC,GAEX,CACEoC,KAAK,sBACLC,QAASL,IAGVS,OACCZ,EAASa,OAAS,EACd,CACEN,KAAK,WACLC,QAASR,EAASc,KAAT,OAEX,IAELF,OAAOb,KAKhBF,EAAIkB,aAAe,CACjBjB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGH","file":"component---src-pages-articles-js-e43cd1c02006c9c3f05f.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport styled from \"@emotion/styled\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  HatenaShareButton,\n  HatenaIcon,\n  TwitterShareButton,\n  TwitterIcon,\n} from 'react-share'\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 1.45rem 1.0875rem;\n`\n\nconst ArticleDate = styled.h5`\n  display: inline;\n  color: #606060;\n`\n\nconst TagsHeader = styled.h3`\n  display: inline;\n  color: #606060;\n`\n\nconst MarkerHeader = styled.h3`\n  display: inline;\n  border-radius: 1em 0 1em 0;\n  background-image: linear-gradient(\n    -100deg,\n    rgba(209, 245, 255, 0.15),\n    rgba(209, 245, 255, 1.0) 100%,\n    rgba(209, 245, 255, 0.45)\n  );\n`\n\nconst ReadingTime = styled.h5`\n  display: inline;\n  color: #606060;\n`\nconst ogpurl = \"https://hiron.dev/articles/\"\nconst ogptitle = \"技術記事たち\"\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <SEO\n       title=\"技術記事たち\"\n       description=\"技術記事です。構造とデジタル というブログや Qiita、Zenn.dev などにこれまで書いてきた記事をこちらにまとめました。\"\n      />\n      <Content>\n        <h1>Technical Articles</h1>\n        <hr></hr>\n        <p>\n          技術記事です。<br/>\n          \"構造とデジタル\" というブログや Qiita、Zenn.dev などにこれまで書いてきた記事をこちらにまとめました。<br/>\n          各媒体での記事をお探しの場合は、下記タグページから過去掲載していたサービスのタグを参照してください。\n        </p>\n        <hr></hr>\n        <TagsHeader>\n          <Link\n            to={\"/article-tags\"}\n            css={css`\n                  text-decoration: none;\n                  color: inherit;\n                `}\n          >\n            All Article Tags Page\n          </Link>\n        </TagsHeader><br/><br/>\n        <hr></hr>\n        <div>\n          <FacebookShareButton url={ogpurl}>\n            <FacebookIcon size={36} round />\n          </FacebookShareButton>\n \n          <HatenaShareButton title={ogptitle} url={ogpurl} >\n            <HatenaIcon size={36} round />\n          </HatenaShareButton>\n \n          <TwitterShareButton title={ogptitle} via=\"hiron_rgkr\" url={ogpurl} >\n            <TwitterIcon size={36} round />\n          </TwitterShareButton>\n       </div>\n        <hr></hr>\n        {data.allMarkdownRemark.edges\n          .filter(({ node }) => {\n            const rawDate = node.frontmatter.rawDate\n            const date = new Date(rawDate)\n            return date < new Date()\n          })\n          .map(({ node }) => (\n            <div key={node.id}>\n              <Link\n                to={node.frontmatter.path}\n                css={css`\n                  text-decoration: none;\n                  color: inherit;\n                `}\n              >\n                <MarkerHeader>{node.frontmatter.title} </MarkerHeader>\n                <div>\n                  <ArticleDate>{node.frontmatter.date}</ArticleDate>\n                  <ReadingTime> - {node.fields.readingTime.text}</ReadingTime>\n                  <ArticleDate> - Tags: {node.frontmatter.article_tags + \"\"}</ArticleDate>\n                </div>\n                <p>{node.excerpt}</p>\n              </Link>\n            </div>\n          ))}\n      </Content>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } }, fields: {collection : { eq: \"article\"} } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            rawDate: date\n            path\n            article_tags\n          }\n          fields {\n            collection\n            slug\n            readingTime {\n              text\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            image\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: site.siteMetadata.image, \n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}