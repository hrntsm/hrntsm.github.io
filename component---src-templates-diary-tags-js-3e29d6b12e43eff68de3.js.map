{"version":3,"sources":["webpack:///./src/components/seoNoindex.js","webpack:///./src/templates/diary-tags.js"],"names":["SEONOINDEX","description","lang","meta","keywords","title","site","siteMetadata","htmlAttributes","name","content","property","concat","length","join","defaultProps","Tags","pageContext","data","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","path","frontmatter","key","to","pageQuery"],"mappings":"8FAAA,sCAWA,SAASA,EAAT,GAAmE,IAA7CC,EAA4C,EAA5CA,YAAaC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAE/BJ,GAAeK,KAAKC,aAAaN,YAEzD,OACE,YAAC,SAAD,CACEO,eAAgB,CACdN,QAEFG,MAAOA,EACPF,KAAM,CACJ,CACEM,KAAK,SACLC,QAAQ,WAEV,CACEC,SAAS,WACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,gBACLC,QAASL,IAGVO,OACCR,EAASS,OAAS,EACd,CACEJ,KAAK,WACLC,QAASN,EAASU,KAAT,OAEX,IAELF,OAAOT,KAKhBH,EAAWe,aAAe,CACxBb,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGJ,O,oCCtEf,+GAgEegB,UAxDF,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACnBC,EAAQF,EAARE,IAD8B,EAERD,EAAKE,kBAA3BC,EAF8B,EAE9BA,MAAOC,EAFuB,EAEvBA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,YAAC,IAAD,KACE,0BAAYd,MAAOc,IACnB,uBACE,sBAAKI,GACL,sBACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,YAAdD,KACArB,EAAUoB,EAAKE,YAAftB,MACR,OACE,kBAAIuB,IAAKF,GACP,YAAC,OAAD,CAAMG,GAAIH,GAAOrB,QASzB,YAAC,OAAD,CAAMwB,GAAG,eAAT,eA+BD,IAAMC,EAAS","file":"component---src-templates-diary-tags-js-3e29d6b12e43eff68de3.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\n\nfunction SEONOINDEX({ description, lang, meta, keywords, title }) {\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      meta={[\n        {\n          name: `robots`,\n          content: `noindex`\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEONOINDEX.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEONOINDEX.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEONOINDEX\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport seoNoindex from \"../components/seoNoindex\"\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n      <seoNoindex title={tag} />\n      <div>\n        <h1>{tagHeader}</h1>\n        <ul>\n          {edges.map(({ node }) => {\n            const { path } = node.frontmatter\n            const { title } = node.frontmatter\n            return (\n              <li key={path}>\n                <Link to={path}>{title}</Link>\n              </li>\n            )\n          })}\n        </ul>\n        {/*\n                This links to a page that does not yet exist.\n                You'll come back to it!\n              */}\n        <Link to=\"/diary-tags\">All tags</Link>\n      </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n    query($tag: String) {\n        allMarkdownRemark(\n            limit: 2000\n            sort: { fields: [frontmatter___date], order: DESC }\n            filter: { frontmatter: { tags: { in: [$tag] } } }\n        ) {\n            totalCount\n            edges {\n                node {\n                    fields {\n                        slug\n                    }\n                    frontmatter {\n                        title\n                        path\n                    }\n                }\n            }\n        }\n    }\n`"],"sourceRoot":""}