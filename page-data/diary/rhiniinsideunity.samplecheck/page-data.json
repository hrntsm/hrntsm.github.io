{"componentChunkName":"component---src-templates-blog-post-js","path":"/diary/rhiniinsideunity.samplecheck","result":{"data":{"markdownRemark":{"html":"<p>　公式のRhinoInside Unityをちょっといじって遊んでみます。最終的には以下のようなものを目指します。  </p>\n<p>　Unity側のゲームオブジェクトの座標を取得してGrasshopperに送り、その情報をもとにRhino側でジオメトリを計算しメッシュを返し、Unityでゲームオブジェクトとして表示することをやっています。<br>\nなおこの記事は、Unity、Rhino、C#を基本的な操作を理解していることを前提にしています。</p>\n<p><img src=\"https://1.bp.blogspot.com/-6V7f-V45f6I/XlnF_6_cg1I/AAAAAAAABxE/LcQkqiRw7z4OEDSck8fkjb1PDhm4DJ7TACLcBGAsYHQ/s640/rhinoinsideunity_vshoudini.gif\"></p>\n<p>　RhinoInside は2020/02/29現在開発中の機能なので、RhinoWIP（Rhino7）を使えるかたにしか使えない機能です。RhinoInside でなにができるか気になる方は<a href=\"https://qiita.com/hiron_rgkr/items/ba00b7ae75068a54ff20\">こちらのQiitaの記事</a>をどうぞ</p>\n<p>　RhinoInside Unityを使うためには<a href=\"https://github.com/mcneel/rhino.inside/tree/master/Unity\">mcneelのGitHub</a>を参照してください。概要を説明します。  </p>\n<ol>\n<li>\n<p>リポジトリをクローンしてください。コマンドプロンプトからやる場合は以下のコマンドを入れてください。  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">git clone --recursive https://github.com/mcneel/rhino.inside.git rhino.inside</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>RhinoCommonをアップデートするため rhino.inside\\Unity\\Sample1\\Assets\\Standard Assets\\RhinoInside のフォルダに行き RhinoCommon.Update.bat をダブルクリックしてください。</li>\n</ol>\n<p>　これで使えるようになります。</p>\n<p>　遊んでいくベースとするのは rhino.inside\\Unity\\Sample2 のフォルダのデータなのでUnityHubなどを使っているならば、上記フォルダを追加して開きましょう。</p>\n<p><a href=\"https://1.bp.blogspot.com/-Qvc95M49gfg/Xlnzwbq90-I/AAAAAAAABxg/vpwdxb-nO4Aw7beMmi5skYsOfoPcABihgCLcBGAsYHQ/s1600/%25E7%2594%25BB%25E5%2583%258F1.png\"><img src=\"https://1.bp.blogspot.com/-Qvc95M49gfg/Xlnzwbq90-I/AAAAAAAABxg/vpwdxb-nO4Aw7beMmi5skYsOfoPcABihgCLcBGAsYHQ/s400/%25E7%2594%25BB%25E5%2583%258F1.png\"></a></p>\n<p>　Unityを開くと上の画像のようにGrasshopperがあるのでShowを押すとUnityの裏でRhinoとGrasshopperが起動し、ゲームオブジェクトの”Grasshopper Geometry”が作られます。</p>\n<p>　Grasshopperでは”callunity2.gh”ファイルを開くと、UnityのMainCameraの座標をghに送りその点に対してgh上でジオメトリの操作をして作られたメッシュをUnityに返す中身になっています。Unityとやり取りする部分だけC#スクリプトのコンポーネントで作成されています。</p>\n<p>　ghの中身の概要としてはBoxで領域を作ってその中にPopulate3Dで点をランダムにうち、その点とUnityのMainCameraの座標のDistanceをとってその関係からRemapしてその点にsphereを作る挙動になっています。</p>\n<p>　動作はこんな感じです。</p>\n<p><a href=\"https://1.bp.blogspot.com/-V-Tl-UzRpPQ/Xln3pHcvPqI/AAAAAAAABx4/K9HCqdQ1WnUpNgSycLpN58RLSyTj3SbRQCLcBGAsYHQ/s1600/RIU_Sampl2.gif\"><img src=\"https://1.bp.blogspot.com/-V-Tl-UzRpPQ/Xln3pHcvPqI/AAAAAAAABx4/K9HCqdQ1WnUpNgSycLpN58RLSyTj3SbRQCLcBGAsYHQ/s400/RIU_Sampl2.gif\"></a></p>\n<p>　これだけだとsampleそのままで面白くないので、ghの中で点をうつ基準になっているBoxのサイズもUnity側から操作できるようにしてみます。</p>\n<p>　まずunityにBoxのサイズをコントロールするものを作ります。gh内でBoxを作成するためにはBoxのxyz座標があればいいので、unityのゲームオブジェクトのtransformを送ればいいとして、UnityでCreateEmptyでゲームオブジェクトを作って”ControlPoint”と名前を付けます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-2DC4FQFBF9A/Xln6lF-KkFI/AAAAAAAAByQ/FcELw49TsgA_MIca2IZqXrr0hw_Kn0n3ACLcBGAsYHQ/s1600/%25E7%2594%25BB%25E5%2583%258F2.png\"><img src=\"https://1.bp.blogspot.com/-2DC4FQFBF9A/Xln6lF-KkFI/AAAAAAAAByQ/FcELw49TsgA_MIca2IZqXrr0hw_Kn0n3ACLcBGAsYHQ/s400/%25E7%2594%25BB%25E5%2583%258F2.png\"></a></p>\n<p>　この”ControlPoint”をgh側に送るためにGrasshopperInUnity.csをいじります。このファイルでは最初の方はMenuItemでの操作の部分が書いてあり一番下のUpdateの部分に追記していきます。</p>\n<p>　Updateの初めの部分を読むと </p>\n<p>　　var pt = Camera.main.gameObject.transform.position.ToRhino()</p>\n<p>となっていて、MainCameraのポジションをToRhinoしています。</p>\n<p>　ToRhinoでやっていることは、transform.positionで取得できるのはVector3なので、ToRhinoでRhino.Geometry.Point3d に変換しています。その後argsに”point”という名前で pt をセットし、</p>\n<p>　　Rhino.Runtime.HostUtils.ExecuteNamedCallback(\"ToGrasshopper\", args)</p>\n<p>で送ってます。</p>\n<p>　なので、”ControlPoint”のtransform.positionをToRhinoすれば良さそうなので同じように書いて以下のように追記します。  </p>\n<p>　これでUnity側での作業は終わりです。<br>\n次にgh側です。Unityから受け取るのはMainCameraのものと同じなので既にあるreceiveのコンポーネントをコピーします。中身を以下のように書き換えます。  </p>\n<p>　書き換えた点は、9行目で、Unityから届く登録された名前は”ToGrasshopper1”なのでその点を修正しています。同様に20行目もTryGetGeometryするものの名前を”controlpoint”に変えています。これでC#コンポーネントが完成したのでその出力であるポイントの情報をDeconstructしてBoxの入力に入れます。<br>\n以上で作業は終わりです。これでうまくいっていればUnity側から操作できるようになっていると思います。よくわかりませんが書きたての時はうまく動かなかったりUnityが落ちたりするので、ダメなときはunity再起動するとうまくいく場合があるかもしれません。<br>\nあなたもこれでRhinoInsideUnityで遊んでみてください。  </p>\n<p><a href=\"https://1.bp.blogspot.com/-pukbJjiUEF4/XloEg7XZk1I/AAAAAAAAByo/62SY-yQ1E1AqtS3ROQ9rb88w0WiMd3SpACLcBGAsYHQ/s1600/RIU_Sampl2-2.gif\"><img src=\"https://1.bp.blogspot.com/-pukbJjiUEF4/XloEg7XZk1I/AAAAAAAAByo/62SY-yQ1E1AqtS3ROQ9rb88w0WiMd3SpACLcBGAsYHQ/s640/RIU_Sampl2-2.gif\"></a></p>","excerpt":"公式のRhinoInside Unityをちょっといじって遊んでみます。最終的には以下のようなものを目指します。   　Unity側のゲームオブジェクトの座標を取得してGrasshopperに送り、その情報をもとにRhino側でジオメトリを計算しメッシュを返し、Unity…","frontmatter":{"date":"29 February, 2020","path":"/diary/rhiniinsideunity.samplecheck","title":"RhinoInside Unity の公式サンプルで遊ぶ","tags":["Unity","grasshopper","RhinoInside","C#","rhinoceros"]},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}