{"componentChunkName":"component---src-templates-blog-post-js","path":"/diary/GpuPrograming-in-GH-with-AleaGp","result":{"data":{"markdownRemark":{"html":"<p>GPUプログラミングが面白そうだったので、Grasshopperで実装して動作の感じを確認してみました。実装した方法について説明していきます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-0Fs5Nd-oCzc/XqrCTImNSCI/AAAAAAAAB2Q/JBMrTBcHsPYsqQhFMAPTsAxeUlayYX5mgCK4BGAsYHg/gpu.gif\"><img src=\"https://1.bp.blogspot.com/-0Fs5Nd-oCzc/XqrCTImNSCI/AAAAAAAAB2Q/JBMrTBcHsPYsqQhFMAPTsAxeUlayYX5mgCK4BGAsYHg/w640-h482/gpu.gif\"></a></p>\n<p>　使用するライブラリは<a href=\"http://www.aleagpu.com/release/3_0_4/doc/\">AleaGPU</a>です。</p>\n<p>　公式のドキュメントによると、AleaGPUは、早く、使いやすく、高い生産性となっており、コンパイルされたコードはCUDA C、C++と同程度の速さで実行されるとのことです。上記で書きましたが、CUDAを使用しているため、NVIDIAのGTX1050以上GPUを積んでいないと動作しないため注意してください。</p>\n<p>　基本的な内容はこちらのQiitaの記事がわかりやすかったので紹介します。<a href=\"https://qiita.com/y_miyoshi/items/921903e3499abf18abdd\">Alea GPUで簡単C# GPUプログラミング</a>  </p>\n<p>　まずVisualStudioでAleaライブラリを使えるようするため、NuGetを使ってインストールしてください。合わせてFSharp.Coreも必要になるので、インストールしてください。ここら辺のやり方はこちらの記事がわかりやすかったので合わせて紹介します。<a href=\"https://kzmmtmt.pgw.jp/?p=1170\">Alea GPUライブラリを使ってC#で簡単GPU並列プログラミング</a></p>\n<p>　Aleaが使えるようになったら、Grasshopperでの実装を行っていきます。上で紹介したサイトでは例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">Gpu.Default.for(0, 100, i =&gt; hogehoge)  \n\n```のようにやる並列計算の例が書かれていますが、簡単に試すためにAleaのあるメソッドを使って今回はやりました。使用したのは平均を求める[GpuExtension.Average メソッド](http://www.aleagpu.com/release/3_0_4/api/html/92879577-0e02-e2e4-7fea-b9777d20505a.htm) と合計を求める[GpuExtension.Sum メソッド](http://www.aleagpu.com/release/3_0_4/api/html/1d45ba9a-3b5f-b4a0-7d1b-a67ccfcad9a1.htm) です。\n\n　入力を計算したい値のリストとして、SolveInstanceを以下のようにしました。GHの入力はリストですが、並列計算は配列でないとできないため、20行目で入力されたリストを配列に変換しています。その後GpuExtension.Average メソッドを使用してGPUで計算して値を返しています。12行目でGpuManaged のアトリビュートをつけていますが、これはAlea側でGPUのメモリの管理を自動で行ってくれる設定で、これをつけると速度が上がります。  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>using System;<br>\nusing System.Collections.Generic;  </p>\n<p>using Grasshopper.Kernel;<br>\nusing Rhino.Geometry;  </p>\n<p>using Alea;<br>\nusing Alea.Parallel;  </p>\n<p>・・・省略・・・  </p>\n<p>[GpuManaged]<br>\nprotected override void SolveInstance(IGH_DataAccess DA)<br>\n{<br>\nvar gpu = Gpu.Default;<br>\ndouble average;<br>\nvar inputList = new List<double>();  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">if (!DA.GetDataList(0, inputList)) { return; }  \nvar inputArray = inputList.ToArray();  \n\naverage = GpuExtension.Average(gpu, inputArray);  \n\nDA.SetData(0, average);  </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>}          </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">合計もほぼ同じ書き方で書くことができます。詳細は、最後につけた私のGitHubのリポにソースを上げているので見てください。これでコードは終わりです。\n\n　これをビルドしただけでは動かないので、次にRhinoに必要なライブラリを入れます。上で作ったコードをビルドをすると以下のように binフォルダの中にAlea関連のファイルがいくつか作成されます。\n\n  \n\n[![](https://1.bp.blogspot.com/-eAdjBT1FKpg/XqrOjjqxwZI/AAAAAAAAB24/nnMn2asubrQj_oFRfUlwfaLIwCIQF9IXwCK4BGAsYHg/w400-h354/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B221105.png)](https://1.bp.blogspot.com/-eAdjBT1FKpg/XqrOjjqxwZI/AAAAAAAAB24/nnMn2asubrQj_oFRfUlwfaLIwCIQF9IXwCK4BGAsYHg/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B221105.png)\n\n  \n\n　この中で Alea.CUDA.CT.LibDevice から FSharp.Core.xml までを C:\\\\Program Files\\\\Rhino 6\\\\System 内に入れます。\n\n　これで動くようになったので、Grasshopperを起動して作成したコンポーネントを使用して比較してみると以下のようになりました。比較としては、合計は、GHのMassAdditionコンポーネントとの比較、平均はGHのAverageコンポーネントとImpalaのQuickAvrコンポーネントとの比較を行っています。\n\n[![](https://1.bp.blogspot.com/-Z0CBm7OujaA/XqrRHIXLVOI/AAAAAAAAB3g/lgPgOPav8HM5YVo8haW0ExyZe1MUUVj-gCK4BGAsYHg/w640-h541/EWxUvI9X0AIaZc6.png)](https://1.bp.blogspot.com/-Z0CBm7OujaA/XqrRHIXLVOI/AAAAAAAAB3g/lgPgOPav8HM5YVo8haW0ExyZe1MUUVj-gCK4BGAsYHg/EWxUvI9X0AIaZc6.png)\n\n　結果としては合計はGPUの方が早く、平均はImpalaが早い結果になりました。計算するデータ数を増やすためにEntwineを使って枝分かれさせて入力してみた結果が以下です。\n\n[![](https://1.bp.blogspot.com/-UvrRXc4T1Vs/XqrVJnTBBwI/AAAAAAAAB4I/vxlNQBEbVaIR4I27Xr1SFoWItaQNSafPACK4BGAsYHg/w640-h442/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B223814.png)](https://1.bp.blogspot.com/-UvrRXc4T1Vs/XqrVJnTBBwI/AAAAAAAAB4I/vxlNQBEbVaIR4I27Xr1SFoWItaQNSafPACK4BGAsYHg/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B223814.png)\n\n  \n\n　並列化処理とか、GPUとのデータのやり取りに時間がかかるので、やっぱり必ずしも早くなるわけではないですね。実装は簡単だけどどんな時それが適切なのかよくわからないので、ここら辺は真面目にコンピューターサイエンスとか勉強してみたい範囲です。\n\n  \n\n　実際に自分でビルドして使ってみたいからはGitHubのリポを参照してください。[https://github.com/hrntsm/GHGpuComputingTest](https://github.com/hrntsm/GHGpuComputingTest)</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"GPUプログラミングが面白そうだったので、Grasshopperで実装して動作の感じを確認してみました。実装した方法について説明していきます。  　使用するライブラリはAleaGPUです。 　公式のドキュメントによると、AleaGPUは、早く、使いやすく、高い生産性となっており、コンパイルされたコードはCUDA C、C…","frontmatter":{"date":"30 April, 2020","path":"/diary/GpuPrograming-in-GH-with-AleaGp","title":"Alea GPU を使って GrasshopperでGPU並列プログラミング","tags":["grasshopper","C#"]},"fields":{"readingTime":{"text":"1 min read"}}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}