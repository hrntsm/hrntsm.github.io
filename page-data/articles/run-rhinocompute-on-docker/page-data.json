{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/run-rhinocompute-on-docker","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>Docker を使って RhinoCompute を実行してみます。</p>\n<p>クラウドで、CI を使って RhinoCompute を実行できれば、例えば開発した Grasshopper コンポーネントを Rhino を使ってテストできるので良いのではと考えて試してみました。</p>\n<h2>Docker の支度</h2>\n<h3>インストール</h3>\n<p>Docker は <a href=\"https://www.docker.com/\">Docker のホームページ</a> からインストールしてください。</p>\n<p>Rhino は Windows (.NetFrameWork) で動くので Windows Container を対象とした状態にしておいてください。</p>\n<h3>Dockerfile の入手</h3>\n<p>Dockerfile は RhinoCompute の公式リポジトリにあるので、そのままそのリポジトリをクローンしてください。</p>\n<ul>\n<li><a href=\"https://github.com/mcneel/compute.rhino3d\">mcneel/compute.rhino3d</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">git clone http://github.com/mcneel/compute.rhino3d.git</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>build する</h3>\n<p>クローンしたフォルダで docker bulid します。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">docker build --isolation process -t rhino-compute .</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>多分そのままでは動かないので、Dockerfile を必要に応じて書き換えます。</p>\n<h3>使用する Windows のバージョンをそろえる</h3>\n<p>デフォルトだと Windows 10 version 1809 がインストールされますが、自分が使っている Windows のバージョンとそろえる必要があります。\n2021/03/13 時点で最新の Windows は 20H2 なので、細心にしている方は以下に直します。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">FROM</span> mcr.microsoft.com/windows<span class=\"token punctuation\">:</span>20H2</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>インストールする Rhino バージョンの変更</h3>\n<p>2021/03/13 時点での Dockerfile そのままですと ver 7.2.21021.07001 がインストールされますので、別のバージョンにしたい場合は以下の部分を書き換えてください。\nコメントで書かれている URL にすると最新版に自動でリダイレクトされるそうです。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token comment\"># install rhino (with “-package -quiet” args)</span>\n<span class=\"token comment\"># NOTE: edit this if you use a different version of rhino!</span>\n<span class=\"token comment\"># the url below will always redirect to the latest rhino 7 (email required)</span>\n<span class=\"token comment\"># https://www.rhino3d.com/download/rhino-for-windows/7/latest/direct?email=EMAIL</span>\n<span class=\"token keyword\">RUN</span> curl <span class=\"token punctuation\">-</span>fSLo rhino_installer.exe https<span class=\"token punctuation\">:</span>//files.mcneel.com/dujour/exe/20210121/rhino_en<span class=\"token punctuation\">-</span>us_7.2.21021.07001.exe `\n    &amp;&amp; .\\rhino_installer.exe <span class=\"token punctuation\">-</span>package <span class=\"token punctuation\">-</span>quiet `\n    &amp;&amp; del .\\rhino_installer.exe</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>Rhino へのプラグインのインストール</h3>\n<p>そのままだと Rhino がインストールされるだけで、プラグインはインストールされないので、必要なものがある場合は Yak の実行も追加します。\nデフォルトではコメントアウトされています。</p>\n<p>以下では jswan というプラグインをインストールしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">RUN</span> <span class=\"token string\">\"\"</span>C<span class=\"token punctuation\">:</span>\\Program Files\\Rhino 7\\System\\Yak.exe<span class=\"token string\">\"\"</span> install jswan</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>TOKEN の入力</h3>\n<p>Docker で動かすためには RhinoCompute の課金設定をする必要があります。\n課金は以下でできます。</p>\n<ol>\n<li><a href=\"https://accounts.rhino3d.com/\">Rhino Accounts</a> にアクセスする</li>\n<li>ライセンスのページに行く</li>\n<li>新規チームを作成する</li>\n<li>\"チームの管理\"から\"コア時間課金の管理…\"を選ぶ</li>\n<li>コア時間課金を有効にして保存する</li>\n<li>\n<p>再度コア課金の管理のページに行き、操作 ▼ から Get Auth Token を選ぶ</p>\n<ul>\n<li>この AuthToken を Dockerfile に入れる</li>\n</ul>\n</li>\n</ol>\n<p>6 で取得した Token を Dockerfile の以下の TOKEN の位置に入れます。</p>\n<div class=\"gatsby-highlight\" data-language=\"dockerfile\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-dockerfile line-numbers\"><code class=\"language-dockerfile\"><span class=\"token keyword\">ENV</span> RHINO_TOKEN=<span class=\"token string\">\"TOKEN\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>RhinoCompute を実行する</h2>\n<p>ビルドできたら以下で Docker で RhinoCompute が実行できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">docker run -p 8080:80 rhino-compute</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>実行に問題がなければ以下のように表示されます。\nタイムスタンプは実行した時間によりますので、環境次第です。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">[18:19:12 INF] Compute 1.0.0.0, Rhino 7.4.21067.13001\n[18:19:12 INF] Configuration Result:  \n[Success] Name compute.geometry       \n[Success] DisplayName rhino.compute   \n[Success] Description rhino.compute   \n[Success] ServiceName compute.geometry\n[18:19:12 INF] Topshelf v4.1.0.172, .NET Framework v4.0.30319.42000\n[18:19:13 INF] Launching RhinoCore library as ContainerAdministrator\n[18:19:26 INF] Starting listener(s): [&quot;http://+:80&quot;]\n[18:19:28 INF] (1/2) Loading grasshopper\n[18:19:31 INF] Grasshopper has started loading all component libraries\n[18:19:31 INF] * Loading Grasshopper core assembly...\n[18:19:31 INF] * Loading CurveComponents assembly...\n[18:19:31 INF] * Loading FieldComponents assembly...\n[18:19:31 INF] * Loading GalapagosComponents assembly...\n[18:19:31 INF] * Loading IOComponents assembly...\n[18:19:31 INF] * Loading Kangaroo2Component assembly...\n[18:19:31 INF] * Loading MathComponents assembly...\n[18:19:31 INF] * Loading ScriptComponents assembly...\n[18:19:31 INF] * Loading SurfaceComponents assembly...\n[18:19:31 INF] * Loading TriangulationComponents assembly...\n[18:19:31 INF] * Loading VectorComponents assembly...\n[18:19:31 INF] * Loading XformComponents assembly...\n[18:19:31 INF] * Loading GhPython assembly...\n[18:19:31 INF] (2/2) Loading compute plug-ins\n[18:19:31 INF] Listening on [&quot;http://+:80&quot;]\n[18:19:31 INF] The compute.geometry service is now running, press Control+C to exit.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ブラウザで \"localhost:8080/version\" を入れて、以下のようにバージョンが帰ってくれば問題なく動いています。\n値は環境により異なります。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"rhino\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.0.20259.15365\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"compute\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0.493\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"git_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a612c257\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上記で Control＋C で終了できると書いてありますが、多分それを行っても Docker の表示が閉じられるだけで、RhinoCompute 自体は動いています。</p>\n<p>以下のコマンドで状態が確認できます。</p>\n<p>ここでは STATUS の欄にあるように 55 秒前に起動された状態で、RhinoCompute は動いたままなので、<strong>RhinoCompute の課金もアクティブなまま（注意）</strong> です。\nCONTAINER ID と NAMES は環境によって異なる値になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">docker ps</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">CONTAINER ID   IMAGE           COMMAND                  CREATED              STATUS          PORTS                  NAMES\n0b3733eee521   rhino-compute   &quot;compute.geometry.exe&quot;   About a minute ago   Up 55 seconds   0.0.0.0:8080-&gt;80/tcp   quirky_elgamal</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>以下のコマンドで停止できます。\n{NAMES} の箇所は ps コマンドで出てくる NAMES を入れてください。</p>\n<p>停止していると ps コマンドでは表示されなくなりますが、明示的に確認したい場合は、-a オプションで確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">docker stop {NAMES}\ndocker ps -a</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>-a オプションでの表示は以下です。\nSTATUS が Exit になっていてちゃんと終了していることがわかります。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">CONTAINER ID   IMAGE           COMMAND                  CREATED         STATUS                              PORTS     NAMES\n0b3733eee521   rhino-compute   &quot;compute.geometry.exe&quot;   4 minutes ago   Exited (3221225786) 3 minutes ago             quirky_elgamal</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>これで Docker を使って簡単に RhinoCompute ができるようになりました！</p>\n<h2>ちなみに</h2>\n<p>始めた後に気づきましたが、GitHub Actions では Windows Container を使えないっぽいので、別のサービスを使う必要があるみたいでした。\nAzure ならできるんでしょうか。</p>","excerpt":"はじめに Docker を使って RhinoCompute を実行してみます。 クラウドで、CI を使って RhinoCompute を実行できれば、例えば開発した Grasshopper コンポーネントを Rhino を使ってテストできるので良いのではと考えて試してみました。 Docker…","frontmatter":{"date":"13 March, 2021","path":"/articles/run-rhinocompute-on-docker","title":"RhinoCompute を Docker を使って実行する","article_tags":["RhinoCompute","Docker"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/run-rhinocompute-on-docker/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}