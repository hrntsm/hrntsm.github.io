{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/call-cpython-from-dotnet","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>C# に対して、Python は機械学習や数値計算などのライブラリが充実しているので、それを C# でも扱いたいですよね。\nそこで、C# から Python を呼べる Pythonnet の使い方について紹介します。</p>\n<p>なお、この技術は先日公開した最適化コンポーネント <a href=\"https://www.food4rhino.com/en/app/tunny\">Tunny</a> を実現するコア技術の 1 つとなっています。</p>\n<p>今回のコードの内容は以下に公開していますので、適宜参照してください。</p>\n<ul>\n<li><a href=\"https://github.com/hrntsm/GH-Pythonnet\">https://github.com/hrntsm/GH-Pythonnet</a></li>\n</ul>\n<h3>必要な環境</h3>\n<ol>\n<li>Windows</li>\n<li>Rhino 7.4 以上</li>\n<li>CPython 3.8 以上</li>\n<li>.NET 環境</li>\n<li>Visual Studio Code(任意の Python と C# を書きやすいテキストエディタ)</li>\n</ol>\n<h2>Pythonnet の使い方</h2>\n<h3>Pythonnet について</h3>\n<p>Pythonnet は GitHub で公開されています。</p>\n<ul>\n<li><a href=\"https://github.com/pythonnet/pythonnet\">https://github.com/pythonnet/pythonnet</a></li>\n</ul>\n<p>README には以下のように書かれています。</p>\n<blockquote>\n<p>Python.NET is a package that gives Python programmers nearly seamless integration with the .NET Common Language Runtime (CLR) and provides a powerful application scripting tool for .NET developers.\nIt allows Python code to interact with the CLR, and may also be used to embed Python into a .NET application.</p>\n</blockquote>\n<p>DeepL で翻訳すると以下です。</p>\n<blockquote>\n<p>Python.NET は、Python プログラマに.NET 共通言語ランタイム（CLR）とほぼシームレスに統合し、.NET 開発者向けに強力なアプリケーションスクリプティングツールを提供するパッケージです。\nPython のコードが CLR と対話することを可能にし、Python を.NET アプリケーションに組み込むために使用されることもあります。</p>\n</blockquote>\n<p>書かれているようにシームレスにつなげることを目的にしており、実際にそのことが実現されているライブラリになります。\nRhinoInside CPython、RhinoCode、Dynamo の Python スクリプト機能などにもこのライブラリが使われています。</p>\n<p>特徴として疑似的なものではなく、本物の Python を実行しています。\nそのためこのライブラリが機能するためには Pythonnet 単体では動かず、Python のランタイムそのものも必要となりますので注意してください。</p>\n<h3>Python の取得</h3>\n<p>自身の環境の Python を使うことができますが、ここでは作成したものを人に配布することを想定します。\n配布を容易にするものとして embeddable python があり本記事ではこちらを使います。</p>\n<p>導入方法などについては以下の記事が詳しいので、本記事では割愛します。\npip が実行可能な状態にしてください。</p>\n<ul>\n<li><a href=\"https://qiita.com/mm_sys/items/1fd3a50a930dac3db299\">超軽量、超高速な配布用 Python「embeddable python」</a></li>\n</ul>\n<h3>Numpy の実行</h3>\n<p>Pythonnet の README で例として Numpy の実行が書かれているのそれが実行できるか確認します。</p>\n<p>まずは embeddable Python に numpy をインストールします。\n間違えてパスが通っている Python にインストールしないようにちゃんと使いたい Python のパスを指定してインストールしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">Path<span class=\"token operator\">/</span>to<span class=\"token operator\">/</span>embeddable python<span class=\"token punctuation\">.</span>exe <span class=\"token operator\">-</span>m pip install numpy</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Python 環境の支度ができたら、C# のコンソールアプリを作成してください。</p>\n<p>dotnet cli を使う場合は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">dotnet new console</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>csproj が作成できたら、Pythonnet の nuget パッケージをインストールしてください。\nここではプレリリース版を使うのでバージョンには気を付けてください。\nこの記事では <code class=\"language-text\">3.0.0-preview2022-04-11</code> を使っています。</p>\n<p>初めに使いたい Python へパスを通します。pythonXXX.dll の XXX は Python のバージョンが入ります。\nPython3.10 なら Python310.dll になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Program</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> envPath <span class=\"token operator\">=</span> <span class=\"token string\">@\"Path\\to\\pythonXXX.dll\"</span><span class=\"token punctuation\">;</span>\n        Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PYTHONNET_PYDLL\"</span><span class=\"token punctuation\">,</span> envPath<span class=\"token punctuation\">,</span> EnvironmentVariableTarget<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ここの内容は実行プロセス中のみ環境変数 <code class=\"language-text\">PYTHONNET_PYDLL</code> にパスを設定しています。\n自分の環境だけで使うなら自身の環境変数を直接設定しても問題ありません。</p>\n<p>続いて Numpy を実行する部分を書いていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">PythonEngine<span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> np <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">Import</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"numpy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>pi <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> sin <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> c <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span><span class=\"token function\">cos</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">sin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> a <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> b <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span><span class=\"token function\">array</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token named-parameter punctuation\">dtype</span><span class=\"token punctuation\">:</span> np<span class=\"token punctuation\">.</span>int32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>dtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nPythonEngine<span class=\"token punctuation\">.</span><span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これが問題なく実行できると以下のようにコンソールに出力されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">1.0\n-0.9589242746631385\n-0.6752620891999122\nfloat64\nint32\n[ 6. 10. 12.]</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これが簡単な Pythonnet の実行の例です。\nとてもシームレスに C# から Python のライブラリを呼ぶことができたのではないでしょうか。<br>\nなお当然な感じもありますが、コードヒントは聞かないので注意してください。</p>\n<h3>任意 Python コードの実行例</h3>\n<p>上記では、比較的コードのような形で Python を実行しましたが、Python コンソールのようにも実行できます。</p>\n<p>例えば以下です。\nスコープを作成してその中で <code class=\"language-text\">a</code> という変数を作成しそれに 2 を足す計算を評価しておりコンソールには 3 と表示されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PyModule</span> ps <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Eval</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a + 2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>以下は 2 つの変数を定義して、それらを使った計算をしている例です。\n結果は 113 になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PyModule</span> ps <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa = bb + cc + 3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result2 <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"aa\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 113</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>関数を定義したり、スコープを入れ子にしたりできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PyModule</span> ps <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"def func1():\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"    return cc + bb\\n\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">PyModule</span> scope <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token function\">NewScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        scope<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>\n            <span class=\"token string\">\"def func2():\\n\"</span> <span class=\"token operator\">+</span>\n            <span class=\"token string\">\"    return func1() - cc - bb\\n\"</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> func2 <span class=\"token operator\">=</span> scope<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"func2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result31 <span class=\"token operator\">=</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result31<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 0</span>\n\n        scope<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result32 <span class=\"token operator\">=</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//-10</span>\n        scope<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result33 <span class=\"token operator\">=</span> <span class=\"token function\">func2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result33<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//10</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>クラスの定義もできます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">PyModule</span> ps <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> ps2 <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">;</span>\n    ps2<span class=\"token punctuation\">.</span>bb <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n    ps<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"class Class1():\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"    def __init__(self, value):\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"        self.value = value\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"    def call(self, arg):\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"        return self.value + bb + arg\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"    def update(self, arg):\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"        global bb\\n\"</span> <span class=\"token operator\">+</span>\n        <span class=\"token string\">\"        bb = self.value + arg\\n\"</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">dynamic</span></span> obj1 <span class=\"token operator\">=</span> ps2<span class=\"token punctuation\">.</span><span class=\"token function\">Class1</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result41 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">As</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result41<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//130</span>\n\n    obj1<span class=\"token punctuation\">.</span><span class=\"token function\">update</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result42 <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bb\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result42<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//30</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これを見るとわかるように、ちゃんとした Python のコードとしての文字列を入力すると Pythonnet によってその処理が実行されるということがわかります。\nこれを踏まえ Python コードのテキストを入力にした Grasshopper コンポーネントを作ってみましょう。</p>\n<h2>Python 実行コンポーネントの作成</h2>\n<p>これまでの内容から、簡単に作れるでしょう。\nGrasshopper コンポーネント作成の基礎的な部分は省略して必要な部分だけ紹介します。</p>\n<p>まず入力は Python のコード、つまりテキストにしたいので以下になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Python Code\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Python Code\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Python Code\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>出力は数値計算結果にしたいので Number とします。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Output\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Output\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Output\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>SolveInstance は上でやったことを考慮して以下になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> pythonCode <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> pythonCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> envPath <span class=\"token operator\">=</span> <span class=\"token string\">\"Path/to/PythonXXX.dll\"</span><span class=\"token punctuation\">;</span>\n    Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PYTHONNET_PYDLL\"</span><span class=\"token punctuation\">,</span> envPath<span class=\"token punctuation\">,</span> EnvironmentVariableTarget<span class=\"token punctuation\">.</span>Process<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    PythonEngine<span class=\"token punctuation\">.</span><span class=\"token function\">Initialize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span>Py<span class=\"token punctuation\">.</span><span class=\"token function\">GIL</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">PyModule</span> ps <span class=\"token operator\">=</span> Py<span class=\"token punctuation\">.</span><span class=\"token function\">CreateScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ps<span class=\"token punctuation\">.</span><span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>pythonCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        result <span class=\"token operator\">=</span> ps<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">Get</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"result\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    PythonEngine<span class=\"token punctuation\">.</span><span class=\"token function\">Shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ここでは <code class=\"language-text\">result</code> という変数名を double で出力するようにしているので、入力する Python のコードにも必ず <code class=\"language-text\">result</code> という変数を含む必要があります。</p>\n<p>こちらでビルドすれば以下のように入力したコードを実行するコンポーネントが作成できたのではないでしょうか。\n(動画がうまく表示されない場合はリロードしてください。)</p>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">最近 C# で CPython を実行する方法を調べてたけど副次的に任意の Python コード実行する Grasshopper コンポーネント作れて、また Grasshopper への理解が深まった。 <a href=\"https://t.co/qnwqlKO3a4\">pic.twitter.com/qnwqlKO3a4</a></p>&mdash; hiron (@hiron_rgkr) <a href=\"https://twitter.com/hiron_rgkr/status/1507538203846213634?ref_src=twsrc%5Etfw\">March 26, 2022</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>","excerpt":"はじめに C# に対して、Python は機械学習や数値計算などのライブラリが充実しているので、それを C# でも扱いたいですよね。\nそこで、C# から Python を呼べる Pythonnet の使い方について紹介します。 なお、この技術は先日公開した最適化コンポーネント Tunny を実現するコア技術の…","frontmatter":{"date":"16 April, 2022","path":"/articles/call-cpython-from-dotnet","title":"C# から CPython のライブラリをコンポーネントの作成","article_tags":["Grasshopper","Python","CSharp"]},"fields":{"readingTime":{"text":"4 min read"},"slug":"/call-cpython-from-dotnet/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}