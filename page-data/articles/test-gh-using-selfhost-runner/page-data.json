{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/test-gh-using-selfhost-runner","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>以下の記事で作成したコンポーネントと RhinoCompute を使ったユニットテストを、GitHub のセルフホストランナーを使った CI 化します。</p>\n<ul>\n<li><a href=\"./test-gh-component-using-rhinocompute\">RhinoCompute を使った Grasshopper コンポーネントのユニットテストの作成</a></li>\n</ul>\n<p>なぜセルフホストランナーを使用するかというと、Rhino のライセンスを解決するためです。\nGitHub Actions では GitHub の仮想環境で実行されるため、自身のライセンスを持った Rhino 環境を構築できないためです。</p>\n<p>セルフホストランナーではなく GitHub が提供するサーバーでコンポーネントのビルドやコードクオリティのチェックを CI 行う方法は、以下の記事で扱っているのでそちらを参照してください。</p>\n<ul>\n<li><a href=\"./grasshopper-ci\">GitHub Actions で Grasshopper コンポーネントをビルドする</a></li>\n</ul>\n<p>こちらの内容は以下の GitHub にデータがおいてあるので適宜参照してください。</p>\n<ul>\n<li><a href=\"https://github.com/hrntsm/GH-UnitTest-by-RhinoCompute\">hrntsm/GH-UnitTest-by-RhinoCompute</a></li>\n</ul>\n<h2>セルフホストランナーの環境構築</h2>\n<p>セルフホストランナーの公式のドキュメントは以下です。必要に応じて参照してください。</p>\n<ul>\n<li><a href=\"https://docs.github.com/ja/actions/hosting-your-own-runners/about-self-hosted-runners\">セルフホストランナーについて\n</a></li>\n</ul>\n<p>セルフホストランナーを使用したリポジトリで Settings の Actions の下段にある Add Runner を押してしてください。</p>\n<p><img src=\"https://hiron.dev/article-images/test-gh-using-selfhost-runner/add-runner.jpg\" alt=\"Add runner\"></p>\n<p>そうすると以下が表示されるのでリポジトリの URL やトークンを適宜取得して PowerShell などで実行してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\"># Create a folder under the drive root\n$ mkdir actions-runner; cd actions-runner# Download the latest runner package\n$ Invoke-WebRequest -Uri https://github.com/actions/runner/releases/download/v2.277.1/actions-runner-win-x64-2.277.1.zip -OutFile actions-runner-win-x64-2.277.1.zip# Extract the installer\n$ Add-Type -AssemblyName System.IO.Compression.FileSystem ; [System.IO.Compression.ZipFile]::ExtractToDirectory(&quot;$PWD/actions-runner-win-x64-2.277.1.zip&quot;, &quot;$PWD&quot;)\n\n# Create the runner and start the configuration experience\n$ ./config.cmd --url {YOUR_REPO_URL} --token {YOUR_TOKEN}</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>環境の構築に成功していれば以下のように表示されいくつかの設定を求められます。\n設定はデフォルトのままで問題ありません。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">--------------------------------------------------------------------------------\n|        ____ _ _   _   _       _          _        _   _                      |\n|       / ___(_) |_| | | |_   _| |__      / \\   ___| |_(_) ___  _ __  ___      |\n|      | |  _| | __| |_| | | | | &#39;_ \\    / _ \\ / __| __| |/ _ \\| &#39;_ \\/ __|     |\n|      | |_| | | |_|  _  | |_| | |_) |  / ___ \\ (__| |_| | (_) | | | \\__ \\     |\n|       \\____|_|\\__|_| |_|\\__,_|_.__/  /_/   \\_\\___|\\__|_|\\___/|_| |_|___/     |\n|                                                                              |\n|                       Self-hosted runner registration                        |\n|                                                                              |\n--------------------------------------------------------------------------------</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>なお今回は Rhino のライセンスの関係で Docker などの仮想環境を使用しないで Windows 環境の PowerShell を直接呼ぶようにしています。</p>\n<p><strong>基本的にはこれをパブリックのリポジトリではやらないでください。</strong></p>\n<p>誰でもプルリクを送れる状態であるということは、あなたの PC で任意のコードを実行できる状態になっているという意味です。\nハッキングどころの騒ぎじゃないです。\n注意してください。</p>\n<h2>GitHub Actions の yml 作成</h2>\n<p>GitHub Actions を設定する yml ファイルは以下のように設定します。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run Unit Test\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span> push\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">run-test</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># ここを self-hosted にすることで自分の PC が実行対象になる</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> self<span class=\"token punctuation\">-</span>hosted\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># git を checkout</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n      <span class=\"token comment\"># RhinoCompute を起動。完全に起動するまで待つため Start-Sleep で５秒待機</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup RhinoCompute\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          Start-Process -FilePath ../../../compute.geometry/compute.geometry.exe\n          Start-Sleep -Seconds 5</span>\n      <span class=\"token comment\"># テストの実行</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Run Unit Test\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> dotnet test</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>FilePath はご自身の RhinoCompute のファイルへのパスを指定してください。</p>\n<p>作成した actions-runner のフォルダの直下に compute.geometry のフォルダを置くとパスは上記のようになります。</p>\n<h2>実行</h2>\n<p>actions-runnner のフォルダで以下を実行すると自分の PC のセルフホストランナーと GitHub が接続します。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">./run.cmd\n\n√ Connected to GitHub\n\n2021-04-19 13:51:11Z: Listening for Jobs\n# ↑ GitHub 側から呼ばれるまで待機状態\n\n# GitHub で CI が呼ばれると以下のように表示され、job の結果が表示される\n2021-04-19 14:00:21Z: Running job: run-test\n2021-04-19 14:01:21Z: Job run-test completed with result: Succeeded</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>プッシュ時に CI が実行され GitHub 側は通常の GitHub Actions を実行した時と同じように表示されます。</p>\n<p><img src=\"https://hiron.dev/article-images/test-gh-using-selfhost-runner/ci-result.jpg\" alt=\"CI Result\"></p>\n<p>Run Unit Test の欄を確認するとユニットテストがちゃんと実行され、テストに合格していることがわかります。</p>\n<h2>おわりに</h2>\n<p>前記事で書いたローカル環境でのユニットテストと、今回の CI 化を合わせることで Grasshopper コンポーネントの開発をだいぶ効率化できるのではないでしょうか。</p>\n<p>効率化してよりクリエイティブなことに時間を使っていきましょう。</p>","excerpt":"はじめに 以下の記事で作成したコンポーネントと RhinoCompute を使ったユニットテストを、GitHub のセルフホストランナーを使った CI 化します。 RhinoCompute を使った Grasshopper コンポーネントのユニットテストの作成 なぜセルフホストランナーを使用するかというと、Rhino…","frontmatter":{"date":"24 April, 2021","path":"/articles/test-gh-using-selfhost-runner","title":"GitHub のセルフホストランナーを使って Grasshopper コンポーネントをテストする","article_tags":["Grasshopper","GitHub","CI"]},"fields":{"readingTime":{"text":"2 min read"},"slug":"/test-gh-using-selfhost-runner/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}