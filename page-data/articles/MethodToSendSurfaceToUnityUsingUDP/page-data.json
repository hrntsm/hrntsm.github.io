{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/MethodToSendSurfaceToUnityUsingUDP","result":{"data":{"markdownRemark":{"html":"<p>UDP で通信ができる gHowl というコンポーネントを使用して、ゲームエンジンの Unity と grasshopper を接続する方法について説明します。\n今回が初の Unity 関連の記事です。</p>\n<p>基本的な Unity の使い方はほかのサイトの方が詳しいので、そちらをググってください。今回やったことを解説していきます。</p>\n<h2>動作している様子</h2>\n<p>実際に接続してメッシュを送っている様子が以下です。</p>\n<p><a href=\"https://3.bp.blogspot.com/-JOQY2UbklfQ/XLv1YDUcymI/AAAAAAAABn8/KnFXduxbYJIIJB2PiRUt7_a1uUJY9VxwQCLcBGAs/s1600/test.gif\"><img src=\"https://3.bp.blogspot.com/-JOQY2UbklfQ/XLv1YDUcymI/AAAAAAAABn8/KnFXduxbYJIIJB2PiRUt7_a1uUJY9VxwQCLcBGAs/s640/test.gif\"></a></p>\n<h2>参考動画</h2>\n<p>今回の内容は基本的には以下の動画を参考に作成しています。\nこちらの動画は細かい解説をしていないため、実際はどうかわかりませんが様子を見る限りたぶん同じことをやっています。</p>\n<p><a href=\"https://www.youtube.com/watch?v=krWW12V9y8M\"><img src=\"https://img.youtube.com/vi/krWW12V9y8M/0.jpg\"></a></p>\n<p>基本的な流れは以下です。</p>\n<ol>\n<li>Rhino または grasshopper でサーフェスをモデル化</li>\n<li>作成したサーフェスを TriangularPanelsA コンポーネントで全て三角形に変換</li>\n<li>DeconstructBrep で作成したサーフェスを分解し、頂点情報を UDP で送信用に編集</li>\n<li>ghowl で Unity へ UDP で送信</li>\n<li>Unity 側で UDP 受信する C#スクリプトを作成して gh 側からのデータを受け取る</li>\n<li>受けった頂点情報から Unity 内で mesh を作成する</li>\n</ol>\n<h2>Rhino または grasshopper での操作</h2>\n<p>送りたいデータはなんでもよいですが、最終的には <a href=\"https://www.food4rhino.com/app/lunchbox\">Lunchbox</a> の TriangularPanelsA コンポーネントですべて三角形にするのでそれを念頭にモデル化してください。</p>\n<p>作成したサーフェスを DeconstructBrep で頂点情報を取得し Flatten して出力していますが、最終的には 1 行の頂点座標が羅列された文字列にしたいのでこうしています。\n出力はリスト形式になっているので、Join コンポーネントで一体化して 1 つの文字列にしています。</p>\n<p>1 つの文字列になった頂点情報を gHowl を使用して UDP で送信しています。\nポートは 3333 していますが、Unity の受信側で設定しているポートと一致していれば何でもよいです。</p>\n<p>gHowl の使い方は AMD lab さんが書いているのでそちらをどうぞ（<a href=\"https://amdlaboratory.com/amdblog/grasshopperghowl%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E2%91%A0/\">gHowl の使い方 ①</a>）</p>\n<p>実際にやってみた感じはこんな感じです。</p>\n<p><a href=\"https://2.bp.blogspot.com/-BXztLgMM4IY/XLv-X12LIjI/AAAAAAAABoc/b8aorXbARWM2px5dLCJiOQylAnaihNCCQCLcBGAs/s1600/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\"><img src=\"https://2.bp.blogspot.com/-BXztLgMM4IY/XLv-X12LIjI/AAAAAAAABoc/b8aorXbARWM2px5dLCJiOQylAnaihNCCQCLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\"></a></p>\n<h2>Unity 側での操作</h2>\n<p>Unity 側では、以下の 2 つのスクリプトを作成しています。</p>\n<ol>\n<li>UDP で受信して受信した 1 つの文字データを必要な状態に加工する UDPMesh.cs</li>\n<li>加工したデータから Unity 上にメッシュを作成する GHMesh.cs</li>\n</ol>\n<h3>UDPMesh.cs の中身について</h3>\n<p>基本的にはすべて UDP の受信の設定です。<a href=\"https://qiita.com/nenjiru/items/8fa8dfb27f55c0205651\">Qiita の Unity で UDP を受信してみる</a>  を参考に作っています。ここの LOCAL_PORT の値を gh 側のポートの番号と合わせてください。</p>\n<p>最後の部分の messege = text;  以下の部分で gh から受信したデータをこの後のために加工しています。\nやっていることは、データは例えば ｛0,0,0｝｛1,0,0｝... といった形で送られてくるので 、以下のようにカッコを削除して単なる数字の羅列にしてます。</p>\n<p>｛0,0,0｝｛1,0,0｝　 → 　 0,0,0,1,0,0</p>\n<p>この作業は gh 側でやっても問題ありません。</p>\n<p>以下コードの中身。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">UDPMesh</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> LOCAL_PORT <span class=\"token operator\">=</span> <span class=\"token number\">3333</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">UdpClient</span> _udp<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Thread</span> _thread<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> messege <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Enpty<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> textRep <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Enpty<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n        _udp <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">UdpClient</span><span class=\"token punctuation\">(</span>LOCAL_PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _thread <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">ThreadStart</span><span class=\"token punctuation\">(</span>ThreadMethod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _thread<span class=\"token punctuation\">.</span><span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Update <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnApplicationQuit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _thread<span class=\"token punctuation\">.</span><span class=\"token function\">Abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ThreadMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">IPEndPoint</span> remoteEP <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> data <span class=\"token operator\">=</span> _udp<span class=\"token punctuation\">.</span><span class=\"token function\">Receive</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">ref</span> remoteEP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> Encoding<span class=\"token punctuation\">.</span>ASCII<span class=\"token punctuation\">.</span><span class=\"token function\">GetString</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            messege <span class=\"token operator\">=</span> text<span class=\"token punctuation\">;</span>\n            textRep <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Remove</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            textRep <span class=\"token operator\">=</span> textRep<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            textRep <span class=\"token operator\">=</span> textRep<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            textRep <span class=\"token operator\">=</span> textRep<span class=\"token punctuation\">.</span><span class=\"token function\">Replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>GHMesh.cs の中身について</h3>\n<p>最初は引数とかいろいろ。</p>\n<p>void Start のところで Mesh を扱う準備をします。void Update のところから実際のメッシュの作成しています。</p>\n<p>まず加工した UDP で受信した文字列データをカンマごと区切ってに float 型にして FloatArray に入れています。</p>\n<p>Vector3 型を作成して FloatArray のデータを 3 つずつ入れていきます。｛0,0,0｝を 0,0,0 に加工しているだけなので、3 つずつ入れていけば自然と(x 座標, y 座標, z 座標)になるはずです。</p>\n<p>この後頂点の番号を振っていきます。\n頂点が同一座標でも、番号が異なる場合と同じ場合で unity 側での表示が異なります。\nですが、頂点の番号情報は gh から持ってきていないので、ここでは気にせず頂点の数だけ for 文で番号を作成しているだけです。</p>\n<p>最後に CreateMesh へ頂点座標と番号を渡して三角形のメッシュを作成して完成です。</p>\n<p>以下コードの中身。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>UI</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Net<span class=\"token punctuation\">.</span>Sockets</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Text</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Threading</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GHMesh</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 頂点配列</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _vertices<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// 三角形の順番配列</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> _triangles<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// メッシュ</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Mesh</span> _mesh<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// メッシュ表示コンポーネント</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">MeshRenderer</span> _meshRenderer<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// メッシュに設定するマテリアル</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Material</span> material<span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Start <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\t\tgameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_meshRenderer <span class=\"token operator\">=</span> gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t_mesh <span class=\"token operator\">=</span> <span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mesh<span class=\"token punctuation\">;</span>\n\t\t_meshRenderer<span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Update <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// GHの頂点座標の取得</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> arr <span class=\"token operator\">=</span>  UDPMesh<span class=\"token punctuation\">.</span>textRep<span class=\"token punctuation\">.</span><span class=\"token function\">Split</span><span class=\"token punctuation\">(</span><span class=\"token char\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> FloatArray <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">float</span></span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>Length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\t\t\tFloatArray<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">float</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Unityでの頂点座標の生成</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _vertices <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">/</span><span class=\"token number\">3.0</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\t\t\t_vertices<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span> <span class=\"token punctuation\">(</span>FloatArray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> FloatArray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  FloatArray<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token operator\">*</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Unityでの三角形メッシュの生成</span>\n\t\t<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> _triangles <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">int</span></span><span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>Length<span class=\"token operator\">/</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n\t\t\t_triangles<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">CreateMesh</span><span class=\"token punctuation\">(</span>_mesh<span class=\"token punctuation\">,</span> _vertices<span class=\"token punctuation\">,</span> _triangles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\t\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateMesh</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mesh</span> mesh<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> vertices<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> triangles<span class=\"token punctuation\">)</span> \n    <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// 最初にメッシュをクリアする</span>\n\t\tmesh<span class=\"token punctuation\">.</span><span class=\"token function\">Clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 頂点の設定</span>\n\t\tmesh<span class=\"token punctuation\">.</span>vertices <span class=\"token operator\">=</span> vertices<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// 三角形メッシュの設定</span>\n\t\tmesh<span class=\"token punctuation\">.</span>triangles <span class=\"token operator\">=</span> triangles<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Boundsの再計算</span>\n\t\tmesh<span class=\"token punctuation\">.</span>RecalculateBounds <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// NormalMapの再計算</span>\n\t\tmesh<span class=\"token punctuation\">.</span>RecalculateNormals <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>作った C#スクリプトを Unity 側で CreateEmpty とかで GameObject を作成して AddComponent して play したら gh 側からデータが送られてきます。</p>\n<p>かなり力技の方法でやっていてあまりスマートではないですが、とりあえずできたのでまとめました。\ngh 側で作っているものはサーフェスなのに、Unity 側はメッシュなので、そのせいでうまくいっていない個所があったりします。</p>\n<p>最新の技を使うなら、RhinoInside を使う方が、これより簡単だと思います。</p>\n<p>内容を見てわかりますが、このコードは三角形のみを対象にしているので四角形のサーフェスやメッシュが含まれるとうまくデータを Unity 側でメッシュを作成できませんので、気を付けてください。  </p>\n<p>作ったものは <a href=\"https://github.com/hrntsm/UnityGH\">GitHub</a> にもあげているのでそちらもどうぞ。</p>","excerpt":"UDP で通信ができる gHowl というコンポーネントを使用して、ゲームエンジンの Unity と grasshopper を接続する方法について説明します。\n今回が初の Unity 関連の記事です。 基本的な Unity…","frontmatter":{"date":"21 April, 2019","path":"/articles/MethodToSendSurfaceToUnityUsingUDP","title":"UDP を使って Unity に Grasshopper の Mesh を送る方法","article_tags":["Unity","Grasshopper","CSharp","構造とデジタル"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/kozo-to-digital/MethodToSendSurfaceToUnityUsingUDP/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}