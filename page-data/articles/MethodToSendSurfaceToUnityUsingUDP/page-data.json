{"componentChunkName":"component---src-templates-blog-post-js","path":"/articles/MethodToSendSurfaceToUnityUsingUDP","result":{"data":{"markdownRemark":{"html":"<p>　UDPで通信ができるgHowlというコンポーネントを使用して、ゲームエンジンのUnityとgrasshopperを接続する方法について説明します。今回が初のUnity関連の記事です。</p>\n<p>　基本的なUnityの使い方はほかのサイトの方が詳しいので、そちらをググってください。今回やったことを解説していきます。</p>\n<p>　実際に接続してメッシュを送っている様子が以下です。</p>\n<p><a href=\"https://3.bp.blogspot.com/-JOQY2UbklfQ/XLv1YDUcymI/AAAAAAAABn8/KnFXduxbYJIIJB2PiRUt7_a1uUJY9VxwQCLcBGAs/s1600/test.gif\"><img src=\"https://3.bp.blogspot.com/-JOQY2UbklfQ/XLv1YDUcymI/AAAAAAAABn8/KnFXduxbYJIIJB2PiRUt7_a1uUJY9VxwQCLcBGAs/s640/test.gif\"></a></p>\n<p>　今回の内容は基本的には以下の動画を参考に作成しています。こちらの動画は細かい解説をしていないため、実際はどうかわかりませんが様子を見る限りたぶん同じことをやっています。  </p>\n<p>基本的な流れは以下です。  </p>\n<p>1．Rhinoまたはgrasshopperでサーフェスをモデル化<br>\n2．作成したサーフェスをTriangularPanelsAコンポーネントで全て三角形のサーフェスに変換<br>\n3．DeconstructBrepで作成したサーフェスを分解し、頂点情報のVerticesをUDPで送信用に適当に編集する。<br>\n4．ghowlでUnityへUDPで送信<br>\n5．Unity側でUDP受信するC#スクリプトを作成してgh側からのデータを受け取る<br>\n6．受けった頂点情報からUnity内でmeshを作成する  </p>\n<p>Rhinoまたはgrasshopperでの操作について<br>\n送りたいデータはなんでもよいですが、最終的には<a href=\"https://www.food4rhino.com/app/lunchbox\">Lunchbox</a>のTriangularPanelsAコンポーネントですべて三角形のサーフェスにするのでそれを念頭にモデル化してください。<br>\n作成したサーフェスをDeconstructBrepで頂点情報を取得しFlattenして出力していますが、最終的には1行の頂点座標が羅列された文字列にしたいのでこうしています。出力はリスト形式になっているので、Joinコンポーネントで一体化して一つの文字列にしています。<br>\n一つの文字列になった頂点情報をgHowlを使用してUDPで送信しています。ポートは3333していますが、Unityの受信側で設定しているポートと一致していれば何でもよいです。  </p>\n<p>　gHowlの使い方はAMD labさんが書いているのでそちらをどうぞ（<a href=\"https://amdlaboratory.com/amdblog/grasshopperghowl%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9%E2%91%A0/\">gHowlの使い方①</a>）</p>\n<p>　実際にやってみた感じはこんな感じです。  </p>\n<p><a href=\"https://2.bp.blogspot.com/-BXztLgMM4IY/XLv-X12LIjI/AAAAAAAABoc/b8aorXbARWM2px5dLCJiOQylAnaihNCCQCLcBGAs/s1600/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\"><img src=\"https://2.bp.blogspot.com/-BXztLgMM4IY/XLv-X12LIjI/AAAAAAAABoc/b8aorXbARWM2px5dLCJiOQylAnaihNCCQCLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\"></a></p>\n<p>Unity側での操作  </p>\n<p>　Unity側ではUDPで受信して受信した1つの文字データを必要な状態に加工するUDPMesh.cs と 加工したデータからUnity上にメッシュを作成するGHMesh.cs の2つのC#スクリプトを作成しています。<br>\n初めに UDPMesh.cs の中身について。基本的にはすべてUDPの受信の設定です。<a href=\"https://qiita.com/nenjiru/items/8fa8dfb27f55c0205651\">Qiita のUnityでUDPを受信してみる</a> を参考に作っています。ここの LOCAL＿PORTの値をgh側のポートの番号と合わせてください。<br>\n最後の部分のmessege = text;  以下の部分でghから受信したデータをこの後のために加工しています。やっていることはデータは例えば ｛0,0,0｝｛1,0,0｝..... といった形で送られてくるので 、以下のようにカッコを削除して単なる数字の羅列にしてます。<br>\n｛0,0,0｝｛1,0,0｝　→　0,0,0,1,0,0<br>\nこの作業はgh側でやっても問題ありません。<br>\n以下コードの中身  </p>\n<p>　次にGHMesh.cs の中身について。最初は引数とかいろいろ。void StartのところでMeshを扱う準備。void Updateのところから実際のメッシュの作成を行っています。<br>\nまず加工したUDPで受信した文字列データをカンマごと区切ってにfloat型にしてFloatArrayに入れています。<br>\nVector3型を作成してFloatArrayのデータを3つずつ入れていきます。これ｛0,0,0｝を0これ 0,0,0 に加工しているだけなので、3つずつ入れていけば自然と(x座標, y座標, z座標)になるはずです。<br>\nこの後頂点の番号を振っていきます。頂点が同一座標でも、番号が異なる場合と同じ場合でunity側での表示が異なりますが、頂点の番号情報はghから持ってきていないので、ここでは気にせず頂点の数だけ for文で番号を作成しているだけです。<br>\n最後にCreateMeshに頂点座標と番号を渡して三角形のメッシュを作成して完成です。<br>\n以下コードの中身  </p>\n<p>　作ったC#スクリプトをUnity側でCreateEmptyとかでGameObjectを作成してAddComponentしてplayしたらgh側からデータが送られてきます。<br>\nかなり力技の方法でやっていてあまりスマートではないですが、とりあえずできたのでまとめました。gh側で作っているものはサーフェスなのに、Unity側はメッシュなので、そのせいでうまくいっていない個所があったりします。<br>\n内容を見てわかると思いますが、このコードは三角形のみを対象にしているので四角形のサーフェスやメッシュが含まれるとうまくデータをUnity側でメッシュを作成できませんので、気を付けてください。<br>\n作ったものは<a href=\"https://github.com/hrntsm/UnityGH\">github</a>にもあげているのでそちらもどうぞ</p>","excerpt":"UDPで通信ができるgHowlというコンポーネントを使用して、ゲームエンジンのUnityとgrasshopperを接続する方法について説明します。今回が初のUnity関連の記事です。 　基本的なUnity…","frontmatter":{"date":"21 April, 2019","path":"/articles/MethodToSendSurfaceToUnityUsingUDP","title":"UDPを使ってUnityにghのMeshを送る方法","tags":["Unity","grasshopper","C#"]},"fields":{"readingTime":{"text":"1 min read"},"slug":"/MethodToSendSurfaceToUnityUsingUDP/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}