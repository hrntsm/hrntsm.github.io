{"componentChunkName":"component---src-templates-diary-post-js","path":"/articles/SimpleBeam-Component-in-CS","result":{"data":{"markdownRemark":{"html":"<p>今回は grasshopper で動作する コンポーネントを C#を用いて作成する方法についての記事です。food4rhino などでダウンロードするデータに必ず含まれている\"アイツ\"を作成してみます。</p>\n<p><a href=\"https://3.bp.blogspot.com/-iO9Vpy7aDOA/WCCStK2SCKI/AAAAAAAABQ8/c9uSDa4w_s4XMEpTl0TXfQeleMr574A4gCLcB/s1600/%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E7%2594%25BB%25E5%2583%258F.PNG\"><img src=\"https://3.bp.blogspot.com/-iO9Vpy7aDOA/WCCStK2SCKI/AAAAAAAABQ8/c9uSDa4w_s4XMEpTl0TXfQeleMr574A4gCLcB/s1600/%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E7%2594%25BB%25E5%2583%258F.PNG\"></a></p>\n<p><a href=\"https://draft.blogger.com/null\"></a>　開発に使用する言語は、C#としています。<a href=\"http://rgkr-memo.blogspot.com/2015/10/arduinofft.html\">以前</a>は個人的に好きという理由で python で fft できるものを作成しましたが、今回は C#で、ghpython のように Grasshopper 上で作成するものではなく gha ファイルの作成をします。</p>\n<p>作成するものは、中央集中荷重の単純梁を計算するコンポーネントとします。<br>\nでは順番に説明して行きます。</p>\n<p>1、開発環境を整える。</p>\n<p>これはなんでもいいんですが、VisualStudio は制限があるものの個人開発者は無料で使用でき便利なため、VisualStudio （以下 VS）を使用します。ちなみに、開発のヘルプとなる<a href=\"http://developer.rhino3d.com/api/grasshopper/html/723c01da-9986-4db2-8f53-6f3a7494df75.htm\">grasshopperSDK</a>も例として利用しています。</p>\n<p>2、VisualStudio の設定をする。</p>\n<p>そもそものソフトの使い方は、ほかのサイトが詳しいと思いますので割愛します。Grasshopper を対象とした開発をするために、ライブラリの参照をする必要があります。参照元は、上記 GrasshopperSDK では以下の３つのライブラリと場所が書いてあります。<br>\n・GH_IO.dll<br>\n<Program Files>\\Rhinoceros 4.0\\Plug-ins\\Grasshopper\\<br>\n・Grasshopper.dll</p>\n<p><Program Files>\\Rhinoceros 4.0\\Plug-ins\\Grasshopper\\</p>\n<p>・RhinoCommon.dll</p>\n<p><Program Files>\\Rhinoceros 4.0\\Plug-ins\\Grasshopper\\rh_common</p>\n<p>ですが、たぶんここにはないと思います。私の PC が Windows10 だからなのか、Rhino が 5 だからなのかわかりませんが、ありませんでした。私の各ファイルがあった場所は以下です。</p>\n<p>・GH_IO.dll</p>\n<p><AppData>\\Roaming\\McNeel\\Rhinoceros\\5.0\\Plug-ins\\Grasshopper\\</p>\n<p>・Grasshopper.dll<br>\n<AppData>\\Roaming\\McNeel\\Rhinoceros\\5.0\\Plug-ins\\Grasshopper\\</p>\n<p>・RhinoCommon.dll</p>\n<p><Program Files>\\Rhinoceros 5 (64-bit)\\System\\</p>\n<p><a href=\"https://1.bp.blogspot.com/-PgEzJYqVxSc/WCMNLLvgkBI/AAAAAAAABRQ/scS4pQ0Fd0cQ2GwXYr7blTzj-QkhNm9WwCLcB/s1600/%25E5%258F%2582%25E7%2585%25A7%25E8%25BF%25BD%25E5%258A%25A0.PNG\"><img src=\"https://1.bp.blogspot.com/-PgEzJYqVxSc/WCMNLLvgkBI/AAAAAAAABRQ/scS4pQ0Fd0cQ2GwXYr7blTzj-QkhNm9WwCLcB/s320/%25E5%258F%2582%25E7%2585%25A7%25E8%25BF%25BD%25E5%258A%25A0.PNG\"></a></p>\n<p>ビルトを実行した際に VS ではデフォルトで dll ファイルを作成しますが、grasshopper で使用するためには拡張子を.dll ではなく、.gha にする必要があります。手で変えてもいいんですが、設定によって自動で変えれるので、その設定を行います。</p>\n<p>設定は、「ビルトイベント」の「ビルト後イベントのコマンドライン」に以下を追加することで行います。</p>\n<p><a href=\"https://1.bp.blogspot.com/-N80Y0bSJDvM/WCMQyG9AOjI/AAAAAAAABRc/JfpJJSObNtkZ9D8OtFFzvwbkAsWvP_L1QCLcB/s1600/%25E6%258B%25A1%25E5%25BC%25B5%25E5%25AD%2590%25E5%25A4%2589%25E6%258F%259B.PNG\"><img src=\"https://1.bp.blogspot.com/-N80Y0bSJDvM/WCMQyG9AOjI/AAAAAAAABRc/JfpJJSObNtkZ9D8OtFFzvwbkAsWvP_L1QCLcB/s1600/%25E6%258B%25A1%25E5%25BC%25B5%25E5%25AD%2590%25E5%25A4%2589%25E6%258F%259B.PNG\"></a></p>\n<p>これで VS の設定は終わりです。</p>\n<p>3、コンポーネントの中身を作成する。</p>\n<p>プログラムの中身の基本的な構造は、GrasshopperSDK にある<a href=\"http://developer.rhino3d.com/api/grasshopper/html/730f0792-7bfb-4310-a416-239e8c315645.htm\">My First Component</a>  をもとに作成しているので、説明を端折っている箇所はそちらを参照してください。また、一番最後に作成したコードの全部をつけてあるので、そちらも参照してください。</p>\n<p>以下では「My First Component」から主に書き換えた箇所の説明をします。クラスの名前等は適宜変えています。</p>\n<p>ではまずはコンポーネントに名前をつけるところから</p>\n<p>public SBComponent() : base(①,②,③,④,⑤）</p>\n<p>① が名前、② が略称、③ がコンポーネントの説明、④ がカテゴリ、⑤ がサブカテゴリです。</p>\n<p>① ～ ③ がコンポーネントそのものに表示されるもの、④、⑤ が Grasshopper 上部のタブバーに表示されるものです。</p>\n<p>次に、インプット項目の設定です。単純梁を計算するために必要な、</p>\n<p>・部材長さ</p>\n<p>・断面二次モーメント</p>\n<p>・断面係数</p>\n<p>・荷重</p>\n<p>・ヤング率</p>\n<p>を入力項目として設定ます。例として部材長さの入力が以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n   pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The length of the element (mm)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ここの個所では、RegisterInputParams → インプットするパラメーターの登録　をするということです。AddNumberParameter で 具体的なパラメーターを追加しています。\"Length\"は名前、\"L\"は略称、\"The length .... \" の個所は内容の説明です。こんな感じで表示されます。</p>\n<p><a href=\"https://2.bp.blogspot.com/-OllQbjArLAs/WCMf8aWB58I/AAAAAAAABRs/iZu3eTmAecMVIHmFQbjY3SUmbsWX889lwCLcB/s1600/%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588.PNG\"><img src=\"https://2.bp.blogspot.com/-OllQbjArLAs/WCMf8aWB58I/AAAAAAAABRs/iZu3eTmAecMVIHmFQbjY3SUmbsWX889lwCLcB/s320/%25E3%2582%25A4%25E3%2583%25B3%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588.PNG\"></a></p>\n<p>次に、アウトプット項目の設定です。小梁の設計ができるようにすることを想定して</p>\n<p>・最大曲げ</p>\n<p>・最大曲げ応力度</p>\n<p>・変位</p>\n<p>の３項目を設定します。例として曲げモーメントの出力設定が以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bending Moment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output max bending moment(kNm)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ここの個所では、RegisterOutputParams → アウトプットするパラメーターの登録　をするということです。AddNumberParameter で 具体的なパラメーターを追加しています。\"Bending Moment\"は名前、\"M\"は略称、\"output max .... \" の個所は内容の説明です。インプット項目と同じ感じです。こんな感じで表示されます。</p>\n<p><a href=\"https://2.bp.blogspot.com/-kICfjXHVaL4/WCMi3aDXv1I/AAAAAAAABR4/rHO7sWCDdMw3YT2lOFEFzotUsKbB1adXwCLcB/s1600/%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588.PNG\"><img src=\"https://2.bp.blogspot.com/-kICfjXHVaL4/WCMi3aDXv1I/AAAAAAAABR4/rHO7sWCDdMw3YT2lOFEFzotUsKbB1adXwCLcB/s320/%25E3%2582%25A2%25E3%2582%25A6%25E3%2583%2588%25E3%2583%2597%25E3%2583%2583%25E3%2583%2588.PNG\"></a></p>\n<p>次に計算用に、引数を定義します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">double</span></span> L <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>とりあえずここでは double 型にしています。GetData の個所の最初の 0 はインプットの最初の項目（0 番目） の値という意味です。</p>\n<p>次に実際の計算を行う箇所を作成しています。M=PL/4 などのごく普通の式などで、コードに書いてある通りです。</p>\n<p>最後に計算結果とコンポーネントの出力を関連付けます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>SetData の個所で、アウトプットの最初の項目(0 番目)に曲げモーメントの計算結果 M をセットするとしています。</p>\n<p>これで完成です。完成したものをビルトしエラーがなければプロジェクトの bin フォルダに ***.gha ファイルが作成されていると思います。それを Grasshopper の以下からいけるコンポーネントのフォルダにコピペし、rhino、Grasshopper を再起動すれば、作成したコンポーネントが表示されるようになるはずです。</p>\n<p><a href=\"https://3.bp.blogspot.com/-ZIQo9emiGPE/WCMpa1NElQI/AAAAAAAABSI/q9UOVyZjs-USOEj24x6JXy3ASD9K2WcXwCLcB/s1600/%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2580.PNG\"><img src=\"https://3.bp.blogspot.com/-ZIQo9emiGPE/WCMpa1NElQI/AAAAAAAABSI/q9UOVyZjs-USOEj24x6JXy3ASD9K2WcXwCLcB/s320/%25E3%2582%25B3%25E3%2583%25B3%25E3%2583%259D%25E3%2583%25BC%25E3%2583%258D%25E3%2583%25B3%25E3%2583%2588%25E3%2583%2595%25E3%2582%25A9%25E3%2583%25AB%25E3%2583%2580.PNG\"></a></p>\n<p>実際に使ってみるとこんな感じでした。パラメーターは、10m スパンの H-300x150 の中央に 10kN かけたモデルです。ちゃんとした答えが得られているようです。</p>\n<p><a href=\"https://3.bp.blogspot.com/-3VK546_gsts/WCMsFBjlUZI/AAAAAAAABSY/5HXSFriE07wRDwDxIV3WyMndAEzHZ_7IQCLcB/s1600/%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F.PNG\"><img src=\"https://3.bp.blogspot.com/-3VK546_gsts/WCMsFBjlUZI/AAAAAAAABSY/5HXSFriE07wRDwDxIV3WyMndAEzHZ_7IQCLcB/s400/%25E4%25BD%25BF%25E3%2581%25A3%25E3%2581%25A6%25E3%2581%25BF%25E3%2581%259F.PNG\"></a></p>\n<p>内容としては、Grasshopper でやる必要が全くない内容のコンポーネントではありますが、今後は rhino 上に結果を表示するとか、ラインを取り込めるようにするとか考えていきたいですね。</p>\n<p>以下がコードの全文です。内容と関係ないですが、github 使ってみたかったので、コードの表示に使ってみました。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Grasshopper<span class=\"token punctuation\">.</span>Kernel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">SBAnalysis</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SBComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GH_Component</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">SBComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SimpleBeamAnalysis\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"SB Analysis\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"calculate simple beam\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Extra\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Simple-beam\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"L\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"The length of the element (mm)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Moment of Inertia\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"I\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Moment of Inertia (mm^4)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Modulus of section\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Z\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Modulus of section (mm^3)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Load\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Centralized load (kN)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Young's modulus\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"E\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Young's modulus (N/mm^2)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bending Moment\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"M\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output max bending moment(kNm)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Bending Stress\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Sig\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output max bending stress (N/mm^2)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Deformation\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"D\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"output max deformation(mm)\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// input</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> L <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> I <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> Z <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> P <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> E <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// output</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> M <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> Sig <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> D <span class=\"token operator\">=</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span>NaN<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Use the DA object to retrieve the data inside the input parameters.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> L<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> I<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> Z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> E<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n　          <span class=\"token comment\">// analyze</span>\n            M <span class=\"token operator\">=</span> P <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>L<span class=\"token operator\">/</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n            Sig <span class=\"token operator\">=</span> M <span class=\"token operator\">*</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">/</span> Z<span class=\"token punctuation\">;</span>\n            D <span class=\"token operator\">=</span> P<span class=\"token operator\">*</span><span class=\"token number\">1000</span><span class=\"token operator\">*</span>L<span class=\"token operator\">*</span>L<span class=\"token operator\">*</span>L<span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token number\">48</span><span class=\"token operator\">*</span>E<span class=\"token operator\">*</span>I<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">//output</span>\n            DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> M<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> Sig<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> D<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Guid</span> ComponentGuid\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">get</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Guid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"419c3a3a-cc48-4717-8cef-5f5647a5ecfc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"今回は grasshopper で動作する コンポーネントを C#を用いて作成する方法についての記事です。food4rhino などでダウンロードするデータに必ず含まれている\"アイツ\"を作成してみます。  　開発に使用する言語は、C#としています。以前は個人的に好きという理由で python で fft…","frontmatter":{"date":"09 November, 2016","path":"/articles/SimpleBeam-Component-in-CS","title":"C# で 単純梁を計算するコンポーネントを作成","tags":null},"fields":{"readingTime":{"text":"3 min read"},"slug":"/SimpleBeam-Component-in-CS/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}