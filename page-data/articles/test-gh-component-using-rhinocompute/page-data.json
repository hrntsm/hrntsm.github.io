{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/test-gh-component-using-rhinocompute","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>通常開発した Grasshopper コンポーネントは Rhino の GUI を使用して動作確認、テストを行います。\nですがこれでは軽微な変更であっても挙動を変更した時、毎回デバッグを実行して Rhino、そして Grasshopper の起動を待って、さらに GH ファイルを読み込む手順を踏むことになります。\nこれは、作業効率を落とす原因になっていないでしょうか。</p>\n<p>Rhino7 の新機能 RhinoCompute を使うことで、MsTest などから Grasshopper コンポーネントのテストを実行することが可能になったのでその方法について紹介します。</p>\n<h2>環境構築</h2>\n<p>RhinoCompute を実行できる環境を構築してください。mcneel の GitHub などからダウンローでできます。\n一番簡単な方法は Hops をインストールすることです。</p>\n<p>以下の記事を参考に Hops をインストールしてください。</p>\n<ul>\n<li><a href=\"./Try-Hops-component\">Grasshopper の Hops の始め方</a></li>\n</ul>\n<p>インストールされた Hops は例えば ver0.4.7 ならば以下のフォルダにデータが入っています。</p>\n<blockquote>\n<p>%APPDATA%/McNeel/Rhinoceros/packages/7.0/Hops/0.4.7/compute.geometry</p>\n</blockquote>\n<p>上記フォルダ内の compute.geometry.exe を実行し、以下の最後にあるように running になれば RhinoCompute が動いています。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">[20:43:46 INF] Compute 1.0.0.0, Rhino 7.5.21100.3001\n[20:43:46 INF] Configuration Result:\n[Success] Name compute.geometry\n[Success] DisplayName rhino.compute\n[Success] Description rhino.compute\n[Success] ServiceName compute.geometry\n[20:43:46 INF] Topshelf v4.1.0.172, .NET Framework v4.0.30319.42000\n[20:43:46 INF] Launching RhinoCore library as hiron\n[20:43:48 INF] Starting listener(s): [&quot;http://localhost:8081&quot;]\n[20:43:50 INF] (1/2) Loading grasshopper\n[20:43:56 INF] (2/2) Loading compute plug-ins\n[20:43:57 INF] Listening on [&quot;http://localhost:8081&quot;]\n[20:43:57 INF] The compute.geometry service is now running, press Control+C to exit.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>コンポーネントの作成</h2>\n<h3>テンプレートの作成</h3>\n<p>ここで作成したコンポーネントを別記事で CI することを書いているので、ここでは VisualStudio を使わず、dotnet.exe を使ってコンポーネントとの作成のテンプレートを作成します。\nVisualStudio のテンプレートでの作成でも構いません。</p>\n<p>はじめに PowerSell で以下を実行すると dotnet に Grasshopper のテンプレートが入ります。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">dotnet new --install Rhino.Templates</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>問題なくインストールされると以下のようになり、Templates の中に Grasshopper Component が含まれます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">dotnet new\n\nTemplates                                     Short Name           Language    Tags\n--------------------------------------------  -------------------  ----------  ----------------------\nGrasshopper Component                         ghcomponent          [C#],VB     Rhino/Grasshopper\nGrasshopper Assembly                          grasshopper          [C#],VB     Rhino/Grasshopper\nRhinoCommon Command                           rhinocommand         [C#],VB     Rhino/RhinoCommon\nRhinoCommon Plug-In                           rhino                [C#],VB     Rhino/RhinoCommon\nZoo Plug-In for Rhinoceros                    zooplugin            [C#],VB     Rhino/Zoo</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>コンポーネントを作成したいフォルダに移動して、以下を実行してソリューションファイルとその中身を作成など初期の支度をします。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\"># sln ファイルと csproj の作成\nmkdir GHCITest\ncd GHCITest\ndotnet new sln\nmkdir GHCITest\ndotnet new ./GHCITest/grasshopper\ndotnet sln ./GHCITest.sln add ./GHCITest/GHCITest.csproj\ndotnet restore\n# git の初期化\ndotnet new gitignore\ngit init</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">dotnet new grasshopper --help</code> でヘルプを見ることができます。\n引数を指定することでコンポーネントの名前やカテゴリの初期値を指定できます。</p>\n<p>環境が構築できたので作成した sln ファイルを VisualStudio で開きます。</p>\n<h3>コンポーネントの作成</h3>\n<p>コンポーネントの作成はここの本題ではないので、以下のように A と B の和を出力する単純なコンポーネントを作成します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_Component<span class=\"token punctuation\">.</span>GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_Component<span class=\"token punctuation\">.</span>GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddNumberParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Result\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Result\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> A <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> B <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> A<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n    DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Result\"</span><span class=\"token punctuation\">,</span> A <span class=\"token operator\">+</span> B<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>テストの作成</h2>\n<h3>テンプレートの作成</h3>\n<p>CLI から作成します。\n作る際はルートディレクトリで以下を行ってください。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">mkdir GHCITestTests\ndotnet new mstest -o ./GHCITestTests\ndotnet sln ./GHCITest.sln add ./GHCITestTests/GHCITestTests.csproj\ncd ./GHCITestTests\ndotnet add package Newtonsoft.Json --version 13.0.1\ndotnet add package Rhino3dm --version 0.3.0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>もちろん以下のように VisualStudio の機能を使って作成しても問題ありません。</p>\n<p><img src=\"https://hiron.dev/article-images/test-gh-component-using-rhinocompute/createTest.jpg\" alt=\"Create Test\"></p>\n<h3>テスト用 GH ファイルの作成</h3>\n<p>以下のように 2 つの値を入れて結果を取得します。\nRhinoCompute を使用するので、入出力はそれ用に設定しています。</p>\n<p><img src=\"https://hiron.dev/article-images/test-gh-component-using-rhinocompute/ghDefinition.jpg\" alt=\"GH Definition\"></p>\n<p>作成したファイルは GHCITestTests のフォルダに入れ、VisualStudio から出力ディレクトリに常にコピーするように以下の設定をしてください。</p>\n<p><img src=\"https://hiron.dev/article-images/test-gh-component-using-rhinocompute/copyFile.jpg\" alt=\"Copy File\"></p>\n<p>または GHCITestTests.csproj に以下を追加してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-xml line-numbers\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ItemGroup</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>None</span> <span class=\"token attr-name\">Update</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SumComponentTest.gh<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>Always<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>CopyToOutputDirectory</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>None</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ItemGroup</span><span class=\"token punctuation\">></span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RhinoCompute で問題なく値を扱えるかは Hops を使うことで確認できます。</p>\n<p>この後のテストでうまくいかなかった場合は Hops で gh ファイルが問題ないか確認することをおすすめします。</p>\n<h3>テストコードの作成</h3>\n<p>はじめに RhinoCompute を使用するための SDK を取得します。ブラウザで以下を入力するとダウンロードされます。</p>\n<blockquote>\n<p><a href=\"https://localhost:8081/sdk/csharp\">https://localhost:8081/sdk/csharp</a></p>\n</blockquote>\n<p>ダウンロードされたファイルをテストの csproj ファイルと同じ場所へ置き参照できるようにします。</p>\n<p>実際にテストを実行するコードを書いていきます。\n内容は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Microsoft<span class=\"token punctuation\">.</span>VisualStudio<span class=\"token punctuation\">.</span>TestTools<span class=\"token punctuation\">.</span>UnitTesting</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Compute</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">GHCITest<span class=\"token punctuation\">.</span>Tests</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TestClass</span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GHCITestComponentTests</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">TestMethod</span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">GHCITestComponentTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// RhinoCompute のアドレス</span>\n            ComputeServer<span class=\"token punctuation\">.</span>WebAddress <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:8081/\"</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// GH ファイルパス指定</span>\n            <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> definitionName <span class=\"token operator\">=</span> <span class=\"token string\">\"SumComponentTest.gh\"</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> definitionPath <span class=\"token operator\">=</span> Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">GetExecutingAssembly</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Location<span class=\"token punctuation\">;</span>\n            definitionPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">GetDirectoryName</span><span class=\"token punctuation\">(</span>definitionPath<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            definitionPath <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>definitionPath<span class=\"token punctuation\">,</span> definitionName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> trees <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>GrasshopperDataTree<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// A に 10 の値を入れる</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> value1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GrasshopperObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> param1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GrasshopperDataTree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            param1<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>GrasshopperObject<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> value1 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            trees<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// B に 35 の値を入れる</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> value2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GrasshopperObject</span><span class=\"token punctuation\">(</span><span class=\"token number\">35</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> param2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GrasshopperDataTree</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            param2<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>GrasshopperObject<span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span> value2 <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            trees<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>param2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\n            <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>GrasshopperDataTree<span class=\"token punctuation\">></span></span> result <span class=\"token operator\">=</span> GrasshopperCompute<span class=\"token punctuation\">.</span><span class=\"token function\">EvaluateDefinition</span><span class=\"token punctuation\">(</span>definitionPath<span class=\"token punctuation\">,</span> trees<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>InnerTree<span class=\"token punctuation\">.</span><span class=\"token function\">First</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>Value<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>Data<span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// 結果の確認</span>\n            Assert<span class=\"token punctuation\">.</span><span class=\"token function\">AreEqual</span><span class=\"token punctuation\">(</span><span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">.</span><span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>RhinoCompute が実行されている状態でテストを実行すると RhinoCompute で作成した Grasshopper ファイルの計算結果が帰って来ます。\nその値を使って Assert.AreEqual を行って結果を評価します。</p>\n<p>CLI からテストを実行する場合は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"ps\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ps line-numbers\"><code class=\"language-ps\">dotnet test</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>問題なく RhinoCompute と通信していれば rhino.compute に以下のように表示されます。\nステータスコードが 200 なので通信の成功を確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">::1 - [2021-04-19T00:15:20.1053330+09:00] &quot;POST /grasshopper HTTP/1.1&quot; 200 -</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h2>次のステップ</h2>\n<p>Grasshopper の GUI を使うことなく開発したコンポーネントのテストできることが確認できました。\nこれを CI 化することでテストの自動化を行います。</p>\n<p>CI の記事は以下になります。</p>\n<ul>\n<li><a href=\"\">aaa</a></li>\n</ul>","excerpt":"はじめに 通常開発した Grasshopper コンポーネントは Rhino の GUI を使用して動作確認、テストを行います。\nですがこれでは軽微な変更であっても挙動を変更した時、毎回デバッグを実行して Rhino、そして Grasshopper の起動を待って、さらに GH…","frontmatter":{"date":"24 April, 2021","path":"/articles/test-gh-component-using-rhinocompute","title":"RhinoCompute を使ったGrasshopperコンポーネントのユニットテストの作成","article_tags":["Grasshopper","RhinoCompute"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/Test-GH-components-directory-in-Grasshopper-itself-using-RhinoCompute/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}