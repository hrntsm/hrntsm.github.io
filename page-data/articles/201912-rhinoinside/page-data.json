{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/201912-rhinoinside","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>この記事は「xRArchi の皆がやったこと、やってること Advent Calendar 2019」の 16 日目です。</p>\n<ul>\n<li><a href=\"https://adventar.org/calendars/4686\">xRArchi の皆がやったこと、やってること Advent Calendar 2019</a></li>\n</ul>\n<p>今年は Rhino.Inside にはまっていたので、サンプルで何ができるのかまとめます。Rhino.Inside は WIP で今まさに開発が進んでいるので、ここでの内容は 2019/12 現在の情報です。</p>\n<p>ここでは実際に動かしている様子を動画にして紹介します。基本的には公式の github のサンプルをダウンロードしたそのままか、少しいじった程度のものです。自分の環境で動作させる際につまづいた点や実際に使ってみた感想を書いてます。</p>\n<p>やり方としては、データをダウンロードして、VS2017 を使ってビルドして各ソフトで使っています。</p>\n<h2>そもそも Rhino.Inside って？</h2>\n<p><a href=\"https://www.rhino3d.com/inside\">公式の説明</a>や<a href=\"https://amdlaboratory.com/amdblog/rhino-inside%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6revit%E3%81%A8%E9%80%A3%E6%90%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/\">AMD lab さんの記事</a>がわかりやすいのでこちらをどうぞ。以下は公式の説明からの引用</p>\n<blockquote>\n<p>Rhino.Inside は、Rhino や Grasshopper を Revit および AutoCAD のような他の 64 ビットの Windows のアプリケーションの中で実行できるようにすることを可能にするオープンソースの Rhino WIP プロジェクトです。</p>\n</blockquote>\n<p>上記にあるように 64 ビットの windows のアプリ向けかつ.NET ベースで作られているところに制約があります。</p>\n<p>もし Mac やほかの環境で使いたい場合はサーバー側で処理をし REST 形式で返してくれる<a href=\"https://www.rhino3d.com/compute\">Rhino Compute Service</a>もあるので、興味がある方はそちらもどうぞ。</p>\n<h3>これは公式ドキュメント見たほうが早いんじゃ…？</h3>\n<p>正しいです。そんな人は<a href=\"https://github.com/mcneel/rhino.inside\">公式の github</a>で各ソフトのフォルダにある README とかミテネ</p>\n<h2>各 Rhino.Inside の話</h2>\n<h3>Rhino.Inside Illastrator</h3>\n<p><a href=\"https://github.com/mcneel/rhino.inside/tree/master/Adobe/Illustrator\">これの github のページ</a>には README がないため、最初これは何していいかわからないので、環境整えるまでハードル高い気がします。</p>\n<p>Illustrator の SDK は C++なので、Rhino.Inside 側の操作は C#で、Illustrator 側の操作は C++でやっているようです。\nつまづいた点として Rhino.Inside.Illustrator.Plugin のターゲットが最初 WindowsSDK ver8 とかになっているので、自分の環境に合わせてリターゲットする必要がありました。\n（私の試した環境は WindowsSDK ver10.0.17763.0）</p>\n<p>もう一点がビルド時に Tutrial.rc で、</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">fatal error RC1015: cannot open include file &#39;afxres.h&#39;</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>というエラーが出たので、以下のように書き換えましたが C++よくわからないので、これが最適な対応かはよくわからないです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token comment\">//#include \"afxres.h\"</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;windows.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> IDC_STATIC -1</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>動作は以下のような感じです。\nオブジェクトのフィルターに Rhino があるのでそれから Rhino.Inside を起動します。\nそうするとカーブを選択してくださいと出るので、カーブを選ぶとそれが Illustrator に表示されます。\nですが、なんだかうまく送れていないようで、線が閉じていないですしぶれているようにも見えます。</p>\n<p>その問題をうまく整えれば、Rhino で作ったモデルを Make2D とかで線にして図面にする前に Illustrator でいい感じの資料作りとかに使えそうな気がします。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_Illustrator.gif\" alt=\"RiAi.gif\"></p>\n<h3>Rhino.Inside AutoCAD</h3>\n<p>AutoCAD のサンプルは AutoCAD 用のコマンド作ってそこから Rhino を呼ぶものでした。以降もよく出てきますが、sphere を作成してそのメッシュを相手のソフト側に出力するということをやっています。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_AutoCAD.gif\" alt=\"RiAutoCAD.gif\"></p>\n<h3>Rhino.Inside Revit</h3>\n<p>Rhino.Inside Revit は最近取り上げた記事もそこそこ出ている気がするので、そちらを紹介して終わりにします。\n私も過去にさわっている動画を Youtube チャンネルにあげているので参考にどうぞ（ただし半年くらい前なのでバージョン古め）。</p>\n<ul>\n<li><a href=\"https://amdlaboratory.com/amdblog/rhino-inside%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6revit%E3%81%A8%E9%80%A3%E6%90%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B/\">AMD lab さんの記事</a></li>\n<li>\n<p>私の Youtube チャンネルの動画（画像で Youtube チャンネルに飛びます）</p>\n<ul>\n<li>こちらは AMD さんの記事と同じくサンプルを触っている 2 時間くらいの動画ですので、実際のさわってる感じを知りたければ飛ばし飛ばしどうぞ</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://www.youtube.com/watch?v=RrctY-pwwos\"><img src=\"http://img.youtube.com/vi/RrctY-pwwos/hqdefault.jpg\" alt=\"Rhino.Inside Revit 完全に理解した\"></a></p>\n<h3>Rhino.Inside BricsCAD</h3>\n<p>Rhino.Inside さわるまで私はこのソフトのこと知らなかったんですが、AutoCAD 互換 CAD ソフトです。少しさわった感じ CAD データの保存も dwg でできて UI も AutoCAD に非常に近いものでした。また BricsCAD の Rhino.Inside については BricsCAD を作っている Bricsys が開発していて驚きました。</p>\n<p>使用する際は、BricsCAD Application Store で<a href=\"https://www.bricsys.com/applications/a/?rhino/grasshopper-connection-for-bricscad-bim-a1353-al2360\">「Rhino/Grasshopper Connection for BricsCAD BIM」</a>としてダウンロードしてそのまま使えるので、これについては VS で自分でビルドして環境整備していません。\n自分で構築するときは mcneel ではなく<a href=\"https://github.com/Bricsys/rhino.inside-bricscad\">Bricsys の github</a>に置いてあるので、自分で中身を確認しながらでもやることができます。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_BricsCAD.gif\" alt=\"RiBricks.gif\"></p>\n<h3>Rhino.Inside ConsoleApps</h3>\n<p>コンソールから Rhino.Inside を動かす例が示されています。\nソフト連携ではなくまず Rhino.Inside のみを動かすことを確認したいときはこれを参照するといいと思います。\nサンプルデータではスフィアを作成して、作ったメッシュの頂点数を出力する <a href=\"https://github.com/mcneel/rhino.inside/tree/master/ConsoleApps/HelloWorld\">ConsoleApps/HelloWorld</a> の C#版とそれ VB 版、Grasshopper を呼んで特定の名前が付けられたコンポーネントに入力されているラインの始点終点の座標を出力する <a href=\"https://github.com/mcneel/rhino.inside/tree/master/ConsoleApps/RunGrasshopper\">ConsoleApps/RunGrasshopper</a> があります。ここでは、RunGrasshopper の例を出します。</p>\n<p>exe ファイルを起動するとコンソール画面が現れて右の Grasshopper の CollectMe に入力されているラインの情報を出力しています。わかりやすくするために Grasshopper の画面を右半分に出していますが、gh ファイルを読みに行っているので、Rhino を起動している必要はありませんでした。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_ConsoleApps.gif\" alt=\"RiConsole.gif\"></p>\n<h3>Rhino.Inside DotNet</h3>\n<p>サンプルでは WindowsForm で Rhino のモデルを表示するものです。これは WindowsForm で作っていますが、Eto のサンプルも挙げられていました。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_DotNet.gif\" alt=\"RIDotnet.gif\"></p>\n<h2>Rhino.Inside JavaScript</h2>\n<p>サンプルは Node.js から Rhino 使う例が出ていました。</p>\n<p>1 つ目はコンソールから Rhino を起動させて sphere を作成してその頂点数を出力するものです。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_JavaScript.gif\" alt=\"RIjs1.gif\"></p>\n<p>2 つ目は Electron.js や Three.js を使用して Grasshopper で作成したモデルをウインドウに表示するものでした。\nですが JavaScript わからんマンなので、Grasshopper を起動するとこまでは行きましたが、モデルの表示はうまくいきませんでした… 実際どんな感じかは<a href=\"https://github.com/hrntsm/rhino.inside/tree/master/JavaScript/Sample-4\">ココ</a>を見てください。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_JavaScript2.gif\" alt=\"RIjs2.gif\"></p>\n<h3>Rhino.Inside UE</h3>\n<p>最新の UE は 4.24(2019/12 現在)ですが、Rhino.Inside を動かすために必要な USharp は 4.23 でないと動かないようなので注意してください。\nRhino.Inside は.NET API を持つソフトでないと動かないのですが、UE は C++ API なのでラッパーとしてこの USharp を使用しています。</p>\n<p>UE については、Rhino.Inside のワークショップで取り扱ったようで、UE のみでなく Rhino.Inside の導入から UE での使用法まで細かく書かれた<a href=\"https://github.com/mcneel/Rhino.Inside-Workshop/wiki/Sample-3\">ワークショップの資料</a>があるので、こちらを参照すると Rhino.Inside がどんなものかよくわかるかもしれません。</p>\n<p>操作感としては以下の動画の感じでわかるようにサクサクではありません。\nGrasshopper 連携は下の Unity 項目でもやっていますが、Unity はサクサク動いているので、Rhino.Inside の問題ではないような気がします。\n私は UE をこの記事のために初めて触ったので、原因が一回ラッパーをかましているからなのか、ブループリントを使っているからなのか、それともやっぱり Rhino.Inside の実装の問題なのかよくわかりませんでした。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_UE.gif\" alt=\"RiUE.gif\"></p>\n<h3>Rhino.Inside Excel</h3>\n<p>公式のサンプルに対して、Excel に書き込みして 3dm モデルを出力する部分を追加しています。</p>\n<p>サンプルをいじっているだけなので、Rhino 側から Excel への入力のみですが、Excel 側からも Rhino に出力できるはずなので、Excel の特性を活かしてデータの管理なんかに使うといいかもしれません。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_Excel.gif\" alt=\"RIExcel.gif\"></p>\n<h3>Rhino.Inside Unity</h3>\n<p>こちらは公式のものをもとにして、ちょっと時間をかけて VR アプリを作ったりしていました。実際にどう作ったについては別に記事を書いているので、そちらを見てください。</p>\n<ul>\n<li><a href=\"./unity-rhinoinside-vr-app\">Unity で RhinoInside を使って VR アプリを作ってみる</a></li>\n</ul>\n<p><img src=\"https://hiron.dev/image/qiita/RI_Unity.gif\" alt=\"RIUnity.gif\"></p>\n<p>Grasshopper と連携するサンプルもあるので試すと楽しいです。\nこれは Unity からメインカメラの座標を Grasshopper に送って、そのポイントに対して周囲の球を動かしてそれを Unity に送っているものの例です。</p>\n<p><img src=\"https://hiron.dev/image/qiita/RI_Unity2.gif\" alt=\"RIUnityGrasshopper.gif\"></p>\n<h2>まとめ</h2>\n<p>いろいろなソフトに対して公式でサンプルが作られているので、さわってみると楽しいです。新たなソフトにさわってみるきっかけにもなるのでおすすめです。</p>","excerpt":"はじめに この記事は「xRArchi の皆がやったこと、やってること Advent Calendar 2019」の 16 日目です。 xRArchi の皆がやったこと、やってること Advent Calendar 2019 今年は Rhino.Inside…","frontmatter":{"date":"18 December, 2019","path":"/articles/201912-rhinoinside","title":"2019/12 今の RhinoInside 完全に理解した話","article_tags":["RhinoInside","Qiita"]},"fields":{"readingTime":{"text":"2 min read"},"slug":"/qiita/201912-rhinoinside/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}