{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/Grasshopper-as-a-code-with-Python","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>RhinoInside や Rhino3dm、RhinoCompute など コードから Rhino のデータ、機能を扱う機能は現在色々と提供されています。\n言語としては C#、Python、Javascript の3つが公式でライブラリが提供されており、いろんな環境で使いやすいように整備されています。</p>\n<p>とはいえ、現実問題、普段コードを書いていない人がこういった機能をうまく使うことは難しいです。</p>\n<p>その中で、RhinoCompute は Grasshopper から使用するコンポーネントである Hops が公式から提供されており、コードを使うことなく使用することができる機能になっています。</p>\n<p>Hops v0.8 のアップデートで Hops で読み込んだ Grasshopper をデータを動かす Python コードを自動生成して出力する機能が追加されました。\nこれを使うことで Python にあまり慣れていない人でも Grasshopper を コードにように扱うことで、Python で簡単に Rhino のデータを扱うことができるようになりました。</p>\n<p>本記事ではそのやり方について紹介します。</p>\n<h2>Hops から Python のコードを出力する</h2>\n<p>Hops の環境構築や使い方については以下の記事を参照してください。</p>\n<p><a href=\"./try-hops-component\">Grasshopper の Hops のはじめ方</a></p>\n<p>PackageManager で Hops をインストールする際には 0.8 以降のバージョンを指定するようにしてください。</p>\n<p>ここでは例として以下のように足し算をするコンポーネントを作成します。</p>\n<p><img src=\"https://hiron.dev/article-images/grasshopper-as-a-code-with-python/SumComponent.png\" alt=\"Sum Component\"></p>\n<p>Hops で読み込んで上の画像で上げた足し算をする機能を持った Hops コンポーネントが作成します。\n値をインプットしたらコンポーネントを右クリックします。\nクリックすると以下のようコンテキストメニューが出てくるのでに Export から Export python sample... を選びます。</p>\n<p><img src=\"https://hiron.dev/article-images/grasshopper-as-a-code-with-python/ExportPythonCode.png\" alt=\"Export python code\"></p>\n<p>例えば sum.py と名前をつけてデスクトップに出力先を選択すると今回であれば以下のようなコードが生成されます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># pip install compute_rhino3d and rhino3dm</span>\n<span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Util\n<span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Grasshopper <span class=\"token keyword\">as</span> gh\n<span class=\"token keyword\">import</span> rhino3dm\n<span class=\"token keyword\">import</span> json\n\ncompute_rhino3d<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:6500/'</span>\n\n<span class=\"token comment\"># create DataTree for each input</span>\ninput_trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"10.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ninput_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\ntree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"5.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ninput_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\noutput <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>EvaluateDefinition<span class=\"token punctuation\">(</span><span class=\"token string\">'Path/to/Desktop/sum.gh'</span><span class=\"token punctuation\">,</span> input_trees<span class=\"token punctuation\">)</span>\nerrors <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'errors'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERRORS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> error <span class=\"token keyword\">in</span> errors<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\nwarnings <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'warnings'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> warnings<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WARNINGS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> warning <span class=\"token keyword\">in</span> warnings<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>warning<span class=\"token punctuation\">)</span>\n\nvalues <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'values'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">'ParamName'</span><span class=\"token punctuation\">]</span>\n    inner_tree <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">'InnerTree'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> inner_tree<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        values_at_path <span class=\"token operator\">=</span> inner_tree<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> value_at_path <span class=\"token keyword\">in</span> values_at_path<span class=\"token punctuation\">:</span>\n            data <span class=\"token operator\">=</span> value_at_path<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'archive3dm'</span> <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n                obj <span class=\"token operator\">=</span> rhino3dm<span class=\"token punctuation\">.</span>CommonObject<span class=\"token punctuation\">.</span>Decode<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Python で Grasshopper を動かしてみる</h2>\n<p>では出力されたコードを確認していきましょう。</p>\n<h3>環境の構築</h3>\n<p>生成されたコードを見ると最初の行に以下のように書かれています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># pip install compute_rhino3d and rhino3dm</span>\n<span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Util\n<span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Grasshopper <span class=\"token keyword\">as</span> gh\n<span class=\"token keyword\">import</span> rhino3dm\n<span class=\"token keyword\">import</span> json</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>pip を使って必要なライブラリをインストールします。\nこれによって import している各ライブラリが使えるようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">pip install compute_rhino3d rhino3dm</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>RhinoCompute のサーバーの指定</h3>\n<p>以下の箇所では、RhinoCompute のサーバーを指定しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">compute_rhino3d<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:6500/'</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>Hops がインストールされている環境では、Grasshopper を起動すると裏で自動で RhinoCompute のサーバーが上記 URL で起動するので、基本的には特に操作する必要はありません。</p>\n<h3>入力の値を指定</h3>\n<p>以下の箇所では入力の値を指定しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># create DataTree for each input</span>\ninput_trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\ntree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"10.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ninput_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\ntree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span>\ntree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"5.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\ninput_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">tree = gh.DataTree(\"A\")</code> の箇所では Hops の A の入力の箇所の値を指定しています。\nExport する時の画像を確認していただくと A には 10 の値が入力されていることが分かると思います。\nですので別の計算を行いたかったら、<code class=\"language-text\">tree.Append([0], [\"10.0\"])</code> の箇所の 10.0 の箇所を変えれば別の結果を得ることができます。</p>\n<p><code class=\"language-text\">tree = gh.DataTree(\"B\")</code> の箇所も A と同様の内容です。</p>\n<h3>計算の実行</h3>\n<p>以下の箇所で grasshopper で計算を実行しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">output <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>EvaluateDefinition<span class=\"token punctuation\">(</span><span class=\"token string\">'Path/to/Desktop/sum.gh'</span><span class=\"token punctuation\">,</span> input_trees<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>メソッドの名称からもわかるように grasshopper の ファイル（definition）を評価（Evaluate）しています。</p>\n<p>output には計算の実行結果が入っています。</p>\n<h3>結果の処理</h3>\n<p>以下の箇所で結果の出力のための処理をしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token comment\"># error を取得</span>\nerrors <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'errors'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> errors<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ERRORS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> error <span class=\"token keyword\">in</span> errors<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># warning を取得</span>\nwarnings <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'warnings'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">if</span> warnings<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'WARNINGS'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> warning <span class=\"token keyword\">in</span> warnings<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>warning<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 結果の値を取得</span>\nvalues <span class=\"token operator\">=</span> output<span class=\"token punctuation\">[</span><span class=\"token string\">'values'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">:</span>\n    name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">'ParamName'</span><span class=\"token punctuation\">]</span>\n    inner_tree <span class=\"token operator\">=</span> value<span class=\"token punctuation\">[</span><span class=\"token string\">'InnerTree'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 出力の名前を出力（例えば RH_OUT:result）</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> path <span class=\"token keyword\">in</span> inner_tree<span class=\"token punctuation\">:</span>\n        <span class=\"token comment\"># 結果のデータツリーでのパスを出力</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span>\n        values_at_path <span class=\"token operator\">=</span> inner_tree<span class=\"token punctuation\">[</span>path<span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">for</span> value_at_path <span class=\"token keyword\">in</span> values_at_path<span class=\"token punctuation\">:</span>\n            data <span class=\"token operator\">=</span> value_at_path<span class=\"token punctuation\">[</span><span class=\"token string\">'data'</span><span class=\"token punctuation\">]</span>\n            <span class=\"token comment\"># 結果を出力</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">and</span> <span class=\"token string\">'archive3dm'</span> <span class=\"token keyword\">in</span> data<span class=\"token punctuation\">:</span>\n                obj <span class=\"token operator\">=</span> rhino3dm<span class=\"token punctuation\">.</span>CommonObject<span class=\"token punctuation\">.</span>Decode<span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>計算を実行する</h3>\n<p>pip を使って必要なライブラリをインストールできていれば、以下を実行するればこれらのコードが流れます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\">python <span class=\"token punctuation\">.</span><span class=\"token operator\">/</span><span class=\"token builtin\">sum</span><span class=\"token punctuation\">.</span>py</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>問題なく処理が実行されると以下のように結果が返ってきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">RH_OUT:result\n{0}\n15.0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span></span></pre></div>\n<p>今回は出力を RH_OUT:result しか作っていないので結果は一つですが、それぞれの結果の名前、データツリーでのパス、結果を出力することができます。</p>\n<h3>複数の結果を取得してみる</h3>\n<p>これでは Grasshopper でそのまま流すことと変わらないので、for文を使って複数の処理を流してみます。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Util\n<span class=\"token keyword\">import</span> compute_rhino3d<span class=\"token punctuation\">.</span>Grasshopper <span class=\"token keyword\">as</span> gh\n<span class=\"token keyword\">import</span> rhino3dm\n<span class=\"token keyword\">import</span> json\n\ncompute_rhino3d<span class=\"token punctuation\">.</span>Util<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:6500/'</span>\n\n<span class=\"token comment\"># for 文を追加</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    input_trees <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    tree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># もともと 10.0 を入力していたが、</span>\n    <span class=\"token comment\"># i を入力することで、for文中で値を変える</span>\n    tree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    input_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\n    tree <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>DataTree<span class=\"token punctuation\">(</span><span class=\"token string\">\"B\"</span><span class=\"token punctuation\">)</span>\n    tree<span class=\"token punctuation\">.</span>Append<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"5.0\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    input_trees<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span>\n\n    output <span class=\"token operator\">=</span> gh<span class=\"token punctuation\">.</span>EvaluateDefinition<span class=\"token punctuation\">(</span><span class=\"token string\">'./sum.gh'</span><span class=\"token punctuation\">,</span> input_trees<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\"># 以降変化なし</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>こちらを実行すると i が 1 から 4 に変化し 4 回計算が流れるので、以下のような結果が返ってきます。\nこれで少しコードで処理する利点が出たのではないでしょうか。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">RH_OUT:result\n{0}\n6.0\nRH_OUT:result\n{0}\n7.0\nRH_OUT:result\n{0}\n8.0\nRH_OUT:result\n{0}\n9.0</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>まとめ</h2>\n<p>今回は単純な足し算だったので、Python でコードを書いたほうが早い内容でした。\nですが、基本的には Hops でできることはすべてコードから実行することができます。</p>\n<p>例えば簡単な処理なんだけどスライダーをちょこちょこ動かして一つづつ保存のような作業をこの機能を使うと for 文化して一気に行うことができます。</p>\n<p>また、この機能で特に面白いのは Python の豊富なライブラリの中に Grasshopper があたかもコードのような振る舞いで組み込まれるところにあります。</p>\n<p>例えば Karamba3D を使った構造解析であれば、形状を決めるパラメータを入力にして、出力を検定比や最大変位などにし、その値を最小化する最適化問題を Python の最適化ライブラリを使って実行することができます。</p>\n<p>Python でも構造解析のライブラリはありますが、基本的にコードではモデル作成が難しい場合がほとんどです。\nその点、形状生成は Grasshopper が得意とするところなので、とても簡単にモデルの作成を行うことができます。</p>\n<p>Grasshopper では galapagos のような特定のコンポーネントでしか最適化を行うことができませんが、この事によってより細かい設定が可能なライブラリを使った検討を行えるようになります。</p>\n<p>RhinoCompute と Hops を使って Grasshopper データをコードのように扱うことで、コードと Grasshopper それぞれの得意な点を簡単に組み合わせてより効率的に検討を進めていきましょう。</p>","excerpt":"はじめに RhinoInside や Rhino3dm、RhinoCompute など コードから Rhino のデータ、機能を扱う機能は現在色々と提供されています。\n言語としては C#、Python、Javascript の…","frontmatter":{"date":"08 December, 2021","path":"/articles/Grasshopper-as-a-code-with-Python","title":"Grasshopper を Python コードのように使おう","article_tags":["Grasshopper","Python","RhinoCompute"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/Grasshopper-as-a-code/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}