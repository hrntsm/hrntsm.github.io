{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/about-karamba3d-v2-nightlybuild","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>Karamba3D は開発中のバージョンが NightlyBuilds として公開されているので、それを試してみます。\nダウンロードは<a href=\"https://github.com/karamba3d/K3D_NightlyBuilds\">公式のGitHub</a> からできます。</p>\n<p>GitHub を見ると最初のプレリリースが 20/9/14 になっており、そこからじわじわ開発が進んできています。\n2021/2/7 現在で最新版のプレリリースは <a href=\"https://github.com/karamba3d/K3D_NightlyBuilds/releases/tag/2.0.0_210123\">Karamba3D 2.0.0_210123 WIP</a> です。</p>\n<h2>配信しながら触りました。</h2>\n<p><a href=\"https://www.youtube.com/watch?v=qNkgK0RbfbQ\"><img src=\"https://img.youtube.com/vi/qNkgK0RbfbQ/0.jpg\" alt=\"NightlyBuild の Karamba3D が良い話（記事作成作業配信）\"></a>)</p>\n<h2>GitHub のリリースで更新内容を確認</h2>\n<p><a href=\"https://github.com/karamba3d/K3D_NightlyBuilds/releases\">K3D_NightlyBuilds/releases</a></p>\n<h2>設定項目が増えた karamba.ini ファイル</h2>\n<h3>単位の設定</h3>\n<p>以下のような感じで、単位指定の部分が増えました。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ini line-numbers\"><code class=\"language-ini\"><span class=\"token comment\"># UnitsSystem = \"imperial\"</span>\n<span class=\"token constant\">UnitsSystem</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"SI\"</span>\n\n<span class=\"token comment\"># internal length unit; assumed for geometry input from Rhino - possible values: \"m\", \"cm\", \"mm\", \"µ\", \"ft\", \"in\"; No consistency checks are performed!</span>\n<span class=\"token constant\">UnitLength</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"mm\"</span>\n<span class=\"token comment\"># internal force unit - possible values: \"MN\", \"kN\", \"daN\", \"N\", \"cN\", \"kip\"; No consistency checks are performed!</span>\n<span class=\"token constant\">UnitForce</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"kN\"</span>\n<span class=\"token comment\"># internal mass unit - possible values: \"t\", \"kg\", \"dag\", \"g\", \"µg\", \"lbm\"; No consistency checks are performed!</span>\n<span class=\"token constant\">UnitMass</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"t\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>単位の指定は、Grasshopper 上でもできるようになっています。\nこれによって、後から Karamba3D の単位が変えられるようになったので、モデリングした後の単位間違えに簡単に対応できます。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/SettingComponent.jpg\" alt=\"SettingComponent\"></p>\n<h3>デフォルトの材料の指定</h3>\n<p>もともと内部的に自動で割り当てられていた、材質を設定できるようになった。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ini line-numbers\"><code class=\"language-ini\"><span class=\"token comment\">#---</span>\n<span class=\"token comment\"># default materials:</span>\n<span class=\"token comment\">#---</span>\n<span class=\"token comment\"># Em[kN/cm2], Gm(inplane)[kN/cm2], G(transverse)[kN/cm2], gamma[kN/m3], alphaT[], ftk[kN/cm2], k[kN/cm2]</span>\n<span class=\"token comment\">#---</span>\n<span class=\"token constant\">Steel</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> 21000, 8076, 8076, 78.5, 1.2E-05, 23.5, -23.5 </span>\n<span class=\"token constant\">Concrete</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> 3000, 1375, 1375, 25, 1.00E-05, 0.135, -3.0</span>\n<span class=\"token constant\">ReinforcementSteel</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> 21000, 10500, 10500, 78.5, 1.2E-05, 50.0, -50</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>板要素の断面力の色指定</h3>\n<p>Karamba3D v2 から板要素の断面力の図化ができるようになったので、その色指定が追加。</p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-ini line-numbers\"><code class=\"language-ini\"><span class=\"token comment\">#---</span>\n<span class=\"token comment\"># colors for coloring positive values of the shell section results</span>\n<span class=\"token comment\">#---</span>\n<span class=\"token constant\">shellsec_color_pos_N_tt</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> LightBlue</span>\n<span class=\"token constant\">shellsec_color_pos_N_nn</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> LightGreen</span>\n<span class=\"token constant\">shellsec_color_pos_N_tn</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> LightSkyBlue</span>\n<span class=\"token constant\">shellsec_color_pos_M_tt</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> Red</span>\n<span class=\"token constant\">shellsec_color_pos_M_nn</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> SeaGreen</span>\n<span class=\"token constant\">shellsec_color_pos_M_tn</span>  <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> CadetBlue</span>\n<span class=\"token constant\">shellsec_color_pos_V_t</span>   <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> LightBlue</span>\n<span class=\"token constant\">shellsec_color_pos_V_n</span>   <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> LightGreen</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>Grasshopper 上で材料設定できる項目が増えた</h2>\n<p>検定に対しての細かく設定できるようになりました。</p>\n<p>これまで ft の 1 つだけだったので、引張の耐力として ft、圧縮の耐力として fc が設定できるようになりました。</p>\n<p>また、検定の応力の求め方も、以下の 3 つから選べるようになりました。</p>\n<ol>\n<li>Mises</li>\n<li>Tresca</li>\n<li>Rankine</li>\n</ol>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/MaterialSetting.jpg\" alt=\"MaterialSettings\"></p>\n<hr>\n<h2><strong>この設定がいつ有効になるかわからなかったので、調査して追記</strong></h2>\n<h2>ポリラインから断面諸元を計算</h2>\n<p>CrossSection Property コンポーネントが新たに追加されて、閉じたポリラインを入力することでその断面の断面諸元が計算されます。</p>\n<p>注意点としては、YZ 平面に書かれたポリラインが対象なので、ほかの平面にあるものはエラーになります。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/CSProp.jpg\" alt=\"CrossSection Property\"></p>\n<h2>Line-Joint が追加</h2>\n<p>メッシュの辺に対して接合条件が指定できるようになりました。</p>\n<p>接合条件を与えたいポリラインを入力にしてそこに接合条件が与えられるようになります。\n剛性の与え方としては、各自由度に対して変位剛性（Ct）と回転剛性（Cr）が指定できます。\n対象の自由度は、境界条件などと同じようにラジオボタンで設定できます。</p>\n<p>Rhino 上の可視化としては、対象の辺がマゼンタ色になり、剛性を与えるために指定したローカル座標系のベクトルが図化されます。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/LineJoint.jpg\" alt=\"Line Joint\"></p>\n<h2>Support のコンポーネントがデータツリーに対応</h2>\n<p>もともとはラジオボタンで全てを指定しなければならず、1 つのコンポーネントで、1 つの条件しか指定できませんでした。\n今回のバージョンで、Dofs の入力が追加され、境界条件を数字のリストで入力できるようになりました。\n数字に対応する自由度は以下です。</p>\n<ul>\n<li>0: TX</li>\n<li>1: TY</li>\n<li>2: TZ</li>\n<li>3: RX</li>\n<li>4: RY</li>\n<li>5: RZ</li>\n</ul>\n<p>以下の画像では、Support コンポーネントのラジオボタンを使ってすべてに共通で TY を固定しています。\nそれに加えて、ツリーで {0;0} には 3:RX の固定、{0;1} には 5: RZ の固定が 1 つのコンポーネントで設定できるようになりました。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/Support.jpg\" alt=\"Support\"></p>\n<h2>荷重ケース名が文字列になった</h2>\n<p>これまで整数での設定だったが、文字列で指定するようになった。2 バイト文字も使えるので日本語にもやさしいです。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/LCName.jpg\" alt=\"LCName\"></p>\n<h2>取得する変形結果に方向ベクトルが指定できるようになった</h2>\n<p>例えば Z 方向ベクトルを入れると、BeamView コンポーネントでカラーコンター化される値が Z 方向変位の値になり対象の方向のみの結果を取得できます。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/DispDir.jpg\" alt=\"DispDir\"></p>\n<h2>シェル要素の改善</h2>\n<h3>膜要素の追加</h3>\n<p>梁要素（LineToBeam など）にはあった Bending の設定が板要素（MeshToShell）にも追加され曲げの成分を持たない板要素（膜要素）が解析で使えるようになりました。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/Membrane.jpg\" alt=\"Membrane\"></p>\n<h3>Shell View での CrossSection 表示が追加</h3>\n<p>ShellView で CrossSection を選択すると厚さだけの表示がされるようになりました。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/ShellCroSec.jpg\" alt=\"ShellCroSec\"></p>\n<h3>シェルの断面の応力の図化表示が追加</h3>\n<p>確認したいシェルの切断線をポリラインとして入力すると、その位置での応力が以下のように図化されるようになりました。</p>\n<p>切断線の位置を NumberSlider などで動かせるようにすれば、板の各位置の応力を簡単に確認できます。</p>\n<p><img src=\"https://hiron.dev/article-images/about-karamba3d-v2-nightlybuild/ShellForce.jpg\" alt=\"ShellForce\"></p>\n<h2>Karamba3D のメッシャーが C# から使えるようになった</h2>\n<p>最近使ってみていい感じにメッシングされていたんでうれしい。</p>\n<p>RhinocerosForums の <a href=\"https://discourse.mcneel.com/t/using-karamba-meshing-tool-in-c/109054\">ここ</a> 参照。</p>\n<p>上記より引用。</p>\n<blockquote>\n<p>the K3D mesher can be envoked via Karamba.GHopper.Utilities.MeshBreps.solve:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token comment\">// meshes a list of breps such that their vertices coincide on common edges. The minimum mesh-size is hard-coded to 5mm. This is due to tolerance checks and will be removed in future.</span>\n<span class=\"token comment\">// list of breps to be meshed</span>\n<span class=\"token comment\">// points to be added to the mesh as vertices if their distance from the breps is not too large</span>\n<span class=\"token comment\">// characteristic length of the resulting face edges</span>\n<span class=\"token comment\">// case 0: No Point Reduction (check Cull Mode),</span>\n<span class=\"token comment\">// case 1: Point Reduction is set to ‘Leave One’; Culling Points at distance &lt; 0.5 * Mesh Resolution</span>\n<span class=\"token comment\">// case 2: Point Reduction is set to ‘Average’; Culling Points at distance &lt; 0.5 * Mesh Resolution</span>\n<span class=\"token comment\">// Edges are refined with: Math.Round(refineEdgeResFactor, 2) x Mesh Resolution</span>\n<span class=\"token comment\">// Vertices closer than cullDist get removed</span>\n<span class=\"token comment\">// tolerance *0.1 = tolerance for delauney triangulation</span>\n<span class=\"token comment\">// must be between 0 and 1; smoothes the mesh</span>\n<span class=\"token comment\">// number of steps for smoothing the mesh</span>\n<span class=\"token comment\">// warning encountered during mesh generation</span>\n<span class=\"token comment\">// information regarding the meshing process</span>\n<span class=\"token comment\">// resulting meshes</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> solve\n<span class=\"token punctuation\">(</span>\n    <span class=\"token class-name\">List</span> inputBrep<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span> inclusionPoints<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> mResolution<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> m_mode<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> refineEdgeResFactor<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> cullDist<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> tolerance<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> smooth<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> steps<span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> warning<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> info<span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> <span class=\"token class-name\">List</span> remappedMeshes\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<blockquote>\n<p>Use “Mesh3 mesh3 = mesh.Convert() from ‘Karamba.GHopper.Geometry’” to convert a Rhino Mesh to Mesh3.</p>\n</blockquote>","excerpt":"はじめに Karamba3D は開発中のバージョンが NightlyBuilds として公開されているので、それを試してみます。\nダウンロードは公式のGitHub からできます。 GitHub を見ると最初のプレリリースが 20/9/14 になっており、そこからじわじわ開発が進んできています。\n2021/2/…","frontmatter":{"date":"07 February, 2021","path":"/articles/about-karamba3d-v2-nightlybuild","title":"NightlyBuild の Karamba3D が良い話","article_tags":["Karamba3D"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/about-karamba2-nightly-build/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}