{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/GpuPrograming-in-GH-with-AleaGpu","result":{"data":{"markdownRemark":{"html":"<p>GPU プログラミングが面白そうだったので、Grasshopper で実装して動作の感じを確認してみました。実装した方法について説明していきます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-0Fs5Nd-oCzc/XqrCTImNSCI/AAAAAAAAB2Q/JBMrTBcHsPYsqQhFMAPTsAxeUlayYX5mgCK4BGAsYHg/gpu.gif\"><img src=\"https://1.bp.blogspot.com/-0Fs5Nd-oCzc/XqrCTImNSCI/AAAAAAAAB2Q/JBMrTBcHsPYsqQhFMAPTsAxeUlayYX5mgCK4BGAsYHg/w640-h482/gpu.gif\"></a></p>\n<p>使用するライブラリは<a href=\"http://www.aleagpu.com/release/3_0_4/doc/\">AleaGPU</a>です。</p>\n<p>公式のドキュメントによると、AleaGPU は、早く使いやすく高い生産性となっており、コンパイルされたコードは CUDA C、C++と同程度の速さで実行されるとのことです。上記で書きましたが、CUDA を使用しているため、NVIDIA の GTX1050 以上 GPU を積んでいないと動作しないため注意してください。</p>\n<p>基本的な内容はこちらの Qiita の記事がわかりやすかったので紹介します。<a href=\"https://qiita.com/y_miyoshi/items/921903e3499abf18abdd\">Alea GPU で簡単 C# GPU プログラミング</a></p>\n<p>まず VisualStudio で Alea ライブラリを使えるようするため、NuGet を使ってインストールしてください。合わせて FSharp.Core も必要になるので、インストールしてください。ここら辺のやり方はこちらの記事がわかりやすかったので合わせて紹介します。<a href=\"https://kzmmtmt.pgw.jp/?p=1170\">Alea GPU ライブラリを使って C#で簡単 GPU 並列プログラミング</a></p>\n<p>Alea が使えるようになったら、Grasshopper での実装します。上で紹介したサイトでは例えば</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">Gpu<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=></span> hogehoge<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>のようにやる並列計算の例が書かれていますが、簡単に試すために Alea のあるメソッドを使って今回はやりました。使用したのは平均を求める<a href=\"http://www.aleagpu.com/release/3_0_4/api/html/92879577-0e02-e2e4-7fea-b9777d20505a.htm\">GpuExtension.Average メソッド</a>  と合計を求める<a href=\"http://www.aleagpu.com/release/3_0_4/api/html/1d45ba9a-3b5f-b4a0-7d1b-a67ccfcad9a1.htm\">GpuExtension.Sum メソッド</a>  です。</p>\n<p>入力を計算したい値のリストとして、SolveInstance を以下のようにしました。GH の入力はリストですが、並列計算は配列でないとできないため、20 行目で入力されたリストを配列に変換しています。その後 GpuExtension.Average メソッドを使用して GPU で計算して値を返しています。12 行目で GpuManaged のアトリビュートをつけていますが、これは Alea 側で GPU のメモリの管理を自動で行ってくれる設定で、これをつけると速度が上がります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Grasshopper<span class=\"token punctuation\">.</span>Kernel</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Geometry</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Alea</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Alea<span class=\"token punctuation\">.</span>Parallel</span><span class=\"token punctuation\">;</span>\n\n・・・省略・・・\n\n\\<span class=\"token punctuation\">[</span>GpuManaged\\<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> gpu <span class=\"token operator\">=</span> Gpu<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">double</span></span> average<span class=\"token punctuation\">;</span>\n <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> inputList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetDataList</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> inputList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> inputArray <span class=\"token operator\">=</span> inputList<span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    average <span class=\"token operator\">=</span> GpuExtension<span class=\"token punctuation\">.</span><span class=\"token function\">Average</span><span class=\"token punctuation\">(</span>gpu<span class=\"token punctuation\">,</span> inputArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> average<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>合計もほぼ同じ書き方で書くことができます。詳細は、最後につけた私の GitHub のリポにソースを上げているので見てください。これでコードは終わりです。</p>\n<p>これをビルドしただけでは動かないので、Rhino に必要なライブラリを入れます。上で作ったコードをビルドをすると以下のように bin フォルダの中に Alea 関連のファイルがいくつか作成されます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-eAdjBT1FKpg/XqrOjjqxwZI/AAAAAAAAB24/nnMn2asubrQj_oFRfUlwfaLIwCIQF9IXwCK4BGAsYHg/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B221105.png\"><img src=\"https://1.bp.blogspot.com/-eAdjBT1FKpg/XqrOjjqxwZI/AAAAAAAAB24/nnMn2asubrQj_oFRfUlwfaLIwCIQF9IXwCK4BGAsYHg/w400-h354/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B221105.png\"></a></p>\n<p>この中で Alea.CUDA.CT.LibDevice から  FSharp.Core.xml までを C:\\Program Files\\Rhino 6\\System 内に入れます。</p>\n<p>これで動くようになったので、Grasshopper を起動して作成したコンポーネントを使用して比較してみると以下のようになりました。比較としては、合計は、GH の MassAddition コンポーネントとの比較、平均は GH の Average コンポーネントと Impala の QuickAvr コンポーネントとの比較を行っています。</p>\n<p><a href=\"https://1.bp.blogspot.com/-Z0CBm7OujaA/XqrRHIXLVOI/AAAAAAAAB3g/lgPgOPav8HM5YVo8haW0ExyZe1MUUVj-gCK4BGAsYHg/EWxUvI9X0AIaZc6.png\"><img src=\"https://1.bp.blogspot.com/-Z0CBm7OujaA/XqrRHIXLVOI/AAAAAAAAB3g/lgPgOPav8HM5YVo8haW0ExyZe1MUUVj-gCK4BGAsYHg/w640-h541/EWxUvI9X0AIaZc6.png\"></a></p>\n<p>結果としては合計は GPU の方が早く、平均は Impala が早い結果になりました。計算するデータ数を増やすために Entwine を使って枝分かれさせて入力してみた結果が以下です。</p>\n<p><a href=\"https://1.bp.blogspot.com/-UvrRXc4T1Vs/XqrVJnTBBwI/AAAAAAAAB4I/vxlNQBEbVaIR4I27Xr1SFoWItaQNSafPACK4BGAsYHg/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B223814.png\"><img src=\"https://1.bp.blogspot.com/-UvrRXc4T1Vs/XqrVJnTBBwI/AAAAAAAAB4I/vxlNQBEbVaIR4I27Xr1SFoWItaQNSafPACK4BGAsYHg/w640-h442/%25E3%2582%25B3%25E3%2583%25A1%25E3%2583%25B3%25E3%2583%2588%2B2020-04-30%2B223814.png\"></a></p>\n<p>並列化処理とか、GPU とのデータのやり取りに時間がかかるので、やっぱり必ずしも早くなるわけではないですね。実装は簡単だけどどんな時それが適切なのかよくわからないので、ここら辺は真面目にコンピューターサイエンスとか勉強してみたい範囲です。</p>\n<p>実際に自分でビルドして使ってみたいからは GitHub のリポを参照してください。<a href=\"https://github.com/hrntsm/GHGpuComputingTest\">https://github.com/hrntsm/GHGpuComputingTest</a></p>","excerpt":"GPU プログラミングが面白そうだったので、Grasshopper で実装して動作の感じを確認してみました。実装した方法について説明していきます。  使用するライブラリはAleaGPUです。 公式のドキュメントによると、AleaGPU は、早く使いやすく高い生産性となっており、コンパイルされたコードは CUDA C、C…","frontmatter":{"date":"30 April, 2020","path":"/articles/GpuPrograming-in-GH-with-AleaGpu","title":"Alea GPU を使って GrasshopperでGPU並列プログラミング","article_tags":["Grasshopper","CSharp","構造とデジタル"]},"fields":{"readingTime":{"text":"1 min read"},"slug":"/kozo-to-digital/GpuPrograming-in-GH-with-AleaGp/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}