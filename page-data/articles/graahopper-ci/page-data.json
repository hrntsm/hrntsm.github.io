{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/graahopper-ci","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>この記事は、<a href=\"https://adventar.org/calendars/5473\">AEC and Related Tech Advent Calendar 2020</a> の 1 日目の記事です。建築関連のことならば技術記事に限らずなんでも OK のアドカレになっていますので興味のある方はみてください。</p>\n<p>ここでは、建築系で設計検討に最近使われている Grasshopper というソフトで動作するコンポーネント（プラグイン）を、Github Actions を使ってビルドする方法についてを紹介します。\n要は、.NET Framework を Github Actions で使ってビルドする方法になります。</p>\n<h3>GitHub Actions とは</h3>\n<p>以下公式より引用 <a href=\"https://github.co.jp/features/actions\">GitHub Actions</a></p>\n<blockquote>\n<p>GitHub Actions を使用すると、ワールドクラスの CI / CD ですべてのソフトウェアワークフローを簡単に自動化できます。 GitHub から直接コードをビルド、テスト、デプロイでき、コードレビュー、ブランチ管理、問題のトリアージを希望どおりに機能させます。</p>\n</blockquote>\n<p>GitHub のリポにプッシュやプルリクなどの設定したアクションをしたときに、仮想マシンやコンテナを使ってテストやビルドなどを行える機能です。</p>\n<h2>やりたいこと</h2>\n<p>以下のときに、GitHub Actions を使ってコンポーネントをビルドして GitHub 上に保存する。</p>\n<ul>\n<li>develop にプッシュ、プルリク</li>\n<li>main にプルリク</li>\n</ul>\n<p>GitHub Actions は Windows 環境にも対応しているため、Windows 環境で Visual Studio を起動してビルドさせることを行います。</p>\n<h2>ローカルでの支度</h2>\n<p>Grasshopper コンポーネントの開発には Visual Studio 2019 を使います。0 から開発するのは大変なので、以下から開発用のテンプレートをダウンロードして使用します。</p>\n<p><a href=\"https://marketplace.visualstudio.com/items?itemName=McNeel.GrasshopperAssemblyforv6\">Grasshopper templates for v6</a></p>\n<p>こちらのテンプレートを使用すると、RhinoCommon.dll や GH_IO.dll などの参照がローカルになっています。GitHub の環境では当然ですが Rhino がインストールされていないため、これらの dll ファイルはローカルにないので、nuget を使ったものに修正してください。\n余談ですが、nuget の Rhino 関連のものの最新版は Rhino7 向けになっています。Rhino6 向けに使う場合は 6.XX で書かれているバージョンを使いましょう。</p>\n<p>nuget パッケージの管理形式は、Package.config ではなく、PackageReference にしてください。VisualStudio のオプションの以下から変更できます。</p>\n<p><img src=\"https://github.com/hrntsm/zenn_articles/blob/master/image/PackageReference.png?raw=true\"></p>\n<h2>GitHub Actions の設定の仕方</h2>\n<p>GitHub Actions は、YAML 構文を使用してイベント、ジョブ、およびステップを定義しています。</p>\n<p>この YAML ファイルを、コードリポジトリの .github/workflows というディレクトリに保存することで、動作の対象になります。\nファイル名は何でも構いません。</p>\n<p>ファイルの内容は以下になります。適宜コメントアウトで説明しています。\nやっていることを要約すると、MSBuild を使って対象のプロジェクトファイルをビルドしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-yml line-numbers\"><code class=\"language-yml\"><span class=\"token comment\"># このワークフローの名前（バッジを作るときなどに使う）</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build Grasshopper Plugin\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># develop にプッシュしたときに動く</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>develop<span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">pull_request</span><span class=\"token punctuation\">:</span> <span class=\"token comment\"># main と develop にプルリクしたときに動く</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>main<span class=\"token punctuation\">,</span> develop<span class=\"token punctuation\">]</span>\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">build</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Github Actions での Windows の最新の環境を指定</span>\n    <span class=\"token comment\">#（現在は Windows Server 2019 になる ）</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> windows<span class=\"token punctuation\">-</span>latest <span class=\"token comment\"># windows-2019 でも同じ意味</span>\n\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token comment\"># git のチェックアウトを行い、環境に対象のリポのデータを取得する</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Checkout\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/checkout@v2\n\n      <span class=\"token comment\"># Vusial Studio (MSBuild)のセットアップをする</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup MSBuild.exe\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> microsoft/setup<span class=\"token punctuation\">-</span>msbuild@v1\n\n      <span class=\"token comment\"># nuget のセットアップをする</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Setup NuGet\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> NuGet/setup<span class=\"token punctuation\">-</span>nuget@v1\n\n      <span class=\"token comment\"># solution ファイルの状態を復元する</span>\n      <span class=\"token comment\"># 例えば、nuget で参照しているファイルを取得するなど</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Restore the application\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> msbuild /t<span class=\"token punctuation\">:</span>Restore /p<span class=\"token punctuation\">:</span>Configuration=Release\n\n      <span class=\"token comment\"># Build 実行</span>\n      <span class=\"token comment\"># 対象はリリースビルド</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Build the application\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> msbuild /p<span class=\"token punctuation\">:</span>Configuration=Release\n\n      <span class=\"token comment\"># 対象パスにあるファイルを GitHub にアップロードする</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Upload build as artifact\n        <span class=\"token key atrule\">uses</span><span class=\"token punctuation\">:</span> actions/upload<span class=\"token punctuation\">-</span>artifact@v2\n        <span class=\"token key atrule\">with</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> GrasshopperComponent\n          <span class=\"token key atrule\">path</span><span class=\"token punctuation\">:</span> ./GrasshopperCISample/bin/GrasshopperCISample.gha</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>動作確認</h2>\n<p>上記ファイルをリモートの develop にプッシュすると、Actions が動き出します。動作は GitHub の対象のリポの Actions のタブをクリックすると確認できます。Actions が動いているときは以下のようにオレンジ色の丸が表示され、問題なく動作が完了すると緑のㇾマーク、何かエラーがあり止まると赤色の × マークになります。</p>\n<p><img src=\"https://github.com/hrntsm/zenn_articles/blob/master/image/CheckWorkFlow.png?raw=true\"></p>\n<p>問題なく動作が完了すると、 以下のように Artifact としてビルドしたものがアップされ、クリックすることでダウンロードできます。</p>\n<p><img src=\"https://github.com/hrntsm/zenn_articles/blob/master/image/Artifact.png?raw=true\"></p>\n<h2>バッジを付ける</h2>\n<p>Github Actions の結果をバッジとして取得できます。これを README に張り付けることで整備されたリポジトリのような気持ちになれます。</p>\n<p>バッジの作成には <a href=\"https://shields.io/category/build\">shields.io</a> というサービスを使うと便利です。以下のようにリポの情報を入れると自動で情報を取得してバッジを作成してくれます。</p>\n<p>ここでは build が通っているかどうかのバッジが作成されますので、それを README などに張り付けるとバッジをリポジトリに表示できます。</p>\n<p><img src=\"https://github.com/hrntsm/zenn_articles/blob/master/image/Shields.io.png?raw=true\"></p>\n<h1>参考リポジトリ</h1>\n<p>この内容は以下のリポで環境構築しています。参考にしてください。</p>\n<p><a href=\"https://github.com/hrntsm/GrasshopperCISample\">GrasshopperCISample</a></p>","excerpt":"はじめに この記事は、AEC and Related Tech Advent Calendar 2020 の 1 日目の記事です。建築関連のことならば技術記事に限らずなんでも OK のアドカレになっていますので興味のある方はみてください。 ここでは、建築系で設計検討に最近使われている Grasshopper…","frontmatter":{"date":"01 December, 2020","path":"/articles/graahopper-ci","title":"GitHub Actions で Grasshopper コンポーネントをビルドする","article_tags":["Grasshopper","GitHub","CI","Zenn"]},"fields":{"readingTime":{"text":"2 min read"},"slug":"/zenn/grasshopper-ci/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}