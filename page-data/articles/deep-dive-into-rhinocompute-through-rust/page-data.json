{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/deep-dive-into-rhinocompute-through-rust","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>最近流行りの言語として Rust があり、触ってみたいと思っている方も多いのではないでしょうか。\nただ、建築系ソフトをみるとその多くが Python や C# で SDK が提供されており、仕事で使わない Rust のような言語に触れることはほぼありません。</p>\n<p>ならば Rust で建築系のソフトのなにかを操作できるようになれば、Rust を触れる機会が生まれるはずです。\nということで、本記事では Rhinoceros と HTTP 通信することで Rhinoceros の機能を使うことができる RhinoCompute を Rust で使う方法について紹介します。</p>\n<p>本記事でははじめに Rust を触る前にどのように実装するべきか確認するため、RhinoCompute と通信することへの理解を深めます。\nその後、その内容に基づいて Rust で実行環境を作成します。</p>\n<p>技術的には Rust でも Rhino のデータを取得し rhino3dm 相当の操作が可能です。\nしかしそのための実装は時間がかかるため、Grasshopper データを Post して RhinoCompute を使いその結果を取得することを目標とします。</p>\n<h3>必要な環境</h3>\n<ul>\n<li>Rhinoceros 7 以降</li>\n<li>Grasshopper の Hops コンポーネント v0.11 以降</li>\n<li>Rust(作成段階で rustc 1.58.1 を使っています)</li>\n</ul>\n<h2>RhinoCompute との通信内容について</h2>\n<h2>Rust について</h2>\n<p>Rust の特徴を<a href=\"https://www.rust-lang.org/ja\">公式サイト</a>より引用します。</p>\n<blockquote>\n<p>なぜ Rust か？</p>\n<p><strong>パフォーマンス</strong><br>\nRust は非常に高速でメモリ効率が高くランタイムやガベージコレクタがないため、パフォーマンス重視のサービスを実装できますし、組込み機器上で実行したり他の言語との調和も簡単にできます。</p>\n<p><strong>信頼性</strong><br>\nRust の豊かな型システムと所有権モデルによりメモリ安全性とスレッド安全性が保証されます。さらに様々な種類のバグをコンパイル時に排除することが可能です。</p>\n<p><strong>生産性</strong><br>\nRust には優れたドキュメント、有用なエラーメッセージを備えた使いやすいコンパイラ、および統合されたパッケージマネージャとビルドツール、多数のエディタに対応するスマートな自動補完と型検査機能、自動フォーマッタといった一流のツール群が数多く揃っています。</p>\n</blockquote>\n<p>こういった特徴があり C/C++ に代わる言語として注目されています。\nインストールも同様に <a href=\"https://www.rust-lang.org/ja/tools/install\">公式サイトのインストール</a> よりできます。</p>\n<p>開発に VSCode を使う場合は Rust の公式が出している <a href=\"https://marketplace.visualstudio.com/items?itemName=rust-lang.rust\">Rust</a> という Extension がありますが、それを使うより <a href=\"https://marketplace.visualstudio.com/items?itemName=matklad.rust-analyzer\">rust-analyzer</a> を使うことをおススメします。</p>\n<p>VSCode の Settings で Rust-analyzer›Check On Save: Command の設定がデフォルトでは check になっていますが、clippy にすると保存するごとに linter が走るのでコードの確認をしやすくなります。\n修正の提案もしてくれるのでとても便利です。</p>\n<p>基本的な事項については公式のドキュメントがとても充実しているので実際に自分でコードを書いていきたい方は一読すると理解が深まります。<br>\n<a href=\"https://doc.rust-jp.rs/book-ja/\">The Rust Programming Language 日本語版</a></p>\n<h2>Rust を使った RhinoCompute 実行の実装</h2>\n<p>ここで作成するものは GitHub にあげていますので必要に応じて参照しながらすすめてください。</p>\n<ul>\n<li><a href=\"https://github.com/hrntsm/RustHopper\">RustHopper</a></li>\n</ul>\n<p>はじめに cargo を使って新しいパッケージを作成します。\n名前を \"rusthopper\" とする場合は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">cargo new rusthopper</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>これを使ってこれから作成してきます。</p>\n<h3>Json との IO 用の構造体の作成</h3>\n<p>通信部を作成する前に Input/Output で Json を簡単にやり取りするための構造体を作成します。\nJson へのシリアライズ/デシリアライズをサポートする crate は Rust では serde が主に使われています。\nここでも同様に使用するので、Cargo.toml に以下を追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-toml line-numbers\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">serde</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.136\"</span>\n<span class=\"token key property\">serde_derive</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.136\"</span>\n<span class=\"token key property\">serde_json</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.78\"</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>src ディレクトリに io.rs ファイルを作成し、ここに Json を I/O するための構造体を作成します。</p>\n<p>この構造体は RhinoCompute のリポジトリにある <a href=\"https://github.com/mcneel/compute.rhino3d/blob/master/src/compute.geometry/IO/Schema.cs\">Schema.cs</a> を基に作成します。\n上であげたようにここのクラスを使って RhinoCompute 側は処理しているので、この Schema に倣うことでスムーズにデータのやり取りができ量になります。</p>\n<p>ただ、これを 0 から実装していくとが面倒なので、自動実装を使うと楽です。\n例えばこちらの <a href=\"https://transform.tools/json-to-rust-serde\">transform.tools</a> を使うと Json から Rust の構造体を作成できるので、それを下敷きに足りない部分を手で修正してくことをおススメします。</p>\n<p>Hops から出力された Json がここでも役に立ちます。\n例として Hops のポストした IO への Json を変換すると以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"absolutetolerance\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"angletolerance\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"algo\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7VgJUBNZGk4gQ.....\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pointer\"</span><span class=\"token operator\">:</span> <span class=\"token null keyword\">null</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"cachesolve\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"recursionlevel\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"values\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"warnings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"errors\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">serde_derive<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Deserialize</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">serde_derive<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Serialize</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Value</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Root</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> angletolerance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> algo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> pointer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> cachesolve<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> recursionlevel<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Value</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> warnings<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Value</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> errors<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Value</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Json 内で null だったり空の配列だったりする箇所は当然自動で生成されないのでここは Schema を見ながら修正してきましょう。\n修正した結果が以下になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Schema</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">pub</span> absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> angletolerance<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> algo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> pointer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> cachesolve<span class=\"token punctuation\">:</span> <span class=\"token keyword\">bool</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> recursionlevel<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">DataTree</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> warnings<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> errors<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">DataTree</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"ParamName\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> param_name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"InnerTree\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> inner_tree<span class=\"token punctuation\">:</span> <span class=\"token class-name\">HashMap</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">RestHopperObject</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">RestHopperObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"type\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> object_type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">pub</span> data<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><code class=\"language-text\">algo</code> と <code class=\"language-text\">pointer</code> は null（Rust では None）になる可能性があるので Option の Enum を使用して None または Some(T) を扱えるようにしています。</p>\n<p><code class=\"language-text\">warnings</code> と <code class=\"language-text\">errors</code> は文字列の配列である <code class=\"language-text\">Vec&lt;String></code> としています。</p>\n<p><code class=\"language-text\">values</code> は Grasshopper のツリーの情報を入れるため、別途 <code class=\"language-text\">DataTree</code> という構造体を作成しています。\nC# の Schema ファイルでは、DataTree は別の扱い方をしていますが、簡単に扱うためここでは違う構成にしています。\nDataTree はパラメータの名前である <code class=\"language-text\">param_name</code> とそのパラメータに入れる値のパスの String と実際の値を持つ <code class=\"language-text\">inner_tree</code> の HashMap で構成しています。</p>\n<p>同様にして Response の構造体も作成します。\n作成した内容は以下です。\nこちらの内容は C# の Schema.cs と同様の内容を Rust の構造体に書き換えたものとなっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">IoResponseSchema</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Description\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> description<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"CacheKey\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> cache_key<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"InputNames\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> input_names<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"OutputNames\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> output_names<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Icon\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> icon<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Inputs\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> inputs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">InputParamSchema</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Outputs\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> outputs<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">IoParamSchema</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">InputParamSchema</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Description\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> description<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"AtLeast\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> at_least<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"AtMost\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> at_most<span class=\"token punctuation\">:</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Default\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> default<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Minimum\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> minimum<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Maximum\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> maximum<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Value</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Name\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Nickname\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"ParamType\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> param_type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Default, Debug, Clone, PartialEq, Serialize, Deserialize)]</span>\n<span class=\"token attribute attr-name\">#[serde(rename_all = <span class=\"token string\">\"camelCase\"</span>)]</span>\n<span class=\"token keyword\">pub</span> <span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">IoParamSchema</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Name\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> name<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"Nickname\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> nickname<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n    <span class=\"token attribute attr-name\">#[serde(rename = <span class=\"token string\">\"ParamType\"</span>)]</span>\n    <span class=\"token keyword\">pub</span> param_type<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>通信部分の作成</h3>\n<p>IO 用の構造体が作成できたので、次にそれらを Post する部分を作成していきます。\n必要な依存関係として、通信用にバイナリ（gh のファイル）を Base64 に変換する base64 と通信のための reqwest と非同期化に必要な tokio を依存関係に追加します。</p>\n<div class=\"gatsby-highlight\" data-language=\"toml\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-toml line-numbers\"><code class=\"language-toml\"><span class=\"token punctuation\">[</span><span class=\"token table class-name\">dependencies</span><span class=\"token punctuation\">]</span>\n<span class=\"token key property\">base64</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.13.0\"</span>\n<span class=\"token key property\">reqwest</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"0.11\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"json\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span>\n<span class=\"token key property\">serde</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.136\"</span>\n<span class=\"token key property\">serde_derive</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.136\"</span>\n<span class=\"token key property\">serde_json</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1.0.78\"</span>\n<span class=\"token key property\">tokio</span> <span class=\"token punctuation\">=</span>  <span class=\"token punctuation\">{</span> <span class=\"token key property\">version</span> <span class=\"token punctuation\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">,</span> <span class=\"token key property\">features</span> <span class=\"token punctuation\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"full\"</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>はじめに Grasshopper のファイルを /io にポストする部分を作成します。\n実装としては引数に &#x26;str で gh ファイルへのパスをとり、ポストした結果を Result で返すようにしています。\nまた通信なので関数は非同期とするためはじめに <code class=\"language-text\">async</code> をつけています。</p>\n<p>/io へのポストなので、algo に gh ファイルのデータが入ったものをいれ、レスポンスでそのデータへの cache_key が返ってくることを期待しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">use</span> <span class=\"token namespace\">base64<span class=\"token punctuation\">::</span></span>encode<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>fs<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">File</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Read</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token keyword\">crate</span><span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>io<span class=\"token punctuation\">,</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">upload_definition</span><span class=\"token punctuation\">(</span>\n    gh_path<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">IoResponseSchema</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// io の URL を作成</span>\n    <span class=\"token keyword\">let</span> io_url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"io\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ファイルを読み込み、Base64 にエンコード</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> gh_file <span class=\"token operator\">=</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">::</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>gh_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> buf <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> _ <span class=\"token operator\">=</span> gh_file<span class=\"token punctuation\">.</span><span class=\"token function\">read_to_end</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> encoded<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// body となる各値を作成し Json の文字列化</span>\n    <span class=\"token keyword\">let</span> io_schema <span class=\"token operator\">=</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Schema</span> <span class=\"token punctuation\">{</span>\n        absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n        angletolerance<span class=\"token punctuation\">:</span> <span class=\"token number\">0.0</span><span class=\"token punctuation\">,</span>\n        algo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        pointer<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        cachesolve<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        recursionlevel<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        values<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        warnings<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        errors<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> io_body <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>io_schema<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ポストして結果の Json をデシリアライズ</span>\n    <span class=\"token keyword\">let</span> client <span class=\"token operator\">=</span> <span class=\"token namespace\">reqwest<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> res <span class=\"token operator\">=</span> client\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>io_url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>io_body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">IoResponseSchema</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Rust はコンパイラが細かいと聞いたことがある方もいると思いますので、その例をここで示します。\n上で io_schema を作成している箇所で、absolutetolerance は f64 なのですが、文字列 \"0.0\" をいれて <code class=\"language-text\">cargo check</code> を実行します。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> io_schema <span class=\"token operator\">=</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Schema</span> <span class=\"token punctuation\">{</span>\n    absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.0\"</span><span class=\"token punctuation\">,</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>このようにどこがどのようにダメなのかを細かくコンパイラが教えてくれます。\n基本的にはこのコンパイラの指示に素直に従っていればコードが仕上がっていきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\">error<span class=\"token punctuation\">[</span><span class=\"token constant\">E0308</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> mismatched types\n  <span class=\"token operator\">-</span><span class=\"token punctuation\">-></span> src\\grasshopper<span class=\"token punctuation\">.</span>rs<span class=\"token punctuation\">:</span><span class=\"token number\">15</span><span class=\"token punctuation\">:</span><span class=\"token number\">28</span>\n   <span class=\"token operator\">|</span>\n<span class=\"token number\">15</span> <span class=\"token operator\">|</span>         absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token string\">\"0.0\"</span><span class=\"token punctuation\">,</span>\n   <span class=\"token operator\">|</span>                            <span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span><span class=\"token operator\">^</span> expected `<span class=\"token keyword\">f64</span>`<span class=\"token punctuation\">,</span> found `<span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span>`</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>/io からのレスポンスでポストした gh ファイルの cache key が返ってくるので、それを使って実際にファイルを評価する部分を作成します。</p>\n<p>実装としては mcneel の Python の compute-rhino3d の実装に倣って、gh ファイルのパスと DataTree を受け取ってそれを使って処理する関数としています。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">pub</span> <span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">evaluate_definition</span><span class=\"token punctuation\">(</span>\n    gh_path<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span><span class=\"token punctuation\">,</span>\n    data_tree<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">DataTree</span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Schema</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// 上で実装した /io へのポストを使って cache_key を取得</span>\n    <span class=\"token keyword\">let</span> cache_key <span class=\"token operator\">=</span> <span class=\"token function\">upload_definition</span><span class=\"token punctuation\">(</span>gh_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">.</span>cache_key<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// io の URL を作成</span>\n    <span class=\"token keyword\">let</span> solve_url <span class=\"token operator\">=</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_owned</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"grasshopper\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// body となる各値を作成し Json の文字列化</span>\n    <span class=\"token keyword\">let</span> solve_schema <span class=\"token operator\">=</span> <span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Schema</span> <span class=\"token punctuation\">{</span>\n        absolutetolerance<span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span><span class=\"token punctuation\">,</span>\n        angletolerance<span class=\"token punctuation\">:</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span>\n        cachesolve<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        algo<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n        pointer<span class=\"token punctuation\">:</span> cache_key<span class=\"token punctuation\">,</span>\n        recursionlevel<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n        values<span class=\"token punctuation\">:</span> data_tree<span class=\"token punctuation\">,</span>\n        warnings<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        errors<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> solve_body <span class=\"token operator\">=</span> <span class=\"token namespace\">serde_json<span class=\"token punctuation\">::</span></span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>solve_schema<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// ポストして結果の Json をデシリアライズ</span>\n    <span class=\"token keyword\">let</span> solve_client <span class=\"token operator\">=</span> <span class=\"token namespace\">reqwest<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Client</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> solve_res <span class=\"token operator\">=</span> solve_client\n        <span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span>solve_url<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span>solve_body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span>\n        <span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">::</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Schema</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>solve_res<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで Grasshopper ファイルを実行して値を取得する部分の作成が完了しました。</p>\n<h3>main.rs の作成</h3>\n<p>IO の部分、通信する部分が作成できたので、これらをまとめて実際にポストするデータを作成し結果を表示する部分を作成していきます。</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-rust line-numbers\"><code class=\"language-rust\"><span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">grasshopper</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">mod</span> <span class=\"token module-declaration namespace\">io</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>collections<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ベースとなる URL 作成</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">URL</span><span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">str</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"http://localhost:6500/\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 非同期のメイン関数であることを示すため #[tokio::main] を付ける</span>\n<span class=\"token attribute attr-name\">#[tokio::main]</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Result</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">dyn</span> <span class=\"token namespace\">std<span class=\"token punctuation\">::</span>error<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">Error</span><span class=\"token operator\">>></span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// grasshopper のパスを入れる</span>\n    <span class=\"token keyword\">let</span> gh_path <span class=\"token operator\">=</span> <span class=\"token string\">\"definitions/sum.gh\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// インプット用の DataTree を作成する</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> input_tree<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">DataTree</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> tree <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RestHopperObject</span> <span class=\"token punctuation\">{</span>\n            object_type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"System.Double\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">:</span> <span class=\"token string\">\"1.0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    input_tree<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">DataTree</span> <span class=\"token punctuation\">{</span>\n        param_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"A\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        inner_tree<span class=\"token punctuation\">:</span> tree<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> tree <span class=\"token operator\">=</span> <span class=\"token class-name\">HashMap</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    tree<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">RestHopperObject</span> <span class=\"token punctuation\">{</span>\n            object_type<span class=\"token punctuation\">:</span> <span class=\"token string\">\"System.Double\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            data<span class=\"token punctuation\">:</span> <span class=\"token string\">\"2.0\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    input_tree<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token namespace\">io<span class=\"token punctuation\">::</span></span><span class=\"token class-name\">DataTree</span> <span class=\"token punctuation\">{</span>\n        param_name<span class=\"token punctuation\">:</span> <span class=\"token string\">\"B\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        inner_tree<span class=\"token punctuation\">:</span> tree<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// RhinoCompute と通信して結果を受け取る</span>\n    <span class=\"token keyword\">let</span> output <span class=\"token operator\">=</span> <span class=\"token namespace\">grasshopper<span class=\"token punctuation\">::</span></span><span class=\"token function\">evaluate_definition</span><span class=\"token punctuation\">(</span>gh_path<span class=\"token punctuation\">,</span> input_tree<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">await</span><span class=\"token operator\">?</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 各結果を表示する</span>\n    <span class=\"token comment\">// エラーの結果</span>\n    <span class=\"token keyword\">let</span> errors <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>errors<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Errors:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> error <span class=\"token keyword\">in</span> errors <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// ワーニングの結果</span>\n    <span class=\"token keyword\">let</span> warnings <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>warnings<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>warnings<span class=\"token punctuation\">.</span><span class=\"token function\">is_empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Warnings:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> warning <span class=\"token keyword\">in</span> warnings <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> warning<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// RH_OUT で得られた結果</span>\n    <span class=\"token keyword\">let</span> values <span class=\"token operator\">=</span> output<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> values <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>param_name<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> inner_tree <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span>inner_tree<span class=\"token punctuation\">;</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">in</span> inner_tree <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> value <span class=\"token punctuation\">{</span>\n                <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>すべてできたら <code class=\"language-text\">cargo check</code> を実行して問題がないか確認しましょう。\n問題なければ RhinoCompute を起動して <code class=\"language-text\">cargo run</code>　することで実際にコードを実行しちゃんと結果が返ってくることを確認しましょう。</p>\n<p>ここでは冒頭で出した A+B の足し算するデータに対して実行しているので結果は 3 が返ってきます。</p>\n<h2>まとめ</h2>\n<p>Rust で RhinoCompute を実行する例を出しましたがどうでしたでしょうか。\nC# や Python とはだいぶ違う言語なため手こずったと思いますが、実際に書きながらすすめると Rust の強力なコンパイラの力を感じられたのではないでしょうか。</p>\n<p>建築系ではあまり使うことはないと思いますが、機会があったら Rust にもぜひチャレンジしてみてください。</p>","excerpt":"はじめに 最近流行りの言語として Rust があり、触ってみたいと思っている方も多いのではないでしょうか。\nただ、建築系ソフトをみるとその多くが Python や C# で SDK が提供されており、仕事で使わない Rust のような言語に触れることはほぼありません。 ならば Rust…","frontmatter":{"date":"12 February, 2022","path":"/articles/deep-dive-into-rhinocompute-through-rust","title":"Deep dive into RhinoCompute through Rust","article_tags":["Rust","RhinoCompute","Grasshopper"]},"fields":{"readingTime":{"text":"6 min read"},"slug":"/deep-dive-into-rhinocompute-through-rust/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}