{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/start-compute-rhino-in-aws","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>Amazon Elastic Compute Cloud(EC2)で Compute.Rhino3d の始める方法についての記事です。RhinoCompute ともいうみたいで、何が Compute.Rhino3d で何が RhinoCompute なのかよくわからないです。</p>\n<p>Compute.Rhino3d は開発中なため、2020/9/30 時点での情報です。公式のドキュメントの更新も頻繁なため、参照しているリンクが切れている可能性があります。もしリンクが切れていたら公式の GitHub のリポのトップページは以下になりますので、そこから最新の情報を探してみてください。</p>\n<p><a href=\"https://github.com/mcneel/compute.rhino3d\">Rhino Compute Server</a></p>\n<h3>そもそも Compute.Rhino3d って？</h3>\n<p>以下公式より引用です。<a href=\"https://www.rhino3d.com/compute\">Rhino Compute Service (ワークインプログレス)</a></p>\n<blockquote>\n<p>McNeel クラウドを介してステートレス REST API を通じて Rhino のジオメトリライブラリへアクセスできるようにする実験的なプロジェクトです。Compute は、 Rhino Inside™ のテクノロジをベースに、Rhino の高度なジオメトリ計算をオンラインのウェブサービスに埋め込みます。</p>\n</blockquote>\n<p>Rhinoceros という 3DCAD のジオメトリ計算機能をオンラインのウェブサービスとして埋め込むことができます。公式が参考として Heroku を使ってとげとげな形状をスライダーで変更させるものを公開しています。</p>\n<p><a href=\"https://compute-rhino3d-appserver.herokuapp.com/example/\">https://compute-rhino3d-appserver.herokuapp.com/example/</a></p>\n<h2>AWS の支度</h2>\n<h3>作成するインスタンスの種類</h3>\n<p>環境としては最低でも Windows Server2016、推奨では Windows Server 2019 となっています。ここでは AWS の Windows Server 2019 Base を使うことを想定します。無料枠で使用可能な t2.micro (1vCPU, 1GB RAM) のインスタンスでも可能ですが、メモリが 1GB でつらいです。公式のドキュメントでは、t2.medium (2vCPU, 4GB RAM) がスタートするには良いと書かれています。\nわたしも最初は t2.micro でやっていましたが、動作が重すぎて t2.medium に変えました。</p>\n<h3>インスタンスの作成</h3>\n<p>AWS EC2 での Windows Server 2019 のインスタンスの作り方はいろいろなサイトで紹介されているのでここでは割愛します。以下とかを参考にしました。”2.EC2 インスタンに接続する” までやればよいです。</p>\n<p><a href=\"https://qiita.com/og_omochi/items/c85bfd61fd4bd9e5baab\">AWS で EC2(WindowsServer2019)を作成し一般公開するまで方法</a></p>\n<h2>Compute.Rhino3d の支度</h2>\n<h3>ライセンスの価格</h3>\n<p>公式のドキュメント <a href=\"https://www.rhino3d.com/compute-pricing\">Pricing - Rhino 7 on Servers</a></p>\n<p>通常のシングルコンピューターライセンスでは認証ではじかれてしまいます。サーバーインスタンスでの Rhino の実行には専用のライセンスが必要で、このライセンスはコア時間での課金になっています。現在 WIP 版なのでこの価格が正式版になるかわかりませんが、2020 年 9 月 30 日現在では 0.10 米ドル/core-hour です。</p>\n<p>Core-Hour なので課金形態は以下のようになります。</p>\n<ol>\n<li>\n<p>1 台の 32 コアのサーバーで 1 時間実行した場合</p>\n<ul>\n<li>1 台 × 32 コア × 1 時間 × 0.10/core-hour = 3.20 米ドル</li>\n</ul>\n</li>\n<li>\n<p>200 台の 4 コアのサーバーで 6 分実行した場合</p>\n<ul>\n<li>200 台 × 4 コア × 0.1 時間 × 0.10/core-hour = 8.00 米ドル</li>\n</ul>\n</li>\n</ol>\n<h3>ライセンスの作成方法</h3>\n<p>上記で書いたように Windows Server 向けには専用のライセンスが必要になります。作り方としては自分の Rhino のアカウント内に専用のチームを作成します。</p>\n<ol>\n<li><a href=\"https://accounts.rhino3d.com/\">Rhino Accounts</a> にアクセスする</li>\n<li>ライセンスのページに行く</li>\n<li>新規チームを作成する</li>\n<li>\"チームの管理\"から\"コア時間課金の管理…\"を選ぶ</li>\n<li>コア時間課金を有効にして保存する</li>\n<li>\n<p>再度コア課金の管理のページに行き、操作 ▼ から Get Auth Token を選ぶ</p>\n<ul>\n<li>この AuthToken を Rhino をインストールする際にライセンス認証するために使います。</li>\n</ul>\n</li>\n</ol>\n<h3>実行環境構築</h3>\n<p>公式のドキュメント <a href=\"https://github.com/mcneel/compute.rhino3d/blob/master/docs/deploy.md\">Deploying Rhino Compute</a></p>\n<p>対象の環境で以下を行います。AWS でやるならばその Windows Server 内で行ってください。</p>\n<ol>\n<li>\n<p>PowerShell を起動して以下を入力する</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">iwr -useb https://raw.githubusercontent.com/mcneel/compute.rhino3d/master/script/bootstrap-server.ps1 -outfile bootstrap.ps1<span class=\"token punctuation\">;</span> .<span class=\"token punctuation\">\\</span>bootstrap.ps1 -install</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>\n<p>1.を実行すると必要なものがダウンロードされる。途中で以下の入力を求められるためそれぞれを入力する</p>\n<ul>\n<li>EmailAdress : RhinoWIP をダウンロードするために使用する</li>\n<li>ApiKey : API のキーで API アクセスする際に使うため</li>\n<li>RhinoToken : ”ライセンスの作成方法”の部分で取得した AuthToken</li>\n</ul>\n</li>\n<li>\n<p>ダウンロードした Compute のフォルダ内の compute.geometry.exe を実行して、以下のように \"The compute.geometry service is now running\" が表示されるまで待つ</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">[00:00:00 INF] Compute 1.0.0.493, Rhino 7.0.20266.15205\n[00:00:00 INF] Configuration Result:\n[Success] Name compute.geometry\n[Success] ServiceName compute.geometry\n[00:00:00 INF] Topshelf v4.1.0.172, .NET Framework v4.0.30319.42000\n[00:00:00 INF] Launching RhinoCore library as &quot;USERNAME&quot;\n[00:00:00 INF] Starting listener(s): [&quot;http://+:80&quot;]\n[00:00:00 INF] Listening on [&quot;http://+:80&quot;]\n[00:00:00 INF] The compute.geometry service is now running, press Control+C to exit.</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n<li>\n<p>ブラウザーで <a href=\"http://YOUR-PUBLIC-DNS-or-IP/version\">http://YOUR-PUBLIC-DNS-or-IP/version</a> にアクセスして、例えば以下のようなバージョン情報が表示されれば問題なく実行されています</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-json line-numbers\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n <span class=\"token property\">\"rhino\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"7.0.20259.15365\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"compute\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1.0.0.493\"</span><span class=\"token punctuation\">,</span>\n <span class=\"token property\">\"git_sha\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"a612c257\"</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n</li>\n</ol>\n<h2>Compute.Rhino3d を実行する</h2>\n<h3>サンプルファイルを取得</h3>\n<p>mcneel の GitHub からサンプルファイルをクローンして使います。</p>\n<ul>\n<li><a href=\"https://github.com/mcneel/compute.rhino3d-samples\">compute.rhino3d-samples</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/mcneel/compute.rhino3d-samples.git</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>API キーと WebAdress の設定</h3>\n<p>Visual Studio などで Sample フォルダ内の RhinoComputeSamples.sln を開いて設定した API キーと compute.rhino のアドレスを compute.rhino3d-samples/samples/RhinoCompute フォルダ内にある RhinoCompute.cs の以下の位置に入れてください。</p>\n<p>Header の追記箇所については近いうち追記しなくてもよいようにリポのデータを更新するとのことです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Compute</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ComputeServer</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> WebAddress <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token string\">\" http://public-dns-or-ip/\"</span><span class=\"token punctuation\">;</span> # ここに入れる\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> AuthToken <span class=\"token punctuation\">{</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\">T</span> <span class=\"token generic-method\"><span class=\"token function\">Post</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>T<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> function<span class=\"token punctuation\">,</span> <span class=\"token keyword\">params</span> <span class=\"token class-name\"><span class=\"token keyword\">object</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> postData<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n          <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n          request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Authorization\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Bearer \"</span> <span class=\"token operator\">+</span> AuthToken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// ↓追記(25行目あたり)</span>\n          request<span class=\"token punctuation\">.</span>Headers<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"RhinoComputeKey\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"実行環境構築で設定したApiKeyを入れる\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// ↑追記</span>\n          request<span class=\"token punctuation\">.</span>Method <span class=\"token operator\">=</span> <span class=\"token string\">\"POST\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token range operator\">..</span><span class=\"token punctuation\">.</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>AuthToken の設定</h3>\n<p>”実行環境構築”の個所で入力した RhinoToken を compute.rhino3d-samples/samples/RhinoCompute フォルダ内にある AuthToken.cs の以下の位置に入れてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">namespace</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Compute</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">AuthToken</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> Get <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>String<span class=\"token punctuation\">.</span>IsNullOrEmpty <span class=\"token punctuation\">(</span>tokenFromEnv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> tokenFromEnv<span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n          <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"ここにRhinoTokenいれる\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token range operator\">..</span><span class=\"token range operator\">..</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>実行！</h3>\n<p>Sample フォルダ内の各サンプルを実行し、うまく動作しているならば bin/Debug フォルダ内に各サンプルに応じたファイルが作成されます。\n例えば BrepBooleanOperation では、cube<em>sphere</em>difference.obj、cube<em>sphere</em>intersection.obj、cube<em>sphere</em>union.obj の三つが作成されます。</p>\n<p>cube<em>sphere</em>difference.obj では brep のメッシュ化とブーリアン演算をおこなった結果として以下のようなになっています。この機能のどちらも高級な関数を使うため Compute.Rhino3d でないとできない処理です。</p>\n<p><img src=\"https://storage.googleapis.com/zenn-user-upload/q4908ig96mxxu4es1yy3k95lm2ee\"></p>\n<h2>ちなみに</h2>\n<p>結局ローカルの RhinoAPI と RhinoCompute 何が違うの？というのはここを見るとわかるかもしれません。</p>\n<p><a href=\"https://discourse.mcneel.com/t/please-explain-local-rhino-api-vs-rhino-compute/108991?u=hiron\">Please Explain Local Rhino API vs Rhino Compute</a></p>\n<h2>Next Step</h2>\n<p>今回は C#環境での実行でしたが、Python や JavaScript の Compute.Rhino3d もあるので自分のやりたいことに合った言語を使って、Compute.Rhino3d を満喫しましょう。</p>\n<p>js は 冒頭で紹介した参考例を作成する以下のチュートリアルがおすすめです。</p>\n<p><a href=\"https://github.com/mcneel/compute.rhino3d.appserver\">compute.rhino3d.appserver</a></p>\n<p><a href=\"https://vimeo.com/442079095\">2020 Digital Evolution Pre-Lab Workshop: Hosted by Steve Baer of McNeel</a></p>\n<h2>まとめ</h2>\n<p>この記事では、AWS での Compute.Rhino3d の使い方について解説しました。AWS 上で Rhino の高級な関数が実行できることはとても魅力的ではないでしょうか。\n計算自体はサーバーで行うため、スマフォのような端末でも Rhino の幾何計算の結果を取得できるのが面白いところだと思っています。</p>\n<p>あなたも AWS、そして Compute.Rhino3d への重課金でのパケ死に気を付けてクラウドな Rhinoceros を楽しみましょう！！！</p>","excerpt":"はじめに Amazon Elastic Compute Cloud(EC2)で Compute.Rhino3d の始める方法についての記事です。RhinoCompute ともいうみたいで、何が Compute.Rhino3d で何が RhinoCompute なのかよくわからないです。 Compute.Rhino3d…","frontmatter":{"date":"02 October, 2020","path":"/articles/start-compute-rhino-in-aws","title":"AWS でできる！ クラウドでのジオメトリ計算サービス Compute.Rhino3d の始め方","article_tags":["AWS","RhinoCompute","Zenn"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/zenn/start-compute-rhino-in-aws/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}