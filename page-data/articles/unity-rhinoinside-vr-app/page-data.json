{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/unity-rhinoinside-vr-app","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>この記事は Rhino7(2019/7 現在 WIP 版)に向けて開発されている、RhinoInside をつかって、Unity から Rhino の機能を呼び出して VR の中で形をいじることができるアプリの作り方について説明していきます。\n　そもそも Rhino とは何かというと、NURBS モデリングに特化した商用の製造業向け 3 次元 CAD ソフトウェア（3D サーフェスモデラー）で、その中のジオメトリの計算機能を SDK から呼び出して Rhino 以外のソフトからでも使えるようになったのが RhinoInside です。</p>\n<h2>完成品</h2>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">RhinoInsideを使ったVRアプリできました～<br>exeファイルを起動してUnityのロゴが出た後、一瞬でる画面が裏のRhinoを起動している瞬間です。<br>機能はこれまでと同じで球で曲面を動かすだけです…<br>RhinoWIPとSteamVRが使用できる環境にある数少ない人たちしか使えない誰得アプリ<a href=\"https://twitter.com/hashtag/rhinoinside?src=hash&amp;ref_src=twsrc%5Etfw\">#rhinoinside</a> <a href=\"https://twitter.com/hashtag/Unity?src=hash&amp;ref_src=twsrc%5Etfw\">#Unity</a> <a href=\"https://t.co/a0w6ZVYpCQ\">pic.twitter.com/a0w6ZVYpCQ</a></p>&mdash; hiron (@hiron_rgkr) <a href=\"https://twitter.com/hiron_rgkr/status/1154027787067351040?ref_src=twsrc%5Etfw\">July 24, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h2>RhinoInside Unity のサンプルさわるまでのやり方</h2>\n<p>まず RhinoInside を Unity で使えるようにします。やり方は公式の GitHub に掲載の通りですが、README の内容をざっくり説明します。</p>\n<h3>必要なもの</h3>\n<ol>\n<li>GIT のクライアント(<a href=\"https://git-scm.com/downloads\">ダウンロード</a>)</li>\n<li>RhinoWIP(<a href=\"https://www.rhino3d.com/download/rhino/wip\">ダウンロード</a>)(Rhino のライセンスを持っていないと使えません)</li>\n<li>Unity(<a href=\"https://unity3d.com/jp/get-unity/download\">ダウンロード</a>)</li>\n</ol>\n<h3>公式 GitHub を参考にやり方</h3>\n<p>公式 GitHub の README では Unity のバージョンは 2018.3 ですが、私の Unity の環境は後述の steamVR の使い方がよくわかなかったので、2017.4 です。</p>\n<p>RhinoInside は GitHub にあるので、コマンドラインから</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">git clone --recursive https://GitHub.com/mcneel/rhino.inside.git rhino.inside`</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>をして、GitHub のものをクローンするか、以下のように GitHub からそのまま ZIP ファイルでダウンロードして下さい。</p>\n<p><img src=\"https://1.bp.blogspot.com/-6FrJTWdsyhY/XT2k2N0L9kI/AAAAAAAABqE/_Egd3lT3aLwAbBKyENKsKrIMBUNmKCPXwCLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"GitHubからそのままZIPファイルでダウンロード\"></p>\n<p>その後、Unity からダウンロードしたフォルダの中の Rhino.Inside/Unity/Sample1 のプロジェクトを開きます。サンプルの操作は、GitHub の README の説明が動画になっているいてわかりやすいと思いますのでそちらをどうぞ。<br>\nUnity の menubar の Sample1 から CreateLoftSurface をやると Unity の Scene の画面に Loft された Surface が表示されます。この LoftSurface の作成に RhinoInside が使われています。</p>\n<h2>VR でアバターを動かす環境整理</h2>\n<p>次に VR 側の話です。こちらはあきら(@sh_akira)さんの Qiita の記事を を参考にやりました。詳細はそちらを見てください。</p>\n<ul>\n<li><a href=\"https://qiita.com/sh_akira/items/81fca69d6f34a42d261c\">UniVRM + SteamVR+Final IK で始める </a></li>\n</ul>\n<h3>必要なもの</h3>\n<ol>\n<li>HTC Vive</li>\n<li>VR Ready PC</li>\n<li>UniVRM</li>\n<li>SteamVR plugin 2.0.1（リンク先のあきらさんの記事にあるように私の環境でもうまくいかなかったので、ver2.0.1 を使っています）</li>\n<li>Final IK （こちらは有料なので、注意）</li>\n<li>OVRLipSync（リップシンクはうまくいかなかったので、使ってないです）</li>\n<li>AniLipSync-VRM（リップシンクはうまくいかなかったので、使ってないです）</li>\n<li>VRM モデル（今回は<a href=\"https://3d.nicovideo.jp/alicia/\">アリシアソリッドちゃん</a>を使ってます。）</li>\n</ol>\n<h2>RhinoInside を VR でいじれるようにしていく</h2>\n<p>まず現状の Unity の状態の確認です。上記に 2 つをやると以下の画像のような感じの Scene になっているはずです。左下があきらさんの記事をもとにやった VR の環境、右上が RhinoInside の Sample1 をやって、LoftSurface を作ったものになっています。（LoftSurface は自分でデバックしやすいように場所を少しうつしています。）</p>\n<p><img src=\"https://1.bp.blogspot.com/-QMEm9FExfUo/XT2zuChpCRI/AAAAAAAABqQ/3l_s5UfYjjQ2pUCVgbpHwnRzVyKNXQQiACLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"一通りやった感じ\"></p>\n<p>後はあきらさんの記事から変えた点について説明していきます。基本的にはそのままで、リップシンクだけエラーがでてうまくいかなかったので、使っていないです。</p>\n<h3>VR で制御点をいじれるようにする</h3>\n<p>ここから VR でインタラクションするための設定についてです。SteamVR plugin にはインタラクションするための機能がついています。例えば物をつかむとか、対象先にテレポートするとかです。\n　今回は Rhino の LoftSurface の制御点（画面中青い球）を VR からインタラクトすることを考えます。やり方は簡単で、対象とする sphere に Add Component で Throwable を追加します。</p>\n<p><img src=\"https://1.bp.blogspot.com/-IzwnKcbdV1A/XT22Fk-qjgI/AAAAAAAABqc/TgtL-vrdu70t0J6Xg4P7B9_W4nf4_4iMgCLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"Throwable を追加\"></p>\n<p>Throwable を追加すると必要なコンポーネントも同時に追加されます。</p>\n<p><img src=\"https://1.bp.blogspot.com/-odxpR4blBRo/XT24u4FXpcI/AAAAAAAABq8/Njmrl7tx3sglHpDdk9d9gjYel69JPIYnQCLcBGAs/s640/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"必要なコンポーネントも同時に追加\"></p>\n<p>Rigidbody の中で、UseGravity の項目（画像の赤線部）がありますが false にしています。True にしておくと物理演算で重力適用されるので、Play モードにするとそのまま球が落ちていきます。\n　次につかんで離した後の挙動ですが、Throwable の名前の通りデフォルトでは投げる（はなした時の手の速度で飛んでいく）設定になっています。（青下線部）これを選択で「NoChange」にすると話した点で止まるようになります。\n　これらの設定をすれば、VR 内で設定した球がつかめるようになります。</p>\n<h3>親子関係の維持</h3>\n<p>Sphere をつかめるようになりましたが、このままだと RhinoInside でうまくジオメトリの計算をしてくれません。\n　この Sample1 で作成される LoftSurface は、親（オブジェクト名 LoftSurface）の、子になっているオブジェクト（ここでは Sphere）を制御点として形状をコントロールしています。しかし今の設定のままでは、Play モード中に物をつかむとこの親子関係が崩れてしまい、つかんだものが親から離れてしまいます。\n　そこで、親子関係を維持するコンポーネントを追加します。Asset を右クリックして Create→C#Script で新たに C#のスクリプトを作成します。</p>\n<p><img src=\"https://1.bp.blogspot.com/-cgEBDno9520/XT27ngbsaJI/AAAAAAAABrI/01uHaFvCjjAp-Cxe90r06cDKS7rQWZgYgCLcBGAs/s400/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"Create→C#Script\"></p>\n<p>作成した C#スクリプトは以下です。Unity で作った C#スクリプトの Updata のところに以下を追加してください。ただ毎フレームごとに Loft Surface というオブジェクトの子にしているだけです。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Parent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Update <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    transform<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span>Find <span class=\"token punctuation\">(</span><span class=\"token string\">\"Loft Surface\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これを対象の Sphere に追加すれば、つかんで親子関係が外れても、すぐに LoftSurface の子に戻ります。とりあえず動くものにしているだけなので、このままだと実は問題がありますが許してください。ちなみに問題点は以下です。</p>\n<ul>\n<li>親に対して子として一番下に追加されるだけなので、子の中の順番が維持されない。（制御点の順番にも意味があるのでこの順番がずれると形がおかしくなる）</li>\n<li>1 フレームごとに呼び出される void Update() の部分にそのまま書いているので、つかんでも 1 フレームごとに手から離れてしまう。</li>\n</ul>\n<p>解決策はわかっていて、1 つ目であれば、親子関係の順番を記録してその順番で子にすればよく、2 つ目であればつかんでいる状態を判定してそれが True なら親子関係をもどすスクリプトを動かさなければよいだけです。そのうち作ります…\n　記事の一番の動画で私が操作しているものは、親子関係で最初から一番下のもの投げているだけなので、サーフェスの形状が崩れず一見手に追従して形状が変化しているように見えてます。</p>\n<h2>VR アプリとして出力する</h2>\n<p>次にアプリとして出力する方法についてです。初めに、以下の作業をする前に、これより上の作業を完了しておいてください。出力用にいくつかの C#のスクリプトをいじったりするので、上の操作が終わっていないとうまく動かなくなる可能性があります。</p>\n<h3>とりあえず Build してみる</h3>\n<p>Unity の File メニューから Build Settings...を選び Build を行います。ですがこのままだとエラーで出力がされません。Build するものの中で、Unity のエディタの UI そのものをいじるものがあるとエラーになります。（出力するアプリは Unity ではないので、Unity の UI をいじるものがあるのはおかしい）</p>\n<h3>UnityEditor 関連をなくしていく</h3>\n<p>そこで、UnityEditor に関係するものを修正してい行きます。まずは Standard Assets/RhinoInside の Unity のファイルを以下のように</p>\n<ul>\n<li>Using UnityEditor</li>\n<li>[InitializeOnLoad]</li>\n</ul>\n<p>の二つをコメントアウトします。</p>\n<p><img src=\"https://1.bp.blogspot.com/-k8JEJk3uAHE/XT2_pd5OgTI/AAAAAAAABrU/EMwGchD7Ii4N1AZYL2WZB7tJGUeZnKpkQCLcBGAs/s400/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"Assets/RhinoInside/Unity\"></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// using UnityEditor;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InProcess</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">RhinoInside<span class=\"token punctuation\">.</span>Unity</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// [InitializeOnLoad]</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Startup</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>同じく Standard Assets/RhinoInside の中にある UI ファイルを Assets の下に Editor というフォルダを作ってそちらに移します。直下の Editor のフォルダにあるものは Build の際に読み込まれない個所になっているそうです。ちなみにこの UI は Unity の menubar に Grasshopper を追加したりしているだけで本当に UI を操作しているだけのものです。</p>\n<p><img src=\"https://1.bp.blogspot.com/-Lro828i1vs4/XT3GXCbuWPI/AAAAAAAABrg/k-h8DHTZN0sEvijUYiEF6_ZZdrM9Mo1IQCLcBGAs/s400/%25E3%2582%25AD%25E3%2583%25A3%25E3%2583%2597%25E3%2583%2581%25E3%2583%25A3.PNG\" alt=\"UIファイル移動\"></p>\n<p>次に実際に LoftSurface を操作している LoftSurfaces.cs ファイルをいじります。変更点は以下</p>\n<ol>\n<li>UnityEditor にかかわるものをコメントアウト</li>\n<li>void Start() 内に Rhino を起動させ、ウインドウを最小化させる部分を追加</li>\n</ol>\n<p>変更した個所を抜粋した C#スクリプトは以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InProcess</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// using UnityEditor;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">RhinoInside<span class=\"token punctuation\">.</span>Unity<span class=\"token punctuation\">.</span>Sample1</span>\n<span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// [InitializeOnLoad]</span>\n  <span class=\"token comment\">// [ExecuteInEditMode]</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoftSurface</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// [MenuItem(\"RhinoInside/Create Loft Surface\")]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> surface <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loft Surface\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      surface<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoftSurface<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">   <span class=\"token keyword\">const</span> <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> VCount <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">//ここを追加 ---------------------</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> RhinoSystemDir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetFolderPath</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>SpecialFolder<span class=\"token punctuation\">.</span>ProgramFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rhino WIP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> isLoaded <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>RhinoSystemDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> PATH <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">,</span> PATH <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> RhinoSystemDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RhinoCore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"/scheme=Unity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nosplash\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> WindowStyle<span class=\"token punctuation\">.</span>Minimized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//ここを追加 ---------------------</span>\n\n      gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Material</span><span class=\"token punctuation\">(</span>Shader<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Standard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">{</span>\n        color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n      gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで Build すれば UnityEditor に関するエラーが出なくなるはずです。\n　無事 Build が完了して出力先の.exe ファイルを起動すれば RhinoInside を使った VR アプリが起動するはずです。</p>\n<h2>完成！</h2>\n<p>冒頭の完成品を再掲です。</p>\n<p><img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/270439/ec5c4e11-d4aa-81e9-1765-c72aa3460f1b.gif\" alt=\"RIUApp.gif\"></p>\n<p>今後は、中でもうちょっと動けるようにしたりだとか、上記であったつかんだ際の親子関係の問題とかを直していければと思ってます。</p>\n<h1>ライセンス</h1>\n<p>この記事内でいじっている RhinoInside 関係のコードは<a href=\"https://GitHub.com/mcneel/rhino.inside/blob/master/LICENSE\">MIT ライセンス</a>です。プラグインについては各ライセンスに従ってください。</p>","excerpt":"はじめに この記事は Rhino7(2019/7 現在 WIP 版)に向けて開発されている、RhinoInside をつかって、Unity から Rhino の機能を呼び出して VR の中で形をいじることができるアプリの作り方について説明していきます。\n　そもそも Rhino とは何かというと、NURBS…","frontmatter":{"date":"04 August, 2019","path":"/articles/unity-rhinoinside-vr-app","title":"Unity で RhinoInside を使って VR アプリを作ってみる","article_tags":["CSharp","Unity","Rhinoceros","SteamVR","Qiita"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/qiita/unity-rhinoinside-vr-app/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}