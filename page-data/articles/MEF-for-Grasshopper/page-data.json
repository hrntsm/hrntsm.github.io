{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/MEF-for-Grasshopper","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>Grasshopper コンポーネント開発をするとき、ビルドするたびに Rhino を再起動するのが面倒に感じたことはありませんか。</p>\n<p>Rhino を再起動することなくビルドし直した内容を反映する方法として、Managed Extensibility Framework (MEF)を使った Grasshopper コンポーネントの開発について紹介します。</p>\n<h2>MEF について</h2>\n<p>以下 MicroSoft の <a href=\"https://docs.microsoft.com/ja-jp/dotnet/framework/mef/\">ドキュメント</a> より引用。</p>\n<blockquote>\n<p><em>Managed Extensibility Framework (MEF) は、軽量で拡張可能なアプリケーションを作成するためのライブラリです。</em>\n<em>これにより、アプリケーション開発者は、拡張機能を見つけたら、それをそのまま使用できます。</em>\n<em>構成は必要ありません。</em>\n<em>拡張機能の開発者は、コードを簡単にカプセル化できるため、ハードコーディングによる脆弱な依存関係を回避できます。</em>\n<em>MEF により、アプリケーション内だけでなく、アプリケーション間でも拡張機能を再利用できます。</em></p>\n</blockquote>\n<p>例えば Excel や Word などの製品は全てアドオンを使って機能拡張を行うことができるようになっています。\nこういった拡張性のあるアプリケーションを作ろうとしたときに必要となるであろう機能セットを提供しているものが MEF になります。\n実際どのような機能を提供しているかというと、一般的に DI コンテナと呼ばれる機能になります。</p>\n<p>細かい詳細は以下の記事が詳しいので参考にしてください。</p>\n<ul>\n<li><a href=\"https://blog.okazuki.jp/entry/20110507/1304772329\">Managed Extensibility Framework 入門 まとめ</a></li>\n</ul>\n<p>この内容を始める前に、上記記事のその１「はじめに」をやることをおすすめします。</p>\n<h2>Grasshopper での MEF の利用</h2>\n<p>ここで紹介する方法は、Rhino コマンドで MEF を使っている以下の記事を Grasshopper 向けにしたものとなります。参照している記事が 5 年前のものなので、最新の .NET 向けへの書き換えも含まれています。</p>\n<ul>\n<li><a href=\"https://www.codeproject.com/Articles/1091178/Managed-Extensibility-Framework-MEF-Plugin-for-Rhi\">Managed Extensibility Framework (MEF) Plugin for Rhinoceros RhinoCommon</a></li>\n</ul>\n<p>本内容と若干異なりますが、作成例として以下にデータをあげていますので必要に応じて参照してください。</p>\n<ul>\n<li><a href=\"https://github.com/hrntsm/MEF-for-Grasshopper-Plugin\">hrntsm/MEF-for-Grasshopper-Plugin</a></li>\n</ul>\n<h3>通常の Grasshopper コンポーネントの作成</h3>\n<p>まずはもととなる単純に文字列を出力する Grasshopper コンポーネントを作成します。\nVisualStudio の Grasshopper コンポーネントのテンプレートなどを試用して作成してください。</p>\n<p>後に MEF 関連のコードを追加するので以下のようなフォルダ構成にすることをおすすめします。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">GrasshopperMEF\n  │ GrasshopperMEF.sln\n  └─PluginLoader\n      PluginLoader.csproj\n      PluginLoaderComponent.cs\n      PluginLoaderInfo.cs</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>PluginLoaderComponent.cs の中身は以下のように入力されたテキストを逆順にして返すだけのものにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Grasshopper<span class=\"token punctuation\">.</span>Kernel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginLoader</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PluginLoaderComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GH_Component</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">PluginLoaderComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TAEC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MEF\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rev\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rev text\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> util <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Util</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rev <span class=\"token operator\">=</span> util<span class=\"token punctuation\">.</span><span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Bitmap</span> Icon <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Guid</span> ComponentGuid <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Guid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PLEASE SET GUID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Util</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>当然ですが、Rhino が起動している中でこのコンポーネントをビルドし直しても、それが反映されません。<br>\nUtil クラスへの依存性を後から注入にできるようにこれから書き換えていきます。</p>\n<h3>別プロジェクトとして書き換え</h3>\n<p>別のビルドとして上記 Util クラスを扱えるようにするため、別のプロジェクトに分離します。クラスライブラリとして作成してください。ターゲットフレームワークは Grasshopper のものと合わせて .NET Framework 4.8 にしてください。</p>\n<p>フォルダ構成としては以下になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">GrasshopperMEF\n  │ GrasshopperMEF.sln\n  ├─PluginLoader\n  │   PluginLoader.csproj\n  │   PluginLoaderComponent.cs\n  │   PluginLoaderInfo.cs\n  └─PluginUtil  ← 追加\n      PluginUtil.csproj\n      PluginUtil.cs</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>この PluginUtil の内容をコンポーネントで使えるようにするため、PluginLoader が PluginUtil.csproj をプロジェクト参照するようにしてください。</p>\n<p>プロジェクト参照できていれば、PluginLoaderComponent.cs は冒頭に以下を追加すれば PluginUtil が使えるようになります。</p>\n<p><strong>PluginLoaderComponent.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Grasshopper<span class=\"token punctuation\">.</span>Kernel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 追加</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">PluginUtil</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginLoader</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PluginLoaderComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GH_Component</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token function\">PluginLoaderComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TAEC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MEF\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 省略</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 以下は PluginUtil のものを使うため、コメントアウトする</span>\n    <span class=\"token comment\">// public class Util</span>\n    <span class=\"token comment\">// {</span>\n    <span class=\"token comment\">//     public string RevText(string text)</span>\n    <span class=\"token comment\">//     {</span>\n    <span class=\"token comment\">//         return new string(text.Reverse().ToArray());</span>\n    <span class=\"token comment\">//     }</span>\n    <span class=\"token comment\">// }</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>PluginUtil.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginUtil</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Util</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで、Grasshopper コンポーネントとテキストを逆転させる関数の依存関係が変化しました。</p>\n<p>PluginLoader/bin のフォルダを確認すると以下のような構成になっており、PluginUtil.dll が含まれていることがわかります。\n最初は gha ファイル単体で完結していたものが、PluginUtil.dll を読み込みその中の RevText メソッドを使う形に変わっています。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">PluginLoader\n└─bin\n   └─Debug\n      └─net48\n         PluginLoader.gha\n         PluginUtil.dll</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>MEF を使う形へ書き換え</h3>\n<p>依存性を注入する際に共通のインターフェースの必要があるため、まずインターフェース用のプロジェクトを作成します。内容はインターフェースを定義するだけです。</p>\n<p>フォルダの構成は以下のようになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-text line-numbers\"><code class=\"language-text\">GrasshopperMEF\n  │ GrasshopperMEF.sln\n  ├─PluginContract ← 追加\n  │   PluginContract.cs\n  │   PluginContract.csproj\n  ├─PluginLoader\n  └─PluginUtil</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p><strong>PluginContract.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginContract</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">IPlugin</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>インターフェースを使うために、PluginContract.csproj を PluginLoader.csproj と PluginUtil.csproj がプロジェクト参照するようにしましょう。</p>\n<p>また、今後 MEF を使って PluginLoader と PluginUtil を関連付けるため、この PluginLoader の PluginUtil へのプロジェクト参照を解除してください。</p>\n<p>MEF は System.ComponentModel.Composition を使用します。Nuget を使って使用できるようにしておいてください。</p>\n<ul>\n<li><a href=\"https://www.nuget.org/packages/System.ComponentModel.Composition/\">nuget/System.ComponentModel.Composition</a></li>\n</ul>\n<p>まず、DI の対象としてエクスポートされるように、PluginUtil を以下のように変更します。</p>\n<p><strong>PluginUtil.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Linq</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 追加</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">PluginContract</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Composition</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginUtil</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Export</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IPlugin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// IPlugin 型として Export するように属性を追加</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Util</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">IPlugin</span></span> <span class=\"token comment\">// IPlugin を継承する</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">string</span></span> <span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span></span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">.</span><span class=\"token function\">Reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>次にこのクラスを MEF を使って Grasshopper コンポーネントに依存性を注入できるようにします。</p>\n<p><strong>PluginLoader.cs</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Grasshopper<span class=\"token punctuation\">.</span>Kernel</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 追加</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">PluginContract</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Reflection</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Composition</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>ComponentModel<span class=\"token punctuation\">.</span>Composition<span class=\"token punctuation\">.</span>Hosting</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token namespace\">PluginLoader</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PluginLoaderComponent</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GH_Component</span></span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// DI で注入できるように IPlugin 型でインポートするように設定</span>\n        <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">Import</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span><span class=\"token type-expression class-name\">IPlugin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">IPlugin</span> plugin<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token function\">PluginLoaderComponent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Loader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"PluginLoader\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"TAEC\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"MEF\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterInputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_InputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// dll の path を入れる InputParams を追加</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"path\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"DLL path\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">RegisterOutputParams</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_OutputParamManager</span> pManager<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            pManager<span class=\"token punctuation\">.</span><span class=\"token function\">AddTextParameter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"rev\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"rev text\"</span><span class=\"token punctuation\">,</span> GH_ParamAccess<span class=\"token punctuation\">.</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SolveInstance</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_DataAccess</span> DA<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> path <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> text <span class=\"token operator\">=</span> <span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span>Empty<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>DA<span class=\"token punctuation\">.</span><span class=\"token function\">GetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// DI 用にカタログ、コンテナを作って、plugin に依存性を注入</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> catalog <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AggregateCatalog</span><span class=\"token punctuation\">(</span>\n                <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">AssemblyCatalog</span><span class=\"token punctuation\">(</span>Assembly<span class=\"token punctuation\">.</span><span class=\"token function\">Load</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>IO<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">.</span><span class=\"token function\">ReadAllBytes</span><span class=\"token punctuation\">(</span>path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">CompositionContainer</span><span class=\"token punctuation\">(</span>catalog<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            container<span class=\"token punctuation\">.</span><span class=\"token function\">ComposeParts</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// plugin を使って RevText メソッドが使える</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> rev <span class=\"token operator\">=</span> plugin<span class=\"token punctuation\">.</span><span class=\"token function\">RevText</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            catalog<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            container<span class=\"token punctuation\">.</span><span class=\"token function\">Dispose</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            DA<span class=\"token punctuation\">.</span><span class=\"token function\">SetData</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">protected</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">System<span class=\"token punctuation\">.</span>Drawing<span class=\"token punctuation\">.</span>Bitmap</span> Icon <span class=\"token operator\">=></span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">Guid</span> ComponentGuid <span class=\"token operator\">=></span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Guid</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PLEASE SET GUID\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで、Grasshopper を起動して Path のインプットにビルドした PluginUtil.dll へのパスを入れると dll の内容を読み取って依存性を注入してくれます。</p>\n<p>Rhino を起動したままにした状態で、PluginUtil.cs の内容を書き換えます。\nそして、PluginUtil.csproj を再ビルドし、Grasshopper を再実行すると変更した内容が反映されます。</p>\n<p>ソリューション全体をビルドし直してしまうと、 .gha ファイルは Rhino で使われているのでエラーになります。PluginUtil.csproj のみビルドしてください。</p>\n<p>ちなみに MEF で注入した DLL ファイルはデバッグビルドしていれば VisualStudio を使ったデバッグの対象になります。デバッグが必要な場合は適宜ブレークポイントを設置して確認してください。</p>\n<p>これで MEF を使って Grasshopper コンポーネント開発の紹介は終わりです。</p>","excerpt":"はじめに Grasshopper コンポーネント開発をするとき、ビルドするたびに Rhino を再起動するのが面倒に感じたことはありませんか。 Rhino を再起動することなくビルドし直した内容を反映する方法として、Managed Extensibility Framework (MEF…","frontmatter":{"date":"05 September, 2021","path":"/articles/MEF-for-Grasshopper","title":"Managed Extensibility Framework を使った Grasshopperコンポーネント開発","article_tags":["CSharp","Grasshopper","DI"]},"fields":{"readingTime":{"text":"4 min read"},"slug":"/MEF-for-Grasshopper/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}