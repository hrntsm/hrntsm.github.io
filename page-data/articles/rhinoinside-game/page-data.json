{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/rhinoinside-game","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>これは 2020/07/04 に行われた<a href=\"https://www.meetup.com/ja-JP/Tokyo-AEC-Industry-Dev-Group/\">Tokyo AEC Industry Dev Group</a> でのハンズオンをもとにした資料になります。\nRhinoInside と Unity を使ったボールをゴールへ運ぶゲームのつくり方になります。\n参考のデータはこちらの GitHub のリポジトリにあります。</p>\n<ul>\n<li><a href=\"https://github.com/hrntsm/RhinoInsideGame\">RhinoInsideGame</a></li>\n</ul>\n<p>そもそも RhinoInside とは？という方は<a href=\"https://qiita.com/hiron_rgkr/items/ba00b7ae75068a54ff20\">こちら</a>を参照してください。\nRhinoceros という 3DCAD ソフトの機能をほかのソフトで利用する仕組みになります。</p>\n<h2>完成品のイメージ</h2>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/RIUGame.gif\"></p>\n<h2>実際に作っていきましょう！！</h2>\n<h2>0. 環境構築</h2>\n<ul>\n<li>\n<p>RhinoInside のリポをクローンしておく（いくつかのファイルを使う）</p>\n<ul>\n<li><a href=\"https://github.com/mcneel/rhino.inside\">ここ</a>からクローン or ダウンロード</li>\n</ul>\n</li>\n<li>\n<p>RhinoWIP</p>\n<ul>\n<li><a href=\"https://www.rhino3d.com/download/rhino/wip\">ここ</a>からダウンロード</li>\n</ul>\n</li>\n<li>\n<p>Unity2019.4.1.f1</p>\n<ul>\n<li><a href=\"https://unity3d.com/jp/get-unity/download\">ここ</a>からダウンロード</li>\n</ul>\n</li>\n<li>\n<p>Rider2020.1 (スクリプトエディタ)</p>\n<ul>\n<li>コードを書くエディタです。VisualStudio や VSCode などでもよいです。</li>\n<li>Unity 関連のデータをダウンロードをしておいてください。</li>\n<li>\n<p>Rider の場合</p>\n<ul>\n<li>特に追加でダウンロードするものはないです</li>\n</ul>\n</li>\n<li>\n<p>Visual Studio の場合</p>\n<ul>\n<li>Visual Studio Installer から以下の Unity に関するものをインストール\n<img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/VS_Unity.png\"></li>\n</ul>\n</li>\n<li>\n<p>VS Code の場合</p>\n<ul>\n<li>Extensions から Debugger for Unity をインストール</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/VSC_Unity.png\"></p>\n</li>\n<li>\n<p>エディタの設定は Unity の以下から設定</p>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/EditorSettings.png\"></p>\n</li>\n</ul>\n</li>\n</ul>\n<h2>1. Unity で Rhino を使う</h2>\n<h3>1.1 RhinoInside を起動できるようにする</h3>\n<ul>\n<li>Asset 下に Scripts という名前のフォルダを作成してそこに\"Convert.cs\"を入れる。\"LoftSurface.cs\"を作る</li>\n<li>\n<p>Asset 下に Plugins という名前のフォルダを作成してそこに\"RhinoCommon.dll\"を入れる。</p>\n<ul>\n<li>Convert.cs、RhinoCommon.dll はクローンしたリポの中に入っています。</li>\n</ul>\n</li>\n<li>\n<p>Asset 下に Editor というフォルダを作成して、\"RhinoInsideUI.cs\"を作る</p>\n<ul>\n<li>Editor という名前のフォルダ名は特殊な扱いを受けるのでフォルダ名は間違えないで入れてください。</li>\n</ul>\n</li>\n<li>以下を書いて、エディタから Rhino を起動してみる</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InProcess</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">ExecuteInEditMode</span></span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RhinoInsideUI</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rhino/Start RhinoInside\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartRhinoInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> rhinoSystemDir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetFolderPath</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>SpecialFolder<span class=\"token punctuation\">.</span>ProgramFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rhino WIP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> path <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">,</span> path <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> rhinoSystemDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RhinoCore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"/scheme=Unity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nosplash\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> WindowStyle<span class=\"token punctuation\">.</span>Minimized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>1.2 Rhino で Surface を作る</h3>\n<ul>\n<li>\n<p>ロフトサーフェスを作る</p>\n<ul>\n<li>まずは Rhino 内で作ってみる。</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/loftsurf.png\"></p>\n</li>\n</ul>\n<h3>1.3 RhinoInside で Surface を作る</h3>\n<ul>\n<li>\n<p>次に RhinoInside を使って作ってみる。</p>\n<ul>\n<li>コントロールポイントをまず作る</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RhinoInsideUI</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">StartRhinoInside</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 省略</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">MenuItem</span><span class=\"token attribute-arguments\"><span class=\"token punctuation\">(</span><span class=\"token string\">\"Rhino/Create Loft Surface\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> surface <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">GameObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Loft Surface\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        surface<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>LoftSurface<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">CreateLoft</span><span class=\"token punctuation\">(</span>surface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateLoft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> surface<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        surface<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Surfaceの色の設定</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Material</span><span class=\"token punctuation\">(</span>Shader<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Standard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0f</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        surface<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> material<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 影を落とさないようにする</span>\n        surface<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>receiveShadows <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// コントロールポイントの色の設定</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cpMaterial <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Material</span><span class=\"token punctuation\">(</span>Shader<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Standard\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            color <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.2f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.8f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// コントロールポイントの作成</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">int</span></span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> num <span class=\"token operator\">=</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> i <span class=\"token operator\">+</span> j<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controlSphere <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">CreatePrimitive</span><span class=\"token punctuation\">(</span>PrimitiveType<span class=\"token punctuation\">.</span>Sphere<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                controlSphere<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"Sphere\"</span> <span class=\"token operator\">+</span> num<span class=\"token punctuation\">;</span>\n                controlSphere<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>parent <span class=\"token operator\">=</span> surface<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">;</span>\n                controlSphere<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>localScale <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                controlSphere<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Vector3</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">*</span> <span class=\"token number\">5f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">*</span> <span class=\"token number\">5f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                controlSphere<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshRenderer<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> cpMaterial<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>作ったコントロールポイントを使ってロフトサーフェスを作る</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>Collections<span class=\"token punctuation\">.</span>Generic</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Geometry</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEditor</span><span class=\"token punctuation\">;</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">if</span> UNITY_EDITOR</span>\n<span class=\"token punctuation\">[</span>ExecuteInEditMode<span class=\"token punctuation\">]</span>\n<span class=\"token preprocessor property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoftSurface</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controlPoints  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>Vector3<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>Vector3<span class=\"token punctuation\">></span></span> controlPointsRow <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">UnityEngine<span class=\"token punctuation\">.</span>Transform</span> controlSphere <span class=\"token keyword\">in</span> transform<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                controlPointsRow <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Vector3<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                controlPoints<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>controlPointsRow<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            controlPointsRow<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>controlSphere<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshFilter<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>mesh <span class=\"token operator\">=</span> <span class=\"token function\">CreateLoft</span><span class=\"token punctuation\">(</span>controlPoints<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\">UnityEngine<span class=\"token punctuation\">.</span>Mesh</span> <span class=\"token function\">CreateLoft</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List<span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>Vector3<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> controlPoints<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>controlPoints<span class=\"token punctuation\">.</span>Count <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> profileCurves <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>Curve<span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controlPointsRow <span class=\"token keyword\">in</span> controlPoints<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                profileCurves<span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>Curve<span class=\"token punctuation\">.</span><span class=\"token function\">CreateInterpolatedCurve</span><span class=\"token punctuation\">(</span>controlPointsRow<span class=\"token punctuation\">.</span><span class=\"token function\">ToRhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token class-name\">Brep</span> brep <span class=\"token operator\">=</span> Brep<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromLoft</span><span class=\"token punctuation\">(</span>profileCurves<span class=\"token punctuation\">,</span> Point3d<span class=\"token punctuation\">.</span>Unset<span class=\"token punctuation\">,</span>Point3d<span class=\"token punctuation\">.</span>Unset<span class=\"token punctuation\">,</span> LoftType<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>Mesh</span> mesh <span class=\"token operator\">=</span> Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>Mesh<span class=\"token punctuation\">.</span><span class=\"token function\">CreateFromBrep</span><span class=\"token punctuation\">(</span>brep<span class=\"token punctuation\">,</span> MeshingParameters<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> mesh<span class=\"token punctuation\">.</span><span class=\"token function\">ToHost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで\"Rhino/Start RhinoInside\" をした後に、\"Rhino/Create Loft Surface\"を押すとロフトサーフェスが作成されるはずです。</p>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/LoftSurface.png\"></p>\n<p>ここまでの内容は、part1 のフォルダのデータになっています。</p>\n<h3>1.4 Unity のデバッグの仕方</h3>\n<ul>\n<li>Unity にエディタをアタッチすることでデバッグできます</li>\n</ul>\n<p><strong>これで RhinoInside は終わり。あとは Unity のみになります。</strong></p>\n<hr>\n<h2>2. ゲーム化する</h2>\n<h3>2.1 ボールを弾ませる</h3>\n<ol>\n<li>Ball を作成する</li>\n<li>\n<p>play▶ してみる</p>\n<ul>\n<li>何も行らない…</li>\n</ul>\n</li>\n<li>\n<p>RigidBody をアタッチする</p>\n<ul>\n<li>重力で落ちていくが貫通する…</li>\n</ul>\n</li>\n<li>\n<p>LoftSurface に MeshCollider をアタッチする</p>\n<ul>\n<li>Ball が弾まない…</li>\n</ul>\n</li>\n<li>\n<p>Materials フォルダを作成してそこに PhysicMaterial を作成する。</p>\n<ul>\n<li>Bounces を任意の値にして、Ball と LoftSurface にアタッチする。</li>\n</ul>\n</li>\n<li>ボールが弾む！！</li>\n<li>\n<p>コントロールポイントを動かしてみる</p>\n<ul>\n<li>コライダーが反映されない…</li>\n</ul>\n</li>\n<li>\n<p>動的に MeshCollider をアタッチできるようにする。</p>\n<ul>\n<li>LoftSurface.cs に以下を追記</li>\n<li>アタッチされているゲームオブジェクトに MeshCollider があれば削除し、新しい MeshCollider を設定する SetMeshCollider メソッドを追加している</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LoftSurface</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">SetMeshCollider</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SetMeshCollider</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GameObject</span> obj<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">DestroyImmediate</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        obj<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">AddComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        obj<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>MeshCollider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">PhysicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SurfMaterial\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            bounciness <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span> <span class=\"token number\">1.0</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Update</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">SetMeshCollider</span><span class=\"token punctuation\">(</span>gameObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> controlPoints  <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">List<span class=\"token punctuation\">&lt;</span>List<span class=\"token punctuation\">&lt;</span>Vector3<span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 以下省略...</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2.2 ゲームオーバー時にゲームを再スタートできるようにする</h3>\n<ol>\n<li>SampleScene の名前を GameScene に変える</li>\n<li>\n<p>Cube を作成する</p>\n<ul>\n<li>名前を Respawn にする</li>\n</ul>\n</li>\n<li>\n<p>LoftSurface の下の方に適当な距離をとって、X と Z の Scale を 100 にする</p>\n<ul>\n<li>ここに当たらないと再スタートしないので、位置に注意</li>\n</ul>\n</li>\n<li>リスポンの判定に使うのみで、レンダーする必要なので MeshRenderer を非アクティブにする</li>\n<li>\n<p>Add Component で Respawn.cs を追加する。</p>\n<ul>\n<li>コライダーに入ってきたら実行するメソッド OnCollisionEnter を使う</li>\n<li>シーンを読み込む形で再スタートを実装する</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>SceneManagement</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Respawn</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCollisionEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collision</span> other<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2.3 ゴールを作る</h3>\n<ol>\n<li>\n<p>Cube で作成する</p>\n<ul>\n<li>名前を Goal にする</li>\n</ul>\n</li>\n<li>\n<p>ゴールにしたい個所に配置する</p>\n<ul>\n<li>スケールも好きな値に設定する</li>\n<li>単純にこれがゲームの難しさになるので注意</li>\n</ul>\n</li>\n<li>Add Component で Goal.cs を追加する。</li>\n<li>ゲームクリア時の画面を作成（次のところでまとめて作成するので後回し）</li>\n<li>\n<p>ゲームクリアなので Ball を消す</p>\n<ul>\n<li>SerializeField をつけるとエディタ上から値を設定できるようになる</li>\n<li>Ball をエディタ上で設定する</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Goal</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> ball<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCollisionEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collision</span> other<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    ball<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>2.4 現状の確認</h3>\n<p>ここまで作ると Unity はこんなになっているはずです</p>\n<p>![]<a href=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/GameScene.png\">https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/GameScene.png</a>)</p>\n<p>ここまでのデータは part2 のフォルダ に入っているものになっています</p>\n<hr>\n<h2>3. UI を作っていく</h2>\n<h3>3.1 クリア画面を作る</h3>\n<ol>\n<li>\n<p>Hierarchy で右クリックして、UI から Text を選ぶと Hierarchy に Canvas と EventSystem と Canvas の子に Text が作成される</p>\n<ul>\n<li>Canvas のサイズは Game ウインドウのサイズによるので注意してください</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/UI.png\"></p>\n</li>\n<li>Text にクリアを示す文字を入れる</li>\n<li>Panel を使って背景を入れる</li>\n<li>Panel の名前を GoalPanel にして、Text を子にする</li>\n<li>GoalPanel を非アクティブにする</li>\n<li>\n<p>2.3 で作成した Goal.cs に下記を追記して、Ball が Goal に入った時に GoalPanel をアクティブにして表示されるようにする</p>\n<ul>\n<li>エディタから GoalPanel をセットしておく</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Goal</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> ball<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> goalPanel<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 追加</span>\n  <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnTriggerEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collider</span> other<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    goalPanel<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 追加</span>\n    ball<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>3.2 リスポンの確認画面を作成する</h3>\n<ol>\n<li>3.1 と同様に Text と Panel を使って確認画面を作成する</li>\n<li>\n<p>2.2 で作成した Respawn.cs を以下のように書き換える</p>\n<ul>\n<li>Ball が Respawn の枠内に入ったらボールを消して、リスポン確認画面を表示させる</li>\n<li>Update では_retry が true かつ右クリックが押されたら GameScene をロードさせる</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Respawn</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> ball<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> respawn<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> _retry <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">OnCollisionEnter</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collision</span> other<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        respawn<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        ball<span class=\"token punctuation\">.</span><span class=\"token function\">SetActive</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        _retry <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Update <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>GetMouseButtonDown <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> _retry <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>3.3 コントロールポイントの座標をスライダーで変更できるようにする</h3>\n<ol>\n<li>UI から Slider を作成する</li>\n<li>Anchors を左の中央にする</li>\n<li>Slider の MinValue を-10、MaxValue を 10 にする</li>\n<li>MoveSphere.cs を作成して Slider にアタッチする</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MoveSphere</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">[</span><span class=\"token attribute\"><span class=\"token class-name\">SerializeField</span></span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> <span class=\"token class-name\">GameObject</span> sphere<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Slider</span> _slider<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      _slider <span class=\"token operator\">=</span> gameObject<span class=\"token punctuation\">.</span><span class=\"token generic-method\"><span class=\"token function\">GetComponent</span><span class=\"token generic class-name\"><span class=\"token punctuation\">&lt;</span>Slider<span class=\"token punctuation\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      _slider<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Move</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// gameobject.transform.position.y は値が変えられないのでいったんposを介して値を変える</span>\n      <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pos <span class=\"token operator\">=</span> sphere<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">;</span>\n      pos<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> _slider<span class=\"token punctuation\">.</span><span class=\"token keyword\">value</span><span class=\"token punctuation\">;</span>\n      sphere<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<ol start=\"5\">\n<li>sphere の部分に座標を操作したいコントロールポイントを設定する</li>\n<li>\n<p>Slider の On Value Changed を設定する</p>\n<ul>\n<li>ここで設定されたものはスライダーの値が変えられたときに呼ばれる</li>\n</ul>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/Slider.png\"></p>\n</li>\n<li>各コントロールポイントにスライダーを設定する</li>\n</ol>\n<h3>3.4 カメラを設定する</h3>\n<ol>\n<li>MainCamera を選択すると Scene のウインドウの中にカメラのビューが表示される</li>\n<li>\n<p>ゲーム画面にしたい、いい感じのアングルを設定する</p>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/Camera.png\"></p>\n</li>\n</ol>\n<h3>3.5 ゲームのスタート画面を作る</h3>\n<ol>\n<li>\n<p>Project ウインドウを右クリックして Create から Scene を作成する</p>\n<ul>\n<li>名前は TitleScene とする</li>\n</ul>\n</li>\n<li>Scene を TitleScene に切り替える</li>\n<li>\n<p>Respawn 画面などでやったように Title 画面を作成する</p>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/Title.png\"></p>\n</li>\n<li>\n<p>Create Empty から空の GameObject を作り、それに TitleSceneScript をアタッチする</p>\n<ul>\n<li>今は Unity エディタから RhinoInside を起動しているが、ビルドした単体のアプリとしても RhinoInside を起動できるようにしなければいけないので、Start に RhinoInside を起動する部分をかく</li>\n<li>Update には画面をクリックしたら先程まで作っていた GameScene がロードされるようにしている</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">using</span> <span class=\"token namespace\">System</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">System<span class=\"token punctuation\">.</span>IO</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">UnityEngine<span class=\"token punctuation\">.</span>SceneManagement</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token namespace\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>InProcess</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleSceneScript</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> RhinoSystemDir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetFolderPath</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>SpecialFolder<span class=\"token punctuation\">.</span>ProgramFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rhino WIP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> PATH <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">,</span> PATH <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> RhinoSystemDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    GC<span class=\"token punctuation\">.</span><span class=\"token function\">SuppressFinalize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RhinoCore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span> <span class=\"token string\">\"/scheme=Unity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nosplash\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> WindowStyle<span class=\"token punctuation\">.</span>Minimized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> Update <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>Input<span class=\"token punctuation\">.</span>GetMouseButtonDown <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      SceneManager<span class=\"token punctuation\">.</span><span class=\"token function\">LoadScene</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GameScene\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>4. ゲームとしてビルドする</h3>\n<ul>\n<li>File - Build Settings を開く</li>\n<li>Scene In Build で作成した 2 つのシーンを登録する</li>\n<li>Architecture は x86_64 にする（多分デフォルトでこのあたい）</li>\n<li>PlayerSettings から OtherSettings から ScriptingBackend を Mono、Api Compatibility Level を .Net 4.x にする</li>\n<li>Build する</li>\n<li>完成！！！！！</li>\n</ul>\n<h3>5. その他</h3>\n<ul>\n<li>\n<p>Build Setting で Build したものでもスクリプトのデバッグできる設定がある</p>\n<p><img src=\"https://raw.githubusercontent.com/hrntsm/RhinoInsideGame/master/images/BuildDebug.png\"></p>\n</li>\n<li>\n<p>起動時に RhinoInside の起動の待ちが気になる</p>\n<ul>\n<li>該当箇所を非同期処理に書き換える</li>\n<li>Task.Run を使って非同期化</li>\n<li>うまく CancellationToken を設定できてないので、強制終了しかできない…</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TitleSceneScript</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">MonoBehaviour</span></span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">string</span></span> RhinoSystemDir <span class=\"token operator\">=</span> Path<span class=\"token punctuation\">.</span><span class=\"token function\">Combine</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetFolderPath</span><span class=\"token punctuation\">(</span>Environment<span class=\"token punctuation\">.</span>SpecialFolder<span class=\"token punctuation\">.</span>ProgramFiles<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Rhino WIP\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"System\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> PATH <span class=\"token operator\">=</span> Environment<span class=\"token punctuation\">.</span><span class=\"token function\">GetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Environment<span class=\"token punctuation\">.</span><span class=\"token function\">SetEnvironmentVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PATH\"</span><span class=\"token punctuation\">,</span> PATH <span class=\"token operator\">+</span> <span class=\"token string\">\";\"</span> <span class=\"token operator\">+</span> RhinoSystemDir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Task<span class=\"token punctuation\">.</span><span class=\"token function\">Run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n           <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">RhinoCore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\"><span class=\"token keyword\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> <span class=\"token punctuation\">{</span><span class=\"token string\">\"/scheme=Unity\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"/nosplash\"</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> WindowStyle<span class=\"token punctuation\">.</span>Minimized<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2>まとめ</h2>\n<ul>\n<li>最終版は final version のものになっています。</li>\n<li>ほとんど Unity でしたが、うまく動きましたでしょうか。</li>\n<li>RhinoInside の部分は、RhinoInside のリポの Unity フォルダの sample1 のものを参考にしています。</li>\n</ul>","excerpt":"はじめに これは 2020/07/04 に行われたTokyo AEC Industry Dev Group でのハンズオンをもとにした資料になります。\nRhinoInside と Unity を使ったボールをゴールへ運ぶゲームのつくり方になります。\n参考のデータはこちらの GitHub…","frontmatter":{"date":"04 July, 2020","path":"/articles/rhinoinside-game","title":"RhinoInside と Unity を使ったゲーム作り","article_tags":["Unity","RhinoInside","Qiita"]},"fields":{"readingTime":{"text":"7 min read"},"slug":"/qiita/rhinoinside-game/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}