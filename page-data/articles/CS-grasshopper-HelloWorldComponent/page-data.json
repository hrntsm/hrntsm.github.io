{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/CS-grasshopper-HelloWorldComponent","result":{"data":{"markdownRemark":{"html":"<p>grasshopper のコンポーネントのカスタム方法についての記事です。コンポーネントにボタンを設置し、ボタンを押すとウインドウズフォームから出力されるウインドウに定番の「HelloWorld」を出力するコンポーネントを作成します。</p>\n<p><a href=\"https://4.bp.blogspot.com/-c9x0l3r4drM/WRfabD79LqI/AAAAAAAABXY/Pybpxc6JIasqn00EfV87bYW-JZe78PbdwCLcB/s1600/%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E7%2594%25BB%25E5%2583%258F.PNG\"><img src=\"https://4.bp.blogspot.com/-c9x0l3r4drM/WRfabD79LqI/AAAAAAAABXY/Pybpxc6JIasqn00EfV87bYW-JZe78PbdwCLcB/s320/%25E3%2583%2588%25E3%2583%2583%25E3%2583%2597%25E7%2594%25BB%25E5%2583%258F.PNG\"></a></p>\n<p>コンポーンネントのカスタムは、カスタム専用のクラスを作成して行います。今回は、Attributes_Custom というクラス名としています。<br>\n構成を簡単に説明すると以下のようになります。</p>\n<ol>\n<li>layout でコンポーネントの外観を変更しています。rec0 でコンポーネントのサイズを大きくし、ボタンを設置するスペースを作ります。（rec0.Height += 44 で高さを増している）</li>\n<li>上記画像で Button1 と表示される範囲を rec1、Button2 と表示される範囲を rec2 として作成します。</li>\n<li>ボタンにテキストを表示させるように Render の設定を行います。</li>\n<li>ボタンとして反応し、ウインドウを出すためにイベントハンドラの設定を行います。Button1 はタイトルにもなっている「HelloWorld」を出力するよう設定しています。Button2 はボタンを増やす例として作っています。どちらも右クリックでイベントが発生するようにしています。</li>\n<li>最後にここでの設定をコンポーネントに反映するため以下の gist でいうと 14-17 行目にあるようにコンポーネントと Attributes_Custom と関連つけます。</li>\n</ol>\n<p>では今回作成したものを以下に掲載します。</p>","excerpt":"grasshopper のコンポーネントのカスタム方法についての記事です。コンポーネントにボタンを設置し、ボタンを押すとウインドウズフォームから出力されるウインドウに定番の「HelloWorld…","frontmatter":{"date":"28 May, 2017","path":"/articles/CS-grasshopper-HelloWorldComponent","title":"C#とgrasshopperで Hello World! を表示","article_tags":["Grasshopper","CSharp","構造とデジタル"]},"fields":{"readingTime":{"text":"1 min read"},"slug":"/kozo-to-digital/CS-grasshopper-HelloWorldComponent/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}