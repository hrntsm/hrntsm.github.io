{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/Rhino.Inside.Unity-withFEM","result":{"data":{"markdownRemark":{"html":"<p>バーチャルモーションキャプチャーと Rhino.Inside.Unity を使って以下の動画のような形で人型に対するリアルタイムでの FEM 解析をやってみます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-X7Wmy3d32-c/XmW2fkPcgWI/AAAAAAAAB0g/3LxrkN8GmLUOFBorIu-ZTqh_WuhJhyoDQCLcBGAsYHQ/s1600/VMCmoment.gif\"><img src=\"https://1.bp.blogspot.com/-X7Wmy3d32-c/XmW2fkPcgWI/AAAAAAAAB0g/3LxrkN8GmLUOFBorIu-ZTqh_WuhJhyoDQCLcBGAsYHQ/s320/VMCmoment.gif\"></a></p>\n<p>大きな流れとしては、以下の形です。</p>\n<ol>\n<li><a href=\"https://sh-akira.github.io/VirtualMotionCapture/\">バーチャルモーションキャプチャー</a>で機器からの情報を取得</li>\n<li><a href=\"https://github.com/gpsnmeajp/EasyVirtualMotionCaptureForUnity\">EVMC4U</a>を使ってバーチャルモーションキャプチャーからの情報を Unity に取得する</li>\n<li>Rhino.Inside.Unity で各ボーンの情報を Rhino に送る</li>\n<li>karamba で FEM 解析</li>\n</ol>\n<p>バーチャルモーションキャプチャー（以下ばもきゃ）と EVMC4U についての詳細は、上記のリンクから各ソフトの HP でのそれぞれの説明を確認してください。<br>\n上記の動画では VIVE と VIVE トラッカーを 3 つ使って頭、両手、腰、両足をトラッキングしながら撮影しています。</p>\n<p>ばもきゃと EVMC4U の接続については、<a href=\"https://github.com/gpsnmeajp/EasyVirtualMotionCaptureForUnity/wiki\">EVMC4U の wiki</a>を参照してください。</p>\n<p>ばもきゃとのやり取りでハマった箇所としては、ばもきゃと EVMC4U は OSC で情報のやり取りをしていますが、送られているボーン位置の情報はローカル座標で送らている点です。最初はグローバルの座標で送られていると思いそのまま座標を Rhino に送ろうとしていましたが、ローカル座標のためボーンが意味不明な位置になってしまい結構悩みました。</p>\n<p>ここから今回のために変更した個所の説明をします。<br>\nEVMC4U を使える段階にすると ExternalReceiver.cs を使って情報をばもきゃから受信する形になっていると思います。ここに Rhino へボーン情報を送信用の部分を以下の 18 行目からの個所のように追記しています。ExternalReceiver.cs 全体でいうと 576 行目くらいから始まる  private void BoneSynchronizeSingle の個所になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">private</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">BoneSynchronizeSingle</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Transform</span> t<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">HumanBodyBones</span> bone<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Vector3</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">ref</span> <span class=\"token class-name\">Quaternion</span> rot<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> posFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> rotFilter<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    BoneFilter <span class=\"token operator\">=</span> Mathf<span class=\"token punctuation\">.</span><span class=\"token function\">Clamp</span><span class=\"token punctuation\">(</span>BoneFilter<span class=\"token punctuation\">,</span> <span class=\"token number\">0f</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//ボーン位置同期が有効か</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BonePositionSynchronize<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">//ボーン位置フィルタが有効か</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>posFilter<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            bonePosFilter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>bone<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>bonePosFilter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>bone<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> BoneFilter<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> pos <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0f</span> <span class=\"token operator\">-</span> BoneFilter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            t<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> bonePosFilter<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>bone<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">else</span>\n        <span class=\"token punctuation\">{</span>\n            t<span class=\"token punctuation\">.</span>localPosition <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">// ここを追記</span>\n    　　<span class=\"token class-name\"><span class=\"token keyword\">string</span></span> boneName <span class=\"token operator\">=</span> bone<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boneName <span class=\"token operator\">==</span> <span class=\"token string\">\"Neck\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"Head\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"Hips\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"Spine\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"Chest\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftUpperArm\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightUpperArm\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftLowerArm\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightLowerArm\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftHand\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightHand\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftUpperLeg\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightUpperLeg\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftLowerLeg\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightLowerLeg\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftFoot\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightFoot\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"LeftToes\"</span> <span class=\"token operator\">||</span>\n\t\tboneName <span class=\"token operator\">==</span> <span class=\"token string\">\"RightToes\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token punctuation\">{</span>\n\t\tGrasshopperInUnity<span class=\"token punctuation\">.</span><span class=\"token function\">SendBonePosition</span><span class=\"token punctuation\">(</span>boneName<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 省略</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>ここではばもきゃから受信したボーンの各点の座標を各ボーンに適用しているので、その値を取得し対象のボーンの名前とポジションを GrasshopperInUnity.SendBonePosition の引数として入力します。途中の長い if 文は今回必要なボーンだけを設定するように場合分けしているだけなので、必要に応じて修正してください。</p>\n<p>次に GrasshopperInUnity についてです。ここでは参考として<a href=\"https://github.com/mcneel/rhino.inside/tree/master/Unity/Sample2\">Rhino.Inside.Unity のサンプル 2</a>を使用しているので、そこからの追記箇所についての説明になります。追記したものは以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">SendBonePosition</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">string</span></span> boneName<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Vector3</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_firstRun<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">ShowGrasshopperWindow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    UnityEditor<span class=\"token punctuation\">.</span>EditorApplication<span class=\"token punctuation\">.</span>isPaused <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boneName <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pt <span class=\"token operator\">=</span> pos<span class=\"token punctuation\">.</span><span class=\"token function\">ToRhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>NamedParametersEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      args<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"point\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>Point</span><span class=\"token punctuation\">(</span>pt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>HostUtils<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNamedCallback</span><span class=\"token punctuation\">(</span>boneName<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>最初の動作だった場合(_firstRun が True)は、grasshopper を起動させ、Unity をいったんポーズの状態にします。ポーズにする理由は、grasshopper を起動後、.gh ファイルを選択し開くまでの間は Unity が止まっていないと Rhino.Inside.Unity での送り先がなくエラーになってしまうからです。<br>\n6 行目以降はボーンの座標を args にセットして grasshopper 側で受け取れるようにしています。<br>\nこれで各ボーンの頂点データが grasshopper 側で受け取れるようになったので、あとはその点を使って骨組みを作り karamba で解析します。<br>\n一連の説明は以上ですが、冒頭の動画のようにこの動作は非常に重いので、もう少し高速化できたら楽しそうなのですが、それは今後の課題です。</p>","excerpt":"バーチャルモーションキャプチャーと Rhino.Inside.Unity を使って以下の動画のような形で人型に対するリアルタイムでの FEM 解析をやってみます。  大きな流れとしては、以下の形です。 バーチャルモーションキャプチャーで機器からの情報を取得 EVMC4U…","frontmatter":{"date":"09 March, 2020","path":"/articles/Rhino.Inside.Unity-withFEM","title":"RhinoInside を使ってリアルタイムで人の動きのFEM解析をやってみる","article_tags":["karamba","Unity","VR","RhinoInside","C#"]},"fields":{"readingTime":{"text":"2 min read"},"slug":"/Rhino.Inside.Unity-withFEM/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["3649515864","63159454"]}