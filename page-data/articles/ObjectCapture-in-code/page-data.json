{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/ObjectCapture-in-code","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<p>Rhino WIP を使って ObjectCapture をやる方法を紹介しました。\n記事内で書いたようにこの機能は macOS で提供されている機能なため、Rhino でなくとも ObjectCapture を使うことができます。\nここでは以下の Apple のサンプルをもとに Swift を使って ObjectCapture を実行する方法を紹介します。</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/creating_a_photogrammetry_command-line_app\">Creating a Photogrammetry Command-Line App</a></li>\n</ul>\n<h3>必要な環境</h3>\n<ol>\n<li>Xcode</li>\n<li>Apple Silicon Mac</li>\n<li>Monterey 以降の macOS</li>\n</ol>\n<h2>コードを作成</h2>\n<h3>Xcode で Swift のテンプレートを開く</h3>\n<p>以下の手順で Swift のテンプレートが作成されます。</p>\n<ol>\n<li>Xcode を立ち上げる</li>\n<li>Create a new Xcode project を選択する</li>\n<li>一番上のタブから macOS を選択してその中なら Command Line Tool を選択する</li>\n<li>Product Name と Organization Identifier を適当に設定し、Language を Swift にし Next を押し作成先のフォルダを設定する</li>\n</ol>\n<p>上記を行うとテンプレートが作成されて以下のような main.swift ファイルが作成されていると思います。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">//  main.swift</span>\n<span class=\"token comment\">//  testProject</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//  Created by hiron on 2021/12/05.</span>\n<span class=\"token comment\">//</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n\n<span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Hello, World!\"</span></span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>この状態で Xcode の上部の左側にある ▷ ボタンを押すと Build が実行されコンソールに Hello, World! が表示されます。\nこれでコードを書く下準備ができたので、ここからコードを書いていきます。</p>\n<h3>必要なライブラリのインストール</h3>\n<p>テンプレートでは Foundation しかインポートしていないので、必要なものをインポートします。\nRealityKit が実際に ObjectCapture を行う機能を提供している部分になります。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Metal</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>入出力の設定</h3>\n<p>ObjectCapture の対象となる画像のあるフォルダと作成したモデルの出力先を指定します。\n出力先はファイル名を指定し、拡張子を .usdz にしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> inputFolder <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"ここにインプットする画像のフォルダのパスを入れる\"</span></span>\n<span class=\"token keyword\">let</span> outputFilename <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"ここに作成したファイルの出力先を入れる（拡張子は .usdz）\"</span></span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<h3>Session の設定を作成</h3>\n<p>次に実際に処理する際の設定をもつ Session を作成します。\n取り込む画像の順序を設定する SampleOrdering と FeatureSensitivity の設定は\nPhotogrammetrySession の Configuration で指定します。</p>\n<p>ドキュメントは以下なので必要に応じて参照してください。</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/configuration\">PhotogrammetrySession.Configuration</a></li>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/configuration/sampleordering\">enum PhotogrammetrySession.Configuration.SampleOrdering\n</a></li>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/configuration/featuresensitivity\">enum PhotogrammetrySession.Configuration.FeatureSensitivity\n</a></li>\n</ul>\n<p>ここでは SampleOrdering は unordered、featureSensitivity は normal にしています。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> inputFolderUrl <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> inputFolder<span class=\"token punctuation\">,</span> isDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> configure <span class=\"token operator\">=</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfigure<span class=\"token punctuation\">.</span>sampleOrdering <span class=\"token operator\">=</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SampleOrdering</span><span class=\"token punctuation\">.</span>unordered\nconfigure<span class=\"token punctuation\">.</span>featureSensitivity <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">FeatureSensitivity</span><span class=\"token punctuation\">.</span>normal\n\n<span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">(</span>\n    input<span class=\"token punctuation\">:</span> inputFolderUrl<span class=\"token punctuation\">,</span>\n    configuration<span class=\"token punctuation\">:</span> configure\n<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>実行時の状態出力の設定</h3>\n<p>上で作成した session の output を for で処理して、その結果に合わせて Switch でコンソール上に書き出すようにしています。</p>\n<p>output のケースは結構あるので、ここでは完了した processingComplete 以外は default で処理しています。\nどんな出力があるかは以下のドキュメントを参照し適宜出力するようにしてください。</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/output\">PhotogrammetrySession.Output</a></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">let</span> waiter <span class=\"token operator\">=</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> output <span class=\"token keyword\">in</span> session<span class=\"token punctuation\">.</span>outputs <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> output <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>processingComplete<span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"complete!!\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Output: unhandled message\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Output: ERROR\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>処理の実行部分の作成</h3>\n<p>最初に request を作成していますが、それを作成する関数はこのあとで作成しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token function\">withExtendedLifetime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> waiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Using request: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> request <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">RunLoop</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Process got error: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>作成したファイルの出力先とファイルの作成の詳細度を設定</h3>\n<p>最後に処理の実行の部分で呼び出している Request を取得する関数を作成します。\nここでは一番処理が軽い preview を指定しています。\n公式のドキュメントは以下になります。</p>\n<ul>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/request\">PhotogrammetrySession.Request</a></li>\n<li><a href=\"https://developer.apple.com/documentation/realitykit/photogrammetrysession/request/detail\">enum PhotogrammetrySession.Request.Detail</a></li>\n</ul>\n<p>より精密なデータを作成したい場合は別の値を設定してください。\n設定可能な値は「preview」「reduce」「medium」「full」「raw」の5つです。\nあとの選択肢ほどメッシュ数が増え処理に時間がかかるようになるので注意してください。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> outputUrl <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> outputFilename<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">.</span><span class=\"token function\">modelFile</span><span class=\"token punctuation\">(</span>\n        url<span class=\"token punctuation\">:</span> outputUrl<span class=\"token punctuation\">,</span>\n        detail<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Detail</span><span class=\"token punctuation\">.</span>preview<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h3>完成！</h3>\n<p>これでコードが完成したので、Hello, World! と出力したときと同じように Build を実行することで ObjectCapture が実行されます。</p>\n<p>作成が問題なく完了すると outputFilename で指定した箇所にファイルが出力されています。\nダブルクリックするとそのままファイルが開かれモデルを確認することができます。</p>\n<h2>作成したコード全体</h2>\n<p>以下に参考にここまでで作成したコード全体を記載します。\n冒頭で出した Apple の公式のサンプルと合わせて適宜参考にしてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"swift\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-swift line-numbers\"><code class=\"language-swift\"><span class=\"token keyword\">import</span> <span class=\"token class-name\">Foundation</span>\n<span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">RealityKit</span>\n<span class=\"token keyword\">import</span> <span class=\"token class-name\">Metal</span>\n\n<span class=\"token comment\">// 入出力の設定</span>\n<span class=\"token keyword\">let</span> inputFolder <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"ここにインプットする画像のフォルダのパスを入れる\"</span></span>\n<span class=\"token keyword\">let</span> outputFilename <span class=\"token operator\">=</span> <span class=\"token string-literal\"><span class=\"token string\">\"ここに作成したファイルの出力先を入れる（拡張子は .usdz）\"</span></span>\n\n<span class=\"token comment\">// Session の設定作成</span>\n<span class=\"token keyword\">let</span> inputFolderUrl <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> inputFolder<span class=\"token punctuation\">,</span> isDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">var</span> configure <span class=\"token operator\">=</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfigure<span class=\"token punctuation\">.</span>sampleOrdering <span class=\"token operator\">=</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">SampleOrdering</span><span class=\"token punctuation\">.</span>unordered\nconfigure<span class=\"token punctuation\">.</span>featureSensitivity <span class=\"token operator\">=</span>\n    <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Configuration</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">FeatureSensitivity</span><span class=\"token punctuation\">.</span>normal\n\n<span class=\"token keyword\">let</span> session <span class=\"token operator\">=</span> <span class=\"token keyword\">try</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">(</span>\n    input<span class=\"token punctuation\">:</span> inputFolderUrl<span class=\"token punctuation\">,</span>\n    configuration<span class=\"token punctuation\">:</span> configure\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 動作実行時の状態出力の設定作成</span>\n<span class=\"token keyword\">let</span> waiter <span class=\"token operator\">=</span> <span class=\"token class-name\">Task</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token keyword\">try</span> <span class=\"token keyword\">await</span> output <span class=\"token keyword\">in</span> session<span class=\"token punctuation\">.</span>outputs <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">switch</span> output <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> <span class=\"token punctuation\">.</span>processingComplete<span class=\"token punctuation\">:</span>\n                    <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"complete!!\"</span></span><span class=\"token punctuation\">)</span>\n                    <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n            <span class=\"token attribute atrule\">@unknown</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span>\n                <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Output: unhandled message\"</span></span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Output: ERROR\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 処理の実行</span>\n<span class=\"token function\">withExtendedLifetime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">,</span> waiter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> request <span class=\"token operator\">=</span> <span class=\"token function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Using request: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> request<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">try</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">process</span><span class=\"token punctuation\">(</span>requests<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> request <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">RunLoop</span><span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token string-literal\"><span class=\"token string\">\"Process got error: </span><span class=\"token interpolation-punctuation punctuation\">\\(</span><span class=\"token interpolation\"><span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>describing<span class=\"token punctuation\">:</span> error<span class=\"token punctuation\">)</span></span><span class=\"token interpolation-punctuation punctuation\">)</span><span class=\"token string\">\"</span></span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">Foundation</span><span class=\"token punctuation\">.</span><span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 完成したファイルの出力先とファイル作成の詳細度を設定</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">func</span> <span class=\"token function-definition function\">makeRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> outputUrl <span class=\"token operator\">=</span> <span class=\"token function\">URL</span><span class=\"token punctuation\">(</span>fileURLWithPath<span class=\"token punctuation\">:</span> outputFilename<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">.</span><span class=\"token function\">modelFile</span><span class=\"token punctuation\">(</span>\n        url<span class=\"token punctuation\">:</span> outputUrl<span class=\"token punctuation\">,</span>\n        detail<span class=\"token punctuation\">:</span> <span class=\"token class-name\">PhotogrammetrySession</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Request</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Detail</span><span class=\"token punctuation\">.</span>preview<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","excerpt":"はじめに Rhino WIP を使って ObjectCapture をやる方法を紹介しました。\n記事内で書いたようにこの機能は macOS で提供されている機能なため、Rhino でなくとも ObjectCapture を使うことができます。\nここでは以下の Apple のサンプルをもとに Swift…","frontmatter":{"date":"05 December, 2021","path":"/articles/ObjectCapture-in-code","title":"Swift を使って ObjectCapture をやってみる","article_tags":["Swift","Photogrammetry"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/objectcapture-in-code/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}