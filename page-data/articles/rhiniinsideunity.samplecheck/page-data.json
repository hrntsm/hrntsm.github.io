{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/rhiniinsideunity.samplecheck","result":{"data":{"markdownRemark":{"html":"<p>公式の RhinoInside Unity をちょっといじって遊んでみます。</p>\n<p>Unity 側のゲームオブジェクトの座標を取得して Grasshopper に送り、その情報をもとに Rhino 側でジオメトリを計算しメッシュを返し、Unity でゲームオブジェクトとして表示することをやっています。</p>\n<p>なおこの記事は、Unity、Rhino、C# を基本的な操作を理解していることを前提にしています。</p>\n<p><img src=\"https://1.bp.blogspot.com/-6V7f-V45f6I/XlnF_6_cg1I/AAAAAAAABxE/LcQkqiRw7z4OEDSck8fkjb1PDhm4DJ7TACLcBGAsYHQ/s640/rhinoinsideunity_vshoudini.gif\"></p>\n<p>RhinoInside は 2020/02/29 現在開発中の機能なので、RhinoWIP（Rhino7）を使えるかたにしか使えない機能です。\nRhinoInside でなにができるか気になる方は <a href=\"./201912-rhinoinside\">こちらの記事</a> をどうぞ。</p>\n<h2>セットアップ</h2>\n<p>RhinoInside Unity を使うためには<a href=\"https://github.com/mcneel/rhino.inside/tree/master/Unity\">mcneel の GitHub</a>を参照してください。概要を説明します。</p>\n<ol>\n<li>\n<p>リポジトリをクローンしてください。コマンドプロンプトからやる場合は以下のコマンドを入れてください。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone --recursive https://github.com/mcneel/rhino.inside.git rhino.inside</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n</li>\n<li>RhinoCommon を取得するため  rhino.inside\\Unity\\Sample1\\Assets\\Standard Assets\\RhinoInside のフォルダに行き  RhinoCommon.Update.bat をダブルクリックしてください。</li>\n</ol>\n<p>これで使えるようになります。</p>\n<h2>Sample2 で遊ぶ</h2>\n<p>遊んでいくベースとするのは  rhino.inside\\Unity\\Sample2 のフォルダのデータなので UnityHub などを使っているならば、上記フォルダを追加して開きましょう。</p>\n<p><a href=\"https://1.bp.blogspot.com/-Qvc95M49gfg/Xlnzwbq90-I/AAAAAAAABxg/vpwdxb-nO4Aw7beMmi5skYsOfoPcABihgCLcBGAsYHQ/s1600/%25E7%2594%25BB%25E5%2583%258F1.png\"><img src=\"https://1.bp.blogspot.com/-Qvc95M49gfg/Xlnzwbq90-I/AAAAAAAABxg/vpwdxb-nO4Aw7beMmi5skYsOfoPcABihgCLcBGAsYHQ/s400/%25E7%2594%25BB%25E5%2583%258F1.png\"></a></p>\n<p>Unity を開くと上の画像のように Grasshopper があるので Show を押すと Unity の裏で Rhino と Grasshopper が起動し、ゲームオブジェクトの \"Grasshopper Geometry\" が作られます。</p>\n<p>Grasshopper では \"callunity2.gh\" ファイルを開くと、Unity の MainCamera の座標を gh に送りその点に対して gh 上でジオメトリの操作をして作られたメッシュを Unity に返す中身になっています。Unity とやり取りする部分だけ C#スクリプトのコンポーネントで作成されています。</p>\n<p>gh の中身の概要としては Box で領域を作ってその中に Populate3D で点をランダムにうち、その点と Unity の MainCamera の座標の Distance をとってその関係から Remap してその点に sphere を作る挙動になっています。</p>\n<p>動作はこんな感じです。</p>\n<p><a href=\"https://1.bp.blogspot.com/-V-Tl-UzRpPQ/Xln3pHcvPqI/AAAAAAAABx4/K9HCqdQ1WnUpNgSycLpN58RLSyTj3SbRQCLcBGAsYHQ/s1600/RIU_Sampl2.gif\"><img src=\"https://1.bp.blogspot.com/-V-Tl-UzRpPQ/Xln3pHcvPqI/AAAAAAAABx4/K9HCqdQ1WnUpNgSycLpN58RLSyTj3SbRQCLcBGAsYHQ/s400/RIU_Sampl2.gif\"></a></p>\n<p>これだけだと sample そのままで面白くないので、gh の中で点をうつ基準になっている Box のサイズも Unity 側から操作できるようにしてみます。</p>\n<h2>Sample2 を改造してみる</h2>\n<h3>Unity 側</h3>\n<p>まず Unity に Box のサイズをコントロールするものを作ります。\ngh 内で Box を作成するためには Box の xyz 座標があればいいので、unity のゲームオブジェクトの transform を送ればいいとして、Unity で CreateEmpty でゲームオブジェクトを作って”ControlPoint”と名前を付けます。</p>\n<p><a href=\"https://1.bp.blogspot.com/-2DC4FQFBF9A/Xln6lF-KkFI/AAAAAAAAByQ/FcELw49TsgA_MIca2IZqXrr0hw_Kn0n3ACLcBGAsYHQ/s1600/%25E7%2594%25BB%25E5%2583%258F2.png\"><img src=\"https://1.bp.blogspot.com/-2DC4FQFBF9A/Xln6lF-KkFI/AAAAAAAAByQ/FcELw49TsgA_MIca2IZqXrr0hw_Kn0n3ACLcBGAsYHQ/s400/%25E7%2594%25BB%25E5%2583%258F2.png\"></a></p>\n<p>この \"ControlPoint\" を gh 側へ送るために GrasshopperInUnity.cs をいじります。\nこのファイルでは最初の方は MenuItem での操作の部分が書いてあり一番下の Update の部分に追記していきます。</p>\n<p>Update の初めの部分を読むと</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pt <span class=\"token operator\">=</span> Camera<span class=\"token punctuation\">.</span>main<span class=\"token punctuation\">.</span>gameObject<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">ToRhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>となっていて、MainCamera のポジションを ToRhino しています。</p>\n<p>ToRhino でやっていることは、transform.position で取得できるのは Vector3 なので、ToRhino で Rhino.Geometry.Point3d に変換しています。その後 args に”point”という名前で pt をセットし、</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>HostUtils<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNamedCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ToGrasshopper\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>で送ってます。</p>\n<p>なので、\"ControlPoint\" の transform.position を ToRhino すれば良さそうなので同じように書いて以下のように追記します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> gameObj <span class=\"token operator\">=</span> GameObject<span class=\"token punctuation\">.</span><span class=\"token function\">Find</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ControlPoint\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">var</span></span> pt2 <span class=\"token operator\">=</span> gameObj<span class=\"token punctuation\">.</span>transform<span class=\"token punctuation\">.</span>position<span class=\"token punctuation\">.</span><span class=\"token function\">ToRhino</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> args <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>NamedParametersEventArgs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  args<span class=\"token punctuation\">.</span><span class=\"token function\">Set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"controlpoint\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>Point</span><span class=\"token punctuation\">(</span>pt2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>HostUtils<span class=\"token punctuation\">.</span><span class=\"token function\">ExecuteNamedCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ToGrasshopper1\"</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>これで Unity 側での作業は終わりです。</p>\n<h3>Grasshopper 側</h3>\n<p>Unity から受け取るのは MainCamera のものと同じなので既にある receive のコンポーネントをコピーします。中身を以下のように書き換えます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token class-name\">Point</span> pt <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\"><span class=\"token keyword\">bool</span></span> registered <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">IGH_Component</span> comp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">Register</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_Component</span> component<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>registered<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">{</span>\n    Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>HostUtils<span class=\"token punctuation\">.</span><span class=\"token function\">RegisterNamedCallback</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ToGrasshopper1\"</span><span class=\"token punctuation\">,</span> ToGrasshopper<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    comp <span class=\"token operator\">=</span> component<span class=\"token punctuation\">;</span>\n    registered <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">ToGrasshopper</span><span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">object</span></span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Rhino<span class=\"token punctuation\">.</span>Runtime<span class=\"token punctuation\">.</span>NamedParametersEventArgs</span> args<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>GeometryBase<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span> values<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token function\">TryGetGeometry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"controlpoint\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">out</span> values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    pt <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">as</span> <span class=\"token class-name\">Rhino<span class=\"token punctuation\">.</span>Geometry<span class=\"token punctuation\">.</span>Point</span><span class=\"token punctuation\">;</span>\n  comp<span class=\"token punctuation\">.</span><span class=\"token function\">ExpireSolution</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>書き換えた点は、9 行目で、Unity から届く登録された名前は”ToGrasshopper1”なのでその点を修正しています。\n同様に 20 行目も TryGetGeometry するものの名前を”controlpoint”に変えています。</p>\n<p>これで C#コンポーネントが完成したのでその出力であるポイントの情報を Deconstruct して Box の入力に入れます。</p>\n<p>以上で作業は終わりです。</p>\n<p>これでうまくいっていれば Unity 側から操作できるようになっていると思います。\nよくわかりませんが書きたての時はうまく動かなかったり Unity が落ちたりするので、ダメなときは Unity 再起動するとうまくいく場合があるかもしれません。</p>\n<p>あなたもこれで RhinoInside Unity で遊んでみてください。</p>\n<p><a href=\"https://1.bp.blogspot.com/-pukbJjiUEF4/XloEg7XZk1I/AAAAAAAAByo/62SY-yQ1E1AqtS3ROQ9rb88w0WiMd3SpACLcBGAsYHQ/s1600/RIU_Sampl2-2.gif\"><img src=\"https://1.bp.blogspot.com/-pukbJjiUEF4/XloEg7XZk1I/AAAAAAAAByo/62SY-yQ1E1AqtS3ROQ9rb88w0WiMd3SpACLcBGAsYHQ/s640/RIU_Sampl2-2.gif\"></a></p>","excerpt":"公式の RhinoInside Unity をちょっといじって遊んでみます。 Unity 側のゲームオブジェクトの座標を取得して Grasshopper に送り、その情報をもとに Rhino 側でジオメトリを計算しメッシュを返し、Unity…","frontmatter":{"date":"29 February, 2020","path":"/articles/rhiniinsideunity.samplecheck","title":"RhinoInside Unity の公式サンプルで遊ぶ","article_tags":["Unity","Grasshopper","RhinoInside","CSharp","Rhinoceros","構造とデジタル"]},"fields":{"readingTime":{"text":"2 min read"},"slug":"/kozo-to-digital/rhiniinsideunity.samplecheck/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}