{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/call-winform-from-gh","result":{"data":{"markdownRemark":{"html":"<h1>はじめに</h1>\n<p><a href=\"./colouring-gh-wire\">この記事</a>と同様に Galápagos のようなコンポーネントを作ろうとした際に、Grasshopper のコンポーネントから WindowsForm で作ったものを表示させたかったので、やり方を示します。</p>\n<p>ちなみに、Rhino は Mac 版もあるので、どちらも対応したものを作成したい場合は、WindowsForm ではなく Rhino が対応しているクロスプラットフォームインターフェースの<a href=\"https://github.com/mcneel/Eto\">Eto</a>を使ってください。</p>\n<p>なおこの記事は、RhinocerosForum の<a href=\"https://discourse.mcneel.com/t/optimization-plug-in-for-grasshopper-how-to-use-galapagos-interface-and-gene-pool/27267/18\">この質問</a>の内容を参考に作っています。</p>\n<h1>完成品のイメージ</h1>\n<blockquote class=\"twitter-tweet\"><p lang=\"ja\" dir=\"ltr\">今日のもくもく会の成果<br>GrasshopperのNumberSliderを、コンポーネントをダブルクリックして呼び出せるWindowsフォームのsliderから操作できました～ <a href=\"https://t.co/tDEtHmxPA1\">pic.twitter.com/tDEtHmxPA1</a></p>&mdash; hiron/6cores (@hiron_rgkr) <a href=\"https://twitter.com/hiron_rgkr/status/1144930156747751424?ref_src=twsrc%5Etfw\">June 29, 2019</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h1>作り方</h1>\n<p>作成には <a href=\"https://developer.rhino3d.com/api/grasshopper/html/T_Grasshopper_Kernel_Attributes_GH_ComponentAttributes.htm\">GH_ComponentAttributes クラス</a>を作り、コンポーネントをダブルクリックした際にウインドウが出てきて欲しいので、\nGH_Attributes の RespondToMouseDoubleClick メソッド</p>\n<ul>\n<li><a href=\"https://developer.rhino3d.com/api/grasshopper/html/M_Grasshopper_Kernel_GH_Attributes_1_RespondToMouseDoubleClick.htm\">RespondToMouseDoubleClick メソッド</a></li>\n</ul>\n<p>を使います。これを使うことで、ダブルクリックした際に DisplayForm（別途作成している WinForm）を呼び出しています。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Attributes_Custom</span> <span class=\"token punctuation\">:</span> <span class=\"token type-list\"><span class=\"token class-name\">GH_ComponentAttributes</span></span> \n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">Attributes_Custom</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IGH_Component</span> ChangeNumSlider<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">:</span> <span class=\"token keyword\">base</span><span class=\"token punctuation\">(</span>ChangeNumSlider<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\">GH_ObjectResponse</span> <span class=\"token function\">RespondToMouseDoubleClick</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GH_Canvas</span> sender<span class=\"token punctuation\">,</span> <span class=\"token class-name\">GH_CanvasMouseEvent</span> e<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">(</span>Owner <span class=\"token keyword\">as</span> <span class=\"token class-name\">ChangeNumSlider</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">DisplayForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> GH_ObjectResponse<span class=\"token punctuation\">.</span>Handled<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>上で作成したアトリビュートをコンポーネントに適用したいので、<a href=\"https://developer.rhino3d.com/api/grasshopper/html/Methods_T_Grasshopper_Kernel_GH_Component.htm\">GH_Component クラス</a> の <a href=\"https://developer.rhino3d.com/api/grasshopper/html/M_Grasshopper_Kernel_GH_Component_CreateAttributes.htm\">CreateAttributes メソッド</a>を<a href=\"https://docs.microsoft.com/ja-jp/dotnet/csharp/language-reference/keywords/override\">オーバーライド</a>します。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">override</span> <span class=\"token return-type class-name\"><span class=\"token keyword\">void</span></span> <span class=\"token function\">CreateAttributes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    m_attributes <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">Attributes_Custom</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span></span></pre></div>\n<p>WindowsForm の使い方などはほかの記事の方が詳しいと思うので、ここでは割愛します。</p>\n<h2>ビルトした動くものを作りたい場合</h2>\n<p>ここで説明した内容は<a href=\"https://ja.wikipedia.org/wiki/%E3%83%9B%E3%82%BF%E3%83%AB%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0\">ホタルアルゴリズム</a>による最適化コンポーネントを目指して作り出した<a href=\"https://github.com/hrntsm/HotaruComponent/tree/develop\">ホタルコンポーネント</a>の一部です（モチベーションなくなってエタッてしまいました…）。</p>\n<p>ホタルコンポーネントのリンク先の github の Develope ブランチをクローンしてビルトしてもらえば動く gh コンポーネントが作成されると思います。直接の部分は<a href=\"https://github.com/hrntsm/HotaruComponent/blob/develop/HotaruComponent/ChangeNumSlider.cs\">ChangeNumSlider.cs</a> の部分で、他はホタルアルゴリズムの実装を行っている箇所です。</p>\n<p>Grasshopper 内の C#スクリプトコンポーネントでは WindowsForm を作るのが面倒なので、Visual Studio Community 2019 を使っています。</p>\n<h2>ちなみに</h2>\n<p>カスタムアトリビュートについては、<a href=\"https://developer.rhino3d.com/api/grasshopper/html/8a7974ab-7b2b-4f48-84d0-6e81b184e6b0.htm\">公式の説明</a>もあるので詳しく知りたい方はそちらも参照どうぞ。</p>","excerpt":"はじめに この記事と同様に Galápagos のようなコンポーネントを作ろうとした際に、Grasshopper のコンポーネントから WindowsForm で作ったものを表示させたかったので、やり方を示します。 ちなみに、Rhino は Mac…","frontmatter":{"date":"10 December, 2019","path":"/articles/call-winform-from-gh","title":"Grasshopper コンポーネントをダブルクリックした際に WindowsForm を呼ぶ方法","article_tags":["CSharp","Grasshopper","Qiita"]},"fields":{"readingTime":{"text":"1 min read"},"slug":"/qiita/call-winform-form-gh/","collection":"article"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}