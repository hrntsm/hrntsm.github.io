{"componentChunkName":"component---src-templates-article-post-js","path":"/articles/try-hops-component","result":{"data":{"markdownRemark":{"html":"<h2>はじめに</h2>\n<h3>Hops とは</h3>\n<p>Hops は Rhino7 から使用できるようになった新しい Grasshopper コンポーネントです。</p>\n<h3>必要な環境</h3>\n<ol>\n<li>Windows</li>\n<li>Rhino 7.4 以上</li>\n<li>CPython 3.8 以上</li>\n<li>Visual Studio Code(任意の Python を書きやすいテキストエディタ)</li>\n</ol>\n<h3>参考資料</h3>\n<p>前半の Hops を Grasshopper の Cluster のように使用をする方法は以下の公式の資料をもとにしています。</p>\n<ul>\n<li><a href=\"https://developer.rhino3d.com/guides/grasshopper/hops-component/\">Hops Component</a></li>\n</ul>\n<p>後半の Hops を使った CPython コンポーネント作成は以下の RhinocerosForums の以下のディスカッションや RhinoCompute のリポジトリをもとにしています。</p>\n<ul>\n<li><a href=\"https://discourse.mcneel.com/t/create-cpython-components-using-hops-in-grasshopper/120517?u=hiron\">Create CPython components using Hops in Grasshopper</a></li>\n<li><a href=\"https://github.com/mcneel/compute.rhino3d/tree/master/src/ghhops-server-py\">compute.rhino3d/src/ghhops-server-py/</a></li>\n</ul>\n<h2>Hops コンポーネントのインストール方法</h2>\n<p>ああああああああああああああああ</p>\n<p>なお Hops の実装は以下の GitHub リポジトリで公開されているので、興味がある方はどうぞ。</p>\n<ul>\n<li><a href=\"https://github.com/mcneel/compute.rhino3d/tree/master/src/hops\">compute.rhino3d/src/hops/</a></li>\n</ul>\n<h2>外部の gh ファイルを Cluster のように使用する</h2>\n<p>基本的な使い方は冒頭でも上げた以下の公式のページを参照してください。</p>\n<ul>\n<li><a href=\"https://developer.rhino3d.com/guides/grasshopper/hops-component/\">Hops Component</a></li>\n</ul>\n<p>ここではそこで触れられていない部分について追記しています。</p>\n<h3>デフォルトの値の設定方法</h3>\n<p>公式のページでは GetNumber コンポーネントを使用したサンプルが載っていますが、デフォルトの値が指定されていません。</p>\n<p>Hops で使うデフォルトの値は以下のようにコンポーネントに値を入力できます。</p>\n<p><img src=\"https://hiron.dev/article-images/try-hops-component/SetHopsDefaultVal.png\" alt=\"Set default value\"></p>\n<h3>GrasshopperPlayer 向け以外のコンポーネントを使った入力値の設定</h3>\n<p>対象をグループ化して「RH_IN:」で始める名前をつけると読み込まれます。\n例えば Bool を使いたいときは Boolean コンポーネントを使用し、グループ化した後に名前をつけることで、isBake という名前の入力を作れます。</p>\n<p><img src=\"https://hiron.dev/article-images/try-hops-component/BoolInput.png\" alt=\"Bool input\"></p>\n<h3>並列計算数を増やす方法</h3>\n<p>まず Hops コンポーネントを右クリックします。\nLocal Computes から「1More」を選ぶと 1 インスタンス、「6Pack」を選ぶと 6 インスタンスの RhinoCompute が追加されます。</p>\n<p>つまり複数起動された RhinoCompute が並列で走るという意味です。</p>\n<p><img src=\"https://hiron.dev/article-images/try-hops-component/ParallelRhinoCompute.png\" alt=\"Parallel Rhino Compute\"></p>\n<h3>rhino.compute.exe と compute.geometry.exe の関係</h3>\n<p>rhino.compute.exe が .net5 で実装されているので、そのことについてつぶやいたら、mcneel の Steve からリプライがありました。\n.net framework 4.8 で書かれている compute.geometry を取りまとめる役割をしているようです。</p>\n<blockquote class=\"twitter-tweet\" data-partner=\"tweetdeck\"><p lang=\"en\" dir=\"ltr\">rhino.compute.exe is written in .NET 5 and acts as a reverse proxy parent process for one or more child compute.geometry.exe processes written in .NET 4.8.</p>&mdash; Steve Baer (@baersteve) <a href=\"https://twitter.com/baersteve/status/1376601913156845573?ref_src=twsrc%5Etfw\">March 29, 2021</a></blockquote>\n<script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n<h3>どこで RhinoCompute が起動して処理しているのか</h3>\n<p>バックで compute.geometry が動いており、これが RhinoCompute と呼ばれるものです。\nタスクマネージャーなどで確認すると、実際に動いているのが確認できます。</p>\n<p>なお、デフォルトで開かれるポートは 6500 です。</p>\n<h3>Hops と RhinoCompute との HTTP通信を確認したい</h3>\n<p>Hops の実装を確認すると以下の箇所で RhinoCompute サーバーの WindowSytle が Hidden または Minimized されています。</p>\n<ul>\n<li><a href=\"https://github.com/mcneel/compute.rhino3d/blob/master/src/hops/Servers.cs#L198\">compute.rhino3d/src/hops/Servers.cs</a></li>\n</ul>\n<p>コード中にコメントで書かれていますが、こちらをコメントアウトして以下のように書き換えれば確認できます。</p>\n<p>Grasshopper 起動時に RhinoCompute が呼び出される瞬間から表示されるようになります。\nここで表示されるウィンドウを使えばやり取りが確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"cs\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cs line-numbers\"><code class=\"language-cs\"><span class=\"token comment\">// startInfo.WindowStyle = Hops.HopsAppSettings.HideWorkerWindows ? ProcessWindowStyle.Hidden : ProcessWindowStyle.Minimized;</span>\nstartInfo<span class=\"token punctuation\">.</span>WindowStyle <span class=\"token operator\">=</span> ProcessWindowStyle<span class=\"token punctuation\">.</span>Normal<span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p><img src=\"https://hiron.dev/article-images/try-hops-component/CheckHTTP.gif\" alt=\"CheckHTTP\"></p>\n<h2>Hops を使った CPython コンポーネントの作成</h2>\n<h3>GH Hops CPython とは</h3>\n<p>Grasshopper 内でも Python を使用できますが、IronPyrhon と呼ばれる .NET 環境向けの Python となっており、CPython に比べて自由度が低いです。</p>\n<p>Hops を使った CPython のコンポーネント作成では CPython3.8 以上が対応バージョンとなっており、最新の Python 環境、ライブラリを使用できるようになります。</p>\n<p>以下のような利点が挙げられています。</p>\n<ol>\n<li>Numpy や Scipy などの CPython のライブラリを呼ぶことができます</li>\n<li>TensorFlow のような最新の CPython を使用できます</li>\n<li>並列処理できて再利用可能に作ることができます</li>\n<li>ブレークポイントを含むデバッグモードを使用できます</li>\n<li>Visual Studio Code をフルでサポートしています</li>\n</ol>\n<h3>仕組みについて</h3>\n<p>内蔵されているデフォルトの HTTP サーバーを使って、Grasshopper のコンポーネントとして機能したり、Flask アプリのミドルウェアとして機能したりできます。\nHops の基本は HTTP で RhinoCompute とやり取りをして結果を返すものです。</p>\n<p>前半では、Grasshopper の .gh ファイルそのものを使って RhinoCompute を読んでいました。\nこれは Python から RhinoCompute や RhinoInside をよんでその結果を Grasshopper に返しています。</p>\n<h3>環境構築</h3>\n<p>任意の環境で問題ありませんが、ここでは Python の venv を使用して Python の環境を構築します。\n環境を構築したいフォルダに移動して以下を実行し環境構築し、アクティブにします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">python -m venv venv\n.<span class=\"token punctuation\">\\</span>venv<span class=\"token punctuation\">\\</span>Script<span class=\"token punctuation\">\\</span>activate</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>\n<p>Python が複数インストールされている場合は、3.8 以上であること確認してください。以下でバージョンを確認できます。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">python -V</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>デフォルトの Python が想定しているバージョンではなかった場合、例えば以下のようバージョンを指定して venv を作成するとその環境は対象のバージョンになります。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bash line-numbers\"><code class=\"language-bash\">python3.9 -m venv venv</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<p>必要なライブラリをインストールします。</p>\n<div class=\"gatsby-highlight\" data-language=\"bath\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-bath line-numbers\"><code class=\"language-bath\">pip install ghhops-server flask</code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span></span></pre></div>\n<h3>サンプルプログラム</h3>\n<p>実装例は以下です。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-python line-numbers\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">import</span> ghhops_server <span class=\"token keyword\">as</span> hs\n<span class=\"token keyword\">import</span> rhino3dm\n\n<span class=\"token comment\"># register hops app as middleware</span>\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\nhops <span class=\"token operator\">=</span> hs<span class=\"token punctuation\">.</span>Hops<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@hops<span class=\"token punctuation\">.</span>component</span><span class=\"token punctuation\">(</span>\n    <span class=\"token string\">\"/pointat\"</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">=</span><span class=\"token string\">\"PointAt\"</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">=</span><span class=\"token string\">\"Get point along curve\"</span><span class=\"token punctuation\">,</span>\n    inputs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n        hs<span class=\"token punctuation\">.</span>HopsCurve<span class=\"token punctuation\">(</span><span class=\"token string\">\"Curve\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"C\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Curve to evaluate\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        hs<span class=\"token punctuation\">.</span>HopsNumber<span class=\"token punctuation\">(</span><span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"t\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Parameter on Curve to evaluate\"</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span><span class=\"token number\">2.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    outputs<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span>\n        hs<span class=\"token punctuation\">.</span>HopsPoint<span class=\"token punctuation\">(</span><span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"P\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Point on curve at t\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">pointat</span><span class=\"token punctuation\">(</span>curve<span class=\"token punctuation\">:</span>rhino3dm<span class=\"token punctuation\">.</span>Curve<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">:</span><span class=\"token builtin\">float</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> curve<span class=\"token punctuation\">.</span>PointAt<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">\"__main__\"</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>@hops.component の箇所でコンポーネントの見た目を設定しています。\nC# コンポーネントでいうところの GH_Component を継承したクラスのコンストラクタや RegisterInput/OutputParams に該当する部分です。</p>\n<p>inputs や outputs の部分であるように入出力には型指定が必要なので、適切な型を選択するようにしてください。以下の型があります。\n<a href=\"https://github.com/mcneel/compute.rhino3d/blob/master/src/ghhops-server-py/ghhops_server/params.py#L9\">実装</a> をみるとそれら以外の型はコメントアウトされているので、そのうち実装されるかもしれません。</p>\n<ul>\n<li>HopsBoolean</li>\n<li>HopsBrep</li>\n<li>HopsCurve</li>\n<li>HopsInteger</li>\n<li>HopsLine</li>\n<li>HopsMesh</li>\n<li>HopsNumber</li>\n<li>HopsPoint</li>\n<li>HopsString</li>\n<li>HopsSubD</li>\n<li>HopsSurface</li>\n<li>HopsVector</li>\n</ul>\n<p>icon も指定できます。</p>","excerpt":"はじめに Hops とは Hops は Rhino7 から使用できるようになった新しい Grasshopper コンポーネントです。 必要な環境 Windows Rhino 7.4 以上 CPython 3.8 以上 Visual Studio Code(任意の Python…","frontmatter":{"date":"03 April, 2021","path":"/articles/try-hops-component","title":"Grasshopper の Hops のはじめ方","article_tags":["Grasshopper","Python","RhinoCompute"]},"fields":{"readingTime":{"text":"3 min read"},"slug":"/Try-Hops-component/","collection":"article"}},"site":{"siteMetadata":{"title":"構造とデジタル_最新版_Final(1)"}}},"pageContext":{}},"staticQueryHashes":["32046230","3649515864"]}