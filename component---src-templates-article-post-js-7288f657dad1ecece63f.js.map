{"version":3,"sources":["webpack:///./src/templates/article-post.js","webpack:///./src/components/seo.js"],"names":["Content","MarkedHeader","HeaderDate","MarkdownContent","data","post","markdownRemark","url","frontmatter","path","title","description","excerpt","keywords","article_tags","image","fields","slug","src","async","date","readingTime","text","dangerouslySetInnerHTML","__html","html","size","round","site","siteMetadata","via","SEO","lang","meta","useStaticQuery","metaDescription","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"2OAcA,IAAMA,EAAO,2HAMPC,EAAY,+NAWZC,EAAU,gGAMVC,EAAe,iYAuBN,sBAAe,IAAZC,EAAW,EAAXA,KACVC,EAAOD,EAAKE,eACZC,EAAM,oBAAsBF,EAAKG,YAAYC,KAC7CC,EAAQL,EAAKG,YAAYE,MAC/B,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACEA,MAAOL,EAAKG,YAAYE,MACxBC,YAAaN,EAAKG,YAAYG,aAAeN,EAAKO,QAClDC,SAAUR,EAAKG,YAAYM,aAC3BC,MACE,iCAAmCV,EAAKW,OAAOC,KAAO,kBAG1D,YAACjB,EAAD,KACE,sBAAQkB,IAAI,0FAA0FC,OAAK,IAC3G,YAAClB,EAAD,KAAeI,EAAKG,YAAYE,OAChC,YAACR,EAAD,KACGG,EAAKG,YAAYY,KADpB,MAC6Bf,EAAKW,OAAOK,YAAYC,KADrD,WACmE,IAChEjB,EAAKG,YAAYM,aAAe,IAEnC,YAACX,EAAD,CAAiBoB,wBAAyB,CAAEC,OAAQnB,EAAKoB,QACzD,uBACE,YAAC,IAAD,CAAqBlB,IAAKA,GACxB,YAAC,IAAD,CAAcmB,KAAM,GAAIC,OAAK,KAG/B,YAAC,IAAD,CACEjB,MAAOA,EAAQ,MAAQN,EAAKwB,KAAKC,aAAanB,MAC9CH,IAAKA,GAEL,YAAC,IAAD,CAAYmB,KAAM,GAAIC,OAAK,KAG7B,YAAC,IAAD,CACEjB,MAAOA,EAAQ,MAAQN,EAAKwB,KAAKC,aAAanB,MAC9CoB,IAAI,aACJvB,IAAKA,GAEL,YAAC,IAAD,CAAamB,KAAM,GAAIC,OAAK,U,kCCnGxC,kDAYA,SAASI,EAAT,GAAmE,IAApDpB,EAAmD,EAAnDA,YAAaqB,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMpB,EAA0B,EAA1BA,SAAUH,EAAgB,EAAhBA,MAAOK,EAAS,EAATA,MAC/Ca,EAASM,yBAAe,YAAxBN,KAeFO,EAAkBxB,GAAeiB,EAAKC,aAAalB,YAEzD,OACE,YAAC,SAAD,CACEyB,eAAgB,CACdJ,QAEFtB,MAAOA,EACP2B,cAAa,QAAUT,EAAKC,aAAanB,MACzCuB,KAAM,CACJ,CACEK,KAAK,cACLC,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS7B,GAEX,CACE8B,SAAS,WACTD,QAASxB,GAASa,EAAKC,aAAad,OAEtC,CACEyB,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,uBAEV,CACED,KAAK,kBACLC,QAASX,EAAKC,aAAaY,QAE7B,CACEH,KAAK,gBACLC,QAAS7B,GAEX,CACE4B,KAAK,sBACLC,QAASJ,IAGVO,OACC7B,EAAS8B,OAAS,EACd,CACEL,KAAK,WACLC,QAAS1B,EAAS+B,KAAT,OAEX,IAELF,OAAOT,KAKhBF,EAAIc,aAAe,CACjBb,KAAK,KACLC,KAAM,GACNpB,SAAU,IAWGkB","file":"component---src-templates-article-post-js-7288f657dad1ecece63f.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport {\n  FacebookShareButton,\n  FacebookIcon,\n  HatenaShareButton,\n  HatenaIcon,\n  TwitterShareButton,\n  TwitterIcon,\n} from \"react-share\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 1.45rem 1.0875rem;\n`\n\nconst MarkedHeader = styled.h1`\n  display: inline;\n  border-radius: 1em 0 1em 0;\n  background-image: linear-gradient(\n    -100deg,\n    rgba(209, 245, 255, 0.15),\n    rgba(209, 245, 255, 1) 100%,\n    rgba(209, 245, 255, 0.45)\n  );\n`\n\nconst HeaderDate = styled.h3`\n  margin-top: 10px;\n  color: #606060;\n`\n\n// STYLE THE TAGS INSIDE THE MARKDOWN HERE\nconst MarkdownContent = styled.div`\n  a {\n    text-decoration: none;\n    position: relative;\n\n    background-image: linear-gradient(\n      rgba(209, 245, 255, 0.3),\n      rgba(209, 245, 255, 1)\n    );\n    background-repeat: no-repeat;\n    background-size: 100% 0.2em;\n    background-position: 0 88%;\n    transition: background-size 0.25s ease-in;\n    &:hover {\n      background-size: 100% 88%;\n    }\n  }\n\n  a > code:hover {\n    text-decoration: underline;\n  }\n`\n\nexport default ({ data }) => {\n  const post = data.markdownRemark\n  const url = \"https://hiron.dev\" + post.frontmatter.path\n  const title = post.frontmatter.title\n  return (\n    <Layout>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n        keywords={post.frontmatter.article_tags}\n        image={\n          \"https://hiron.dev/image/forOGP\" + post.fields.slug + \"thumbnail.png\"\n        }\n      />\n      <Content>\n        <script src='https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.5/MathJax.js?config=TeX-MML-AM_CHTML' async></script>\n        <MarkedHeader>{post.frontmatter.title}</MarkedHeader>\n        <HeaderDate>\n          {post.frontmatter.date} - {post.fields.readingTime.text} - Tags:{\" \"}\n          {post.frontmatter.article_tags + \"\"}\n        </HeaderDate>\n        <MarkdownContent dangerouslySetInnerHTML={{ __html: post.html }} />\n        <div>\n          <FacebookShareButton url={url}>\n            <FacebookIcon size={36} round />\n          </FacebookShareButton>\n\n          <HatenaShareButton\n            title={title + \" | \" + data.site.siteMetadata.title}\n            url={url}\n          >\n            <HatenaIcon size={36} round />\n          </HatenaShareButton>\n\n          <TwitterShareButton\n            title={title + \" | \" + data.site.siteMetadata.title}\n            via=\"hiron_rgkr\"\n            url={url}\n          >\n            <TwitterIcon size={36} round />\n          </TwitterShareButton>\n        </div>\n      </Content>\n    </Layout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($path: String!) {\n    markdownRemark(frontmatter: { path: { eq: $path } }) {\n      html\n      excerpt(pruneLength: 160)\n      frontmatter {\n        date(formatString: \"DD MMMM, YYYY\")\n        path\n        title\n        article_tags\n      }\n      fields {\n        readingTime {\n          text\n        }\n        slug\n        collection\n      }\n    }\n    site(siteMetadata: { title: {} }) {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            image\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: image || site.siteMetadata.image,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary_large_image`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}