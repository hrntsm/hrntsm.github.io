{"version":3,"sources":["webpack:///./src/pages/links.js","webpack:///./src/components/seo.js"],"names":["Content","MarkerHeader","IndexPage","data","title","description","href","css","SEO","lang","meta","keywords","image","site","useStaticQuery","metaDescription","siteMetadata","htmlAttributes","titleTemplate","name","content","property","author","concat","length","join","defaultProps"],"mappings":"6KAQMA,EAAO,2HAMPC,EAAY,gO,8HAwCHC,UA7BG,SAAC,GAAa,EAAXC,KACnB,OACE,YAAC,IAAD,KACE,YAAC,IAAD,CACCC,MAAM,QACNC,YAAY,eAEb,YAACL,EAAD,KACE,+BACA,iBAAGM,KAAK,4BACLC,IAAG,GAIJ,YAACN,EAAD,gBAEF,uBAAK,uBACL,iBAAGK,KAAK,2DACLC,IAAG,GAIJ,YAACN,EAAD,6B,kCC/CV,kDAYA,SAASO,EAAT,GAAmE,IAApDH,EAAmD,EAAnDA,YAAaI,EAAsC,EAAtCA,KAAMC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,SAAUP,EAAgB,EAAhBA,MAAOQ,EAAS,EAATA,MAC/CC,EAASC,yBAAe,YAAxBD,KAeFE,EAAkBV,GAAeQ,EAAKG,aAAaX,YAEzD,OACE,YAAC,SAAD,CACEY,eAAgB,CACdR,QAEFL,MAAOA,EACPc,cAAa,QAAUL,EAAKG,aAAaZ,MACzCM,KAAM,CACJ,CACES,KAAK,cACLC,QAASL,GAEX,CACEM,SAAS,WACTD,QAAShB,GAEX,CACEiB,SAAS,WACTD,QAASR,GAASC,EAAKG,aAAaJ,OAEtC,CACES,SAAS,iBACTD,QAASL,GAEX,CACEM,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,QAASP,EAAKG,aAAaM,QAE7B,CACEH,KAAK,gBACLC,QAAShB,GAEX,CACEe,KAAK,sBACLC,QAASL,IAGVQ,OACCZ,EAASa,OAAS,EACd,CACEL,KAAK,WACLC,QAAST,EAASc,KAAT,OAEX,IAELF,OAAOb,KAKhBF,EAAIkB,aAAe,CACjBjB,KAAK,KACLC,KAAM,GACNC,SAAU,IAWGH","file":"component---src-pages-links-js-ff3d1ebfa7cc5317e2b0.js","sourcesContent":["import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport { css } from \"@emotion/core\"\nimport styled from \"@emotion/styled\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 1.45rem 1.0875rem;\n`\n\nconst MarkerHeader = styled.h3`\n  display: inline;\n  border-radius: 1em 0 1em 0;\n  background-image: linear-gradient(\n    -100deg,\n    rgba(209, 255, 209, 0.15),\n    rgba(209, 255, 209, 0.8) 100%,\n    rgba(209, 255, 209, 0.25)\n  );\n`\n\nconst IndexPage = ({ data }) => {\n  return (\n    <Layout>\n      <SEO\n       title=\"Links\"\n       description=\"外部サイトへのリンク\"\n       />\n      <Content>\n        <h1>Links</h1>\n        <a href=\"https://github.com/hrntsm\"\n           css={css`\n                  text-decoration: none;\n                  color: inherit;\n                `}>\n          <MarkerHeader>GitHub</MarkerHeader>\n        </a>\n        <br/><br/>\n        <a href=\"https://www.youtube.com/channel/UC6k39WVNArYdGew6NeolxJA\"\n           css={css`\n                  text-decoration: none;\n                  color: inherit;\n                `}>\n          <MarkerHeader>Youtube Channel</MarkerHeader>\n        </a>\n      </Content>\n    </Layout>\n  )\n}\n\nexport default IndexPage\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { eq: false } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n            rawDate: date\n            path\n          }\n          fields {\n            slug\n            readingTime {\n              text\n            }\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title, image }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n            image\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:image`,\n          content: image || site.siteMetadata.image, \n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `ja`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}